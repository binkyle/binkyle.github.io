/**
* @vue/shared v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Se={},ze=()=>{},Ce=Object.assign,Oe=Array.isArray,j=e=>typeof e=="function",Me=e=>typeof e=="string",Ne=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ne));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Te(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function kt(e){v.push(e)}function Et(){v.pop()}let W=!1;function It(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Fe();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...$e(s)),console.warn(...r)}W=!1}function Fe(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function $e(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Ve(n))}),t}function Ve({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Re(e.props),r]:[s+r]}function Re(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Te(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):j(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Se;if(t){let c=t.parent;const l=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const a=c.ec;if(a){for(let h=0;h<a.length;h++)if(a[h](e,l,u)===!1)return}c=c.parent}if(r){A(r,null,10,[e,l,u]);return}}De(e,n,s,o,i)}function De(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const S=[];let k=null,z=0;const je=Promise.resolve();let q=null;const Le=100;function Pe(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function We(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Pe(t),0,e),e.flags|=1,te()}}function te(){q||(q=je.then(ne))}function Ae(e){Oe(e)?S.push(...e):k&&e.id===-1?k.splice(z+1,0,e):e.flags&1||(S.push(e),e.flags|=1),te()}function qe(e){if(S.length){const t=[...new Set(S)].sort((n,o)=>M(n)-M(o));if(S.length=0,k){k.push(...t);return}for(k=t,z=0;z<k.length;z++){const n=k[z];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,z=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=ze;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,qe(e),q=null,(b.length||S.length)&&ne(e)}}function St(e,t){const n=e.get(t)||0;if(n>Le){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,F=new Map;function zt(e,t){return F.has(e)?!1:(F.set(e,{initialDef:$(t),instances:new Set}),!0)}function $(e){return Je(e)?e.__vccOpts:e}function Ct(e,t){const n=F.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,$(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=F.get(e);if(!n)return;t=$(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=$(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?We(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}Ae(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Mt(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Nt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const He=/(?:^|[-_])(\w)/g,Ue=e=>e.replace(He,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return j(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?Ue(o):n?"App":"Anonymous"}function Je(e){return j(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Ge}=Object,{fromEntries:Be}=Object,Ye="ENTRIES",ie="KEYS",ce="VALUES",y="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=C(this._path);if(C(n)===y)return{done:!1,value:this.result()};const o=t.get(C(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==y).join("")}value(){return C(this._path).node.get(y)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const l=r*i;e:for(const u of e.keys())if(u===y){const a=s[l-1];a<=n&&o.set(c,[e.get(u),a])}else{let a=r;for(let h=0;h<u.length;++h,++a){const g=u[h],m=i*a,w=m-i;let d=s[m];const f=Math.max(0,a-n-1),p=Math.min(i-1,a+n);for(let _=f;_<p;++_){const E=g!==t[_],D=s[w+_]+ +E,T=s[w+_+1]+1,I=s[m+_]+1,O=s[m+_+1]=Math.min(D,T,I);O<d&&(d=O)}if(d>n)continue e}le(e.get(u),t,n,o,s,a,i,c+u)}};let ue=class N{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=V(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==y&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new N(c,t)}}return new N(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Qe(this._tree,t)}entries(){return new U(this,Ye)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(y):void 0}has(t){return J(this._tree,t)?.has(y)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(y,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(y,n(o.get(y))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(y);return s===void 0&&o.set(y,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new N;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return N.from(Object.entries(t))}};const V=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==y&&t.startsWith(o))return n.push([e,o]),V(e.get(o),t.slice(o.length),n);return n.push([e,t]),V(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==y&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==y&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(o,o+c),u),e.delete(r),e=u}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Qe=(e,t)=>{const[n,o]=V(e,t);if(n!==void 0){if(n.delete(y),n.size===0)ae(o);else if(n.size===1){const[s,r]=n.entries().next().value;fe(o,s,r)}}},ae=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ae(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==y&&fe(e.slice(0,-1),o,s)}},fe=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Xe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Ze=/[\n\r\p{Z}\p{P}]+/u,Y="or",de="and",et="and_not",tt=(e,t)=>{e.includes(t)||e.push(t)},he=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},pe=({score:e},{score:t})=>t-e,nt=()=>new Map,R=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},ge=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,me={[Y]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),he(o.terms,r)}}return e},[de]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);he(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[et]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},ot=(e,t,n,o,s,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(n-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*o/s)))},st=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),_e=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},rt=(e,t,n,o)=>{if(!e._index.has(o)){_e(e,n,t,o);return}const s=e._index.fetch(o,nt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?_e(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},it={k:1.2,b:.7,d:.5},ct={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Ze),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},ye={combineWith:Y,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:it},lt={combineWith:de,prefix:(e,t,n)=>t===n.length-1},ut={batchSize:1e3,batchWait:10},we={minDirtFactor:.1,minDirtCount:20},at={...ut,...we},be=Symbol("*"),ft=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},xe=(e,t=Y)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in me))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(me[n])},K=(e,t,n,o,s,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const a of Object.keys(i)){const h=i[a],g=e._fieldIds[a],m=r.get(g);if(m==null)continue;let w=m.size;const d=e._avgFieldLength[g];for(const f of m.keys()){if(!e._documentIds.has(f)){rt(e,g,f,n),w-=1;continue}const p=c?c(e._documentIds.get(f),n,e._storedFields.get(f)):1;if(!p)continue;const _=m.get(f),E=e._fieldLength.get(f)[g],D=ot(_,w,e._documentCount,E,d,l),T=o*s*h*p*D,I=u.get(f);if(I){I.score+=T,tt(I.terms,t);const O=ge(I.match,n);O?O.push(a):I.match[n]=[a]}else u.set(f,{score:T,terms:[t],match:{[n]:[a]}})}}return u},dt=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((d,f)=>({...d,[f]:ge(o.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=o,{fuzzy:u,prefix:a}={...ye.weights,...i},h=e._index.get(t.term),g=K(e,t.term,t.term,1,t.termBoost,h,s,r,l);let m,w;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,f=d<1?Math.min(c,Math.round(t.term.length*d)):d;f&&(w=e._index.fuzzyGet(t.term,f))}if(m)for(const[d,f]of m){const p=d.length-t.term.length;if(!p)continue;w?.delete(d);const _=a*d.length/(d.length+.3*p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}if(w)for(const d of w.keys()){const[f,p]=w.get(d);if(!p)continue;const _=u*d.length/(d.length+p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}return g},ke=(e,t,n={})=>{if(t===be)return ft(e,n);if(typeof t!="string"){const a={...n,...t,queries:void 0},h=t.queries.map(g=>ke(e,g,a));return xe(h,a.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(a=>l(a)).filter(a=>!!a).map(st(i)).map(a=>dt(e,a,i));return xe(u,i.combineWith)},Ee=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=ke(e,t,n),i=[];for(const[c,{score:l,terms:u,match:a}]of r){const h=u.length||1,g={id:e._documentIds.get(c),score:l*h,terms:Object.keys(a),queryTerms:u,match:a};Object.assign(g,e._storedFields.get(c)),(s.filter==null||s.filter(g))&&i.push(g)}return t===be&&s.boostDocument==null||i.sort(pe),i},ht=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of Ee(e,t,n)){const c=i.join(" "),l=o.get(c);l!=null?(l.score+=r,l.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:l}]of o)s.push({suggestion:r,terms:c,score:i/l});return s.sort(pe),s};class pt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?at:t.autoVacuum;this._options={...ct,...t,autoVacuum:n,searchOptions:{...ye,...t.searchOptions},autoSuggestOptions:{...lt,...t.autoSuggestOptions}},this._index=new ue,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=we,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const gt=e=>new pt(e),mt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=gt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new ue,c},_t=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=mt(e,t);i._documentIds=R(o),i._fieldLength=R(s),i._storedFields=R(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of n){const u=new Map;for(const a of Object.keys(l))u.set(parseInt(a,10),R(l[a]));i._index.set(c,u)}return i},Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(u,a=!1)=>{let h;i===0?h=u.length>20?`… ${u.slice(-20)}`:u:a?h=u.length+i>100?`${u.slice(0,100-i)}… `:u:h=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,h&&s.push(h),i+=h.length,a||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let l=n.indexOf(o,r);if(l===-1)return null;for(;l>=0;){const u=l+o.length;if(c(e.slice(r,l)),r=u,i>100)break;l=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},{entries:yt}=Object,wt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),bt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ie=(e,t,n={},o="max")=>{const s={};return Ee(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(r=>{const{id:i,terms:c,score:l}=r,u=i.includes("@"),a=i.includes("#"),[h,g]=i.split(/[#@]/),m=Number(h),w=c.sort((f,p)=>f.length-p.length).filter((f,p)=>c.slice(p+1).every(_=>!_.includes(f))),{contents:d}=s[m]??={title:"",contents:[]};if(u)d.push([{type:"customField",id:m,index:g,display:w.map(f=>r.c.map(p=>Q(p,f))).flat().filter(f=>f!==null)},l]);else{const f=w.map(p=>Q(r.h,p)).filter(p=>p!==null);if(f.length&&d.push([{type:a?"heading":"title",id:m,...a&&{anchor:g},display:f},l]),"t"in r&&r.t)for(const p of r.t){const _=w.map(E=>Q(p,E)).filter(E=>E!==null);_.length&&d.push([{type:"text",id:m,...a&&{anchor:g},display:_},l])}}}),yt(s).sort(([,r],[,i])=>(o?wt:bt)(r,i)).map(([r,{title:i,contents:c}])=>{if(!i){const l=Xe(t,r);l&&(i=l.h)}return{title:i,contents:c.map(([l])=>l)}})},ve=(e,t,n={})=>{const o=ht(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},xt=Be(Ge(JSON.parse("{\"/\":{\"documentCount\":185,\"nextId\":185,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"2#项目构建\",\"4\":\"2#部署到gitpages\",\"5\":\"2@0\",\"6\":\"2@1\",\"7\":\"3\",\"8\":\"3#一、前提\",\"9\":\"3#_1-本书背景及重要性\",\"10\":\"3#_1-背景\",\"11\":\"3#_2-重要性\",\"12\":\"3#_2-基础概念\",\"13\":\"3#_1-和-符号表示\",\"14\":\"3#_2-interface概念\",\"15\":\"3#_3-蓝图-blueprint\",\"16\":\"3#二、设计模式的定义和分类\",\"17\":\"3#_1-设计模式的概念\",\"18\":\"3#_2-模式构成\",\"19\":\"3#_3-模式和算法的区别\",\"20\":\"3#_4-设计模式的分类\",\"21\":\"3#三、设计原则\",\"22\":\"3#优秀设计的特征\",\"23\":\"3#四、创建型模式\",\"24\":\"3#工厂方法模式\",\"25\":\"3#抽象工厂模式\",\"26\":\"3#生成器模式\",\"27\":\"3#原型模式\",\"28\":\"3#单例模式\",\"29\":\"3#五、结构型模式\",\"30\":\"3#适配器模式\",\"31\":\"3#桥接模式\",\"32\":\"3#组合模式\",\"33\":\"3#装饰模式\",\"34\":\"3#外观模式\",\"35\":\"3#享元模式\",\"36\":\"3#代理模式\",\"37\":\"3#六、行为型模式\",\"38\":\"3#责任链模式-chain-of-responsibility-pattern\",\"39\":\"3#命令模式-command-pattern\",\"40\":\"3#迭代器模式-iterator-pattern\",\"41\":\"3#中介者模式-mediator-pattern\",\"42\":\"3#备忘录模式-memento-pattern\",\"43\":\"3#观察者模式-observer-pattern\",\"44\":\"3#状态模式-state-pattern\",\"45\":\"3#策略模式-strategy-pattern\",\"46\":\"3#模板方法模式-template-method-pattern\",\"47\":\"3#访问者模式-visitor-pattern\",\"48\":\"3#七、参考文献\",\"49\":\"3@0\",\"50\":\"3@1\",\"51\":\"4\",\"52\":\"4#can通信基本原理\",\"53\":\"4#can通信概述\",\"54\":\"4#can标准及原理图\",\"55\":\"4#can特性\",\"56\":\"4#can功能特性\",\"57\":\"4#can系统构成\",\"58\":\"4#autosar-can协议栈概述\",\"59\":\"4#can-driver\",\"60\":\"4#mcal相关配置\",\"61\":\"4#cantrcv\",\"62\":\"4#cantrcv-模式切换\",\"63\":\"4#mcal配置\",\"64\":\"4#autosar-can协议栈集成\",\"65\":\"4#autosar-can调试策略\",\"66\":\"4#参考链接\",\"67\":\"4@0\",\"68\":\"4@1\",\"69\":\"5\",\"70\":\"5#autosar技术标准框架\",\"71\":\"5#adaptive-platform-ap\",\"72\":\"5#classic-platform-cp\",\"73\":\"5#foundation-fo\",\"74\":\"5#fo部分所定义的通用特性\",\"75\":\"5#ap、cp、fo间的关系\",\"76\":\"5#cp-与-ap-的区别\",\"77\":\"5#基于区域集中式ee架构的整车部署\",\"78\":\"5#autosar标准制定方式\",\"79\":\"5#autosar年度关键节点\",\"80\":\"5#参考链接\",\"81\":\"5@0\",\"82\":\"5@1\",\"83\":\"6\",\"84\":\"6#余法运算公式\",\"85\":\"6@0\",\"86\":\"6@1\",\"87\":\"7\",\"88\":\"7#指令介绍\",\"89\":\"7#设置代理\",\"90\":\"7#取消代理\",\"91\":\"7#生效优先级\",\"92\":\"7#案例\",\"93\":\"7@0\",\"94\":\"7@1\",\"95\":\"8\",\"96\":\"8#引言\",\"97\":\"8#环境\",\"98\":\"8#大环境\",\"99\":\"8#小环境\",\"100\":\"8#影响股票的三个因素\",\"101\":\"8#股票的走势及走势线\",\"102\":\"8#综合看图\",\"103\":\"8#成功的要素\",\"104\":\"8#何时买股票何时卖股票\",\"105\":\"8#买入的要点归纳\",\"106\":\"8#选择股票的步骤\",\"107\":\"8#何时卖股票\",\"108\":\"8#小结一下何时及怎样卖股票\",\"109\":\"8#华尔街家训\",\"110\":\"8#怎样在心理上建设自己\",\"111\":\"8#抓住大机会\",\"112\":\"8#炒手访谈\",\"113\":\"8#金钱的反思\",\"114\":\"8#建立并严守自己的规则\",\"115\":\"8@0\",\"116\":\"8@1\",\"117\":\"9\",\"118\":\"9#在c-类中vector声明-报错-expected-parameter-declarator\",\"119\":\"9@0\",\"120\":\"9@1\",\"121\":\"10\",\"122\":\"10#原理\",\"123\":\"10#案例\",\"124\":\"10@0\",\"125\":\"10@1\",\"126\":\"11\",\"127\":\"11#前提\",\"128\":\"11#extern作用\",\"129\":\"11#案例-使用extern模拟面向对象编程\",\"130\":\"11@0\",\"131\":\"11@1\",\"132\":\"12\",\"133\":\"12#原理\",\"134\":\"12#实现方式\",\"135\":\"12#代码分析\",\"136\":\"12@0\",\"137\":\"12@1\",\"138\":\"13\",\"139\":\"13#ppireqs-安装\",\"140\":\"13#使用\",\"141\":\"13#使用案例\",\"142\":\"13#参考链接\",\"143\":\"13@0\",\"144\":\"13@1\",\"145\":\"14\",\"146\":\"14#工作原理\",\"147\":\"14#配置方法\",\"148\":\"14#参考链接\",\"149\":\"14@0\",\"150\":\"14@1\",\"151\":\"15\",\"152\":\"15#连接原则\",\"153\":\"15#auto-connect\",\"154\":\"15#simple-pattern\",\"155\":\"15#enhanced-patterns\",\"156\":\"15#reference\",\"157\":\"15@0\",\"158\":\"15@1\",\"159\":\"16\",\"160\":\"16#_1-介绍\",\"161\":\"16#_2-工作空间-workspace\",\"162\":\"16#_3-swc-设计\",\"163\":\"16#_1-创建-application-components\",\"164\":\"16#_2-理解类型、原型和接口-types-prototypes-and-interfaces\",\"165\":\"16#_3-端口、端口初始值和-数据元素-元数据的一个原子数据单元\",\"166\":\"16#_4-在应用程序组件中配置服务端口\",\"167\":\"16#_5-定义runnables\",\"168\":\"16#_6-为runnable配置触发器、-port-access\",\"169\":\"16#_7-生成模板\",\"170\":\"16@0\",\"171\":\"16@1\",\"172\":\"17\",\"173\":\"18\",\"174\":\"19\",\"175\":\"20\",\"176\":\"21\",\"177\":\"22\",\"178\":\"23\",\"179\":\"24\",\"180\":\"25\",\"181\":\"26\",\"182\":\"27\",\"183\":\"28\",\"184\":\"29\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,1],\"2\":[1,6],\"3\":[1,2],\"4\":[1,32],\"5\":[null,null,1],\"6\":[null,null,2],\"7\":[3,2],\"8\":[1],\"9\":[2,11],\"10\":[1,17],\"11\":[1,22],\"12\":[2],\"13\":[4,2],\"14\":[2,11],\"15\":[4,7],\"16\":[1],\"17\":[2,26],\"18\":[2,8],\"19\":[2,5],\"20\":[2,39],\"21\":[1],\"22\":[1,317],\"23\":[1],\"24\":[1,145],\"25\":[1,137],\"26\":[1,162],\"27\":[1,139],\"28\":[1,158],\"29\":[1],\"30\":[1,151],\"31\":[1,137],\"32\":[1,171],\"33\":[1,133],\"34\":[1,144],\"35\":[1,160],\"36\":[1,151],\"37\":[1],\"38\":[6,143],\"39\":[4,152],\"40\":[4,155],\"41\":[4,136],\"42\":[4,130],\"43\":[4,176],\"44\":[4,146],\"45\":[4,126],\"46\":[5,125],\"47\":[4,140],\"48\":[1,17],\"49\":[null,null,1],\"50\":[null,null,2],\"51\":[2,4],\"52\":[1],\"53\":[1,28],\"54\":[1,31],\"55\":[1,26],\"56\":[1,14],\"57\":[1,3],\"58\":[2,9],\"59\":[2,5],\"60\":[1,6],\"61\":[1,9],\"62\":[2,7],\"63\":[1,8],\"64\":[2],\"65\":[2],\"66\":[1,9],\"67\":[null,null,1],\"68\":[null,null,2],\"69\":[1,1],\"70\":[1,2],\"71\":[4,14],\"72\":[4,25],\"73\":[3,3],\"74\":[1,9],\"75\":[3,2],\"76\":[4,56],\"77\":[1,4],\"78\":[1],\"79\":[1,8],\"80\":[1,9],\"81\":[null,null,1],\"82\":[null,null,2],\"83\":[1,4],\"84\":[1,13],\"85\":[null,null,1],\"86\":[null,null,2],\"87\":[1,4],\"88\":[1],\"89\":[1,12],\"90\":[1,13],\"91\":[1,13],\"92\":[1,20],\"93\":[null,null,1],\"94\":[null,null,2],\"95\":[3,3],\"96\":[1,65],\"97\":[1],\"98\":[1,16],\"99\":[1,14],\"100\":[1,6],\"101\":[1,48],\"102\":[1,62],\"103\":[1,118],\"104\":[1,23],\"105\":[1,57],\"106\":[1,30],\"107\":[1,6],\"108\":[1,26],\"109\":[1,169],\"110\":[1,48],\"111\":[1,67],\"112\":[1,15],\"113\":[1,23],\"114\":[1,24],\"115\":[null,null,1],\"116\":[null,null,2],\"117\":[2,2],\"118\":[6,13],\"119\":[null,null,1],\"120\":[null,null,3],\"121\":[1,8],\"122\":[1,35],\"123\":[1,6],\"124\":[null,null,1],\"125\":[null,null,2],\"126\":[1,1],\"127\":[1,7],\"128\":[1,37],\"129\":[2,72],\"130\":[null,null,1],\"131\":[null,null,2],\"132\":[1,1],\"133\":[1,16],\"134\":[1,37],\"135\":[1,55],\"136\":[null,null,1],\"137\":[null,null,2],\"138\":[1,1],\"139\":[2,3],\"140\":[1,133],\"141\":[1,14],\"142\":[1,6],\"143\":[null,null,1],\"144\":[null,null,2],\"145\":[1,3],\"146\":[1,26],\"147\":[1,47],\"148\":[1,13],\"149\":[null,null,1],\"150\":[null,null,2],\"151\":[6,5],\"152\":[1],\"153\":[2],\"154\":[2],\"155\":[2],\"156\":[1,1],\"157\":[null,null,1],\"158\":[null,null,2],\"159\":[4,4],\"160\":[2,11],\"161\":[4,2],\"162\":[3,25],\"163\":[4,13],\"164\":[8,26],\"165\":[6,36],\"166\":[2],\"167\":[2],\"168\":[4],\"169\":[2,8],\"170\":[null,null,1],\"171\":[null,null,2],\"172\":[1,3],\"173\":[1],\"174\":[2],\"175\":[1],\"176\":[1],\"177\":[1],\"178\":[1],\"179\":[2],\"180\":[2],\"181\":[1],\"182\":[4],\"183\":[4],\"184\":[2]},\"averageFieldLength\":[1.7891089355740006,46.59666913555762,0.6893430682112405],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"新能源汽车行业从业者\"]},\"2\":{\"h\":\"使用vuePress搭建博客并部署到gitpages上\",\"t\":[\"这里使用的是theme-hope主题，项目环境、构建、本地运行指令可参考下面这个链接。\"]},\"3\":{\"h\":\"项目构建\",\"t\":[\"参考链接 小白教程\"]},\"4\":{\"h\":\"部署到gitpages\",\"t\":[\"若参考上面项目构建链接，此时本地git仓库已初始化\",\"1.创建本地分支\",\"查看本地分支\",\"git branch\",\"创建本地分支\",\"git checkout -b master\",\"2.连接远程分支\",\"添加远程仓库的引用\",\"git remote add origin https://github.com/yourusername/myrepo.git\",\"3.提交本地分支到远程分支\",\"git push origin <local_branch>:<remote_branch>\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"c\":[\"VuePress\",\"使用指南\"]},\"7\":{\"h\":\"《深入设计模式》阅读笔记\",\"t\":[\"本文主要总结设计模式这本书，并用c语言简单举例\"]},\"8\":{\"h\":\"\"},\"9\":{\"h\":\"1.本书背景及重要性\",\"t\":[\"这本书由亚历山大·什韦茨（Alexander Shvets）撰写，深入探讨了23种经典的设计模式。它不仅介绍了设计模式的定义、分类和应用场景，还通过具体的代码示例和UML图，帮助读者更好地理解和应用这些模式。\"]},\"10\":{\"h\":\"\",\"t\":[\"设计模式是软件设计中常见问题的典型解决方案，它们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。自1994年“四人组（GoF）”的《设计模式：可复用面向对象软件的基础》一书出版以来，设计模式逐渐成为软件开发领域的重要组成部分。随着软件开发技术的不断发展，新的设计模式不断涌现，原有的设计模式也在不断演进和完善。因此，深入研究设计模式对于提高软件设计的质量和效率具有重要意义。\"]},\"11\":{\"h\":\"\",\"t\":[\"提高软件的可复用性：设计模式是软件开发中的经验总结，它们提供了一种通用的解决方案，可以在不同的项目中重复使用。通过使用设计模式，可以减少代码的重复编写，提高代码的复用率，从而降低软件开发的成本和风险。\",\"提高软件的可维护性：设计模式通常具有良好的结构和组织，它们将复杂的系统分解为简单的模块，使得软件的维护更加容易。通过使用设计模式，可以提高软件的可读性、可扩展性和可维护性，从而降低软件维护的成本和风险。\",\"提高软件的开发效率：设计模式提供了一种通用的解决方案，可以在不同的项目中重复使用。通过使用设计模式，可以减少代码的重复编写，提高代码的复用率，从而提高软件开发的效率。\",\"促进团队协作：设计模式是软件开发中的经验总结，它们提供了一种通用的解决方案，可以在不同的项目中重复使用。通过使用设计模式，可以提高团队成员之间的沟通和协作效率，从而提高团队的整体素质和竞争力。\"]},\"12\":{\"h\":\"2.基础概念\"},\"13\":{\"h\":\"1. + 和 - 符号表示\",\"t\":[\"+表示公有\",\"-表示私有\"]},\"14\":{\"h\":\"2. Interface概念\",\"t\":[\"interface代表对象的共有部分\",\"基于接口的实现，规定一类对象的行为\",\"Untitled\",\"如果父类实现了某个接口，子类必须实现该接口；子类继承父类的目的是对父类的拓展，无法裁剪;\",\"开闭原则的基础，实现拒绝修改，支持拓展\"]},\"15\":{\"h\":\"3. 蓝图**（Blueprint）**\",\"t\":[\"蓝图通常指的是系统或应用的高层设计。它描述了系统的架构、组件、模块以及它们之间的关系和交互。蓝图更多关注的是整体结构和规划，而不是具体的实现细节。\"]},\"16\":{\"h\":\"\"},\"17\":{\"h\":\"1.设计模式的概念\",\"t\":[\"设计模式是软件设计中常见问题的典型解决方案，它们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。\",\"设计模式并不是一段特定的代码，而是解决特定问题的一般性概念。它提供了一种通用的解决方案，可以在不同的项目中重复使用。设计模式的目的是提高软件的可复用性、可维护性和可读性，使软件设计更加灵活、高效和可靠。\",\"设计模式通常具有以下特点：\",\"通用性：设计模式是针对软件设计中常见问题的解决方案，具有广泛的适用性。\",\"可复用性：设计模式提供了一种通用的解决方案，可以在不同的项目中重复使用，减少代码的重复编写。\",\"灵活性：设计模式可以根据具体的需求进行调整和扩展，具有较高的灵活性。\",\"可读性：设计模式提供了一种清晰、简洁的设计思路，使代码易于理解和维护。\"]},\"18\":{\"h\":\"2.模式构成\",\"t\":[\"意图\",\"描述问题和解决方案\",\"动机\",\"解释问题并说明模式会如何提供解决方案\",\"结构\",\"展示模式的各个部分和它们之间的关系\",\"实现\",\"在不同语言中的实现\"]},\"19\":{\"h\":\"3.模式和算法的区别\",\"t\":[\"算法像菜谱，提供达成目标的明确步骤。模式像蓝图[ ]:可以看到最终的结果和模式的功能，但需要自己确定实现步骤\"]},\"20\":{\"h\":\"4.设计模式的分类\",\"t\":[\"设计模式可以分为创建型模式、结构型模式和行为型模式三大类。创建型模式主要用于创建对象，结构型模式主要用于组织对象，行为型模式主要用于协调对象之间的交互。\",\"创建型模式\",\"提供创建对象的机制，增加已有代码的灵活性和可复用性\",\"结构型模式\",\"提供如何将对象和类组成较大的结构，同时保持结构的灵活性和高效\",\"行为模式\",\"负责对象间的高效沟通和职责委派\",\"创建型模式\",\"创建型模式提供了创建对象的机制，能够提升已有代码的灵活性和可复用性。创建型模式包括工厂方法模式、抽象工厂模式、生成器模式、原型模式和单例模式。\",\"结构型模式\",\"结构型模式介绍了如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。结构型模式包括适配器模式、桥接模式、组合模式、装饰模式、外观模式、享元模式和代理模式。\",\"行为型模式\",\"行为型模式负责对象间的高效沟通和职责委派。行为型模式包括责任链模式、命令模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式和访问者模式。\"]},\"21\":{\"h\":\"\"},\"22\":{\"h\":\"优秀设计的特征\",\"t\":[\"在软件开发中，优秀的设计应该具备以下特征（设计原则）：\",\"代码复用：通过复用已有的代码，可以减少代码的重复编写，提高开发效率，降低维护成本。\",\"扩展性：设计应该能够适应未来的变化和扩展，以便在需要时能够轻松地添加新的功能或修改现有的功能。\",\"单一职责原则：一个类应该只有一个引起它变化的原因，也就是说，一个类应该只负责一项职责。\",\"开闭原则：软件实体应该对扩展开放，对修改关闭。也就是说，在不修改现有代码的情况下，可以通过添加新的代码来扩展软件的功能。\",\"里氏替换原则：当一个子类的对象可以替换其父类的对象时，软件的行为不会发生变化。也就是说，子类应该能够完全替代父类，而不会影响软件的正确性。\",\"接口隔离原则：客户端不应该被迫依赖于它们不使用的方法。也就是说，应该将接口拆分成更小的接口，以便客户端只需要依赖它们实际使用的接口。\",\"依赖倒置原则：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。也就是说，应该将高层模块和低层模块之间的依赖关系倒置过来，使得高层模块依赖于抽象，而不是具体的实现。\",\"(实际上就是面向接口开发)\",\"在C语言中，我们可以将汽车和引擎的关系作为依赖倒置原则的例子。在这个例子中，汽车是一个高层模块，引擎是一个低层模块。根据依赖倒置原则，汽车不应该直接依赖于具体的引擎实现，而是应该依赖于引擎的抽象接口。\",\"下面是一个简单的C语言代码示例：\",\"#include <stdio.h> // Engine interface typedef void(*EngineStart)(); typedef void(*EngineStop)(); typedef struct Engine { EngineStart start; EngineStop stop; } Engine; // Concrete engine implementation void startConcreteEngine() { printf(\\\"Concrete engine started.\\\\\\\\n\\\"); } void stopConcreteEngine() { printf(\\\"Concrete engine stopped.\\\\\\\\n\\\"); } Engine createConcreteEngine() { Engine engine = { .start = startConcreteEngine, .stop = stopConcreteEngine }; return engine; } // Car class typedef struct Car { Engine* engine; } Car; Car createCar(Engine* engine) { Car car = { .engine = engine }; return car; } void startCar(Car* car) { car->engine->start(); } void stopCar(Car* car) { car->engine->stop(); } int main() { Engine concreteEngine = createConcreteEngine(); Car car = createCar(&concreteEngine); startCar(&car); stopCar(&car); return 0; }\",\"在这个例子中，Engine是一个抽象接口，ConcreteEngine是一个具体的实现。Car类依赖于Engine接口，而不是具体的ConcreteEngine实现。这样，如果我们要更换汽车的引擎，我们只需要创建一个新的引擎实现，并将其传递给Car构造函数，而无需修改Car类的代码。这就是依赖倒置原则的应用。\",\"封装变化的内容\",\"“封装变化的内容” (pdf)\",\"面向接口进行开发，而不是面向实现\",\"“面向接口进行开发， 而不是面向实现” (pdf)\",\"组合优于继承 “组合优于继承” (pdf)\",\"“在重写方法时， 你需要确保新行为与其基类中的版本兼容。 这一点很重要， 因为子类的所有对象都可能被传递给以超类 对象为参数的任何代码， 相信你不会希望这些代码崩溃的。” (pdf) 当你重写一个方法时，确保新行为与基类中的版本兼容意味着你需要保持方法的签名（参数列表和返回类型）相同，以及保持方法的预期行为相似。这是因为在面向对象编程中，子类对象可以被当作其超类对象使用，而超类中的方法可能会被其他代码调用，这些代码可能无法区分子类和超类的对象。\",\"举个例子，假设有一个动物园程序，里面有一个 feed_animal 函数，它接受一个动物对象并喂养它。如果我们在子类中重写了动物的 eat 方法，我们需要确保新的 eat 方法与超类中的 eat 方法具有相同的签名和类似的行为，以便 feed_animal 函数在处理子类对象时不会出现问题。\",\"class Animal: def eat(self): print(\\\"Animal is eating\\\") class Dog(Animal): def eat(self): print(\\\"Dog is eating\\\") \\\\## feed_animal 函数接受一个 Animal 对象并喂养它def feed_animal(animal): animal.eat() \\\\## 创建一个 Dog 对象dog = Dog() \\\\## 调用 feed_animal 函数并传递 Dog 对象feed_animal(dog)\",\"在这个例子中，Dog 类重写了 eat 方法，但它的签名和预期行为与超类 Animal 中的 eat 方法相同，因此 feed_animal 函数在处理 Dog 对象时不会出现问题。\",\"如果 Dog 类中的 eat 方法签名或行为与 Animal 类中的不同，那么 feed_animal 函数在处理 Dog 对象时可能会出现意料之外的行为或错误。因此，确保在重写方法时与超类中的版本兼容是很重要的。\",\"“通过继承复用代码可能导致平行继承体系的产生。” (pdf) 你提到的这种情况通常被称为”多重继承”或”平行继承体系”，它可能会导致类层次结构的复杂性增加，从而使代码难以维护和理解。这种情况通常出现在具有多个功能维度的系统中，因为每个功能维度可能都需要一组不同的特性或行为。\",\"让我们通过一个简单的代码示例来说明这个概念。假设我们正在设计一个图形界面库，其中有两个主要功能维度：控件类型和主题样式。我们希望能够创建不同类型的控件（如按钮、文本框）并为它们应用不同的主题样式（如浅色主题、深色主题）。\",\"在这种情况下，如果我们使用了多重继承，可能会导致类层次结构的爆炸性增长。让我们看一个简化的示例：\",\"class Widget: def draw(self): pass class Button(Widget): def click(self): pass class TextBox(Widget): def edit(self): pass class LightTheme: def apply(self, widget): pass class DarkTheme: def apply(self, widget): pass class LightButton(Button, LightTheme): pass class DarkButton(Button, DarkTheme): pass class LightTextBox(TextBox, LightTheme): pass class DarkTextBox(TextBox, DarkTheme): pass\",\"在上面的示例中，我们创建了四个类来表示不同类型的控件和主题样式组合。如果我们有更多的控件类型和主题样式，类层次结构将会急剧膨胀。\",\"为了避免这种情况，通常会使用其他设计模式，如组合或策略模式，来减轻类层次结构的压力。这些模式允许我们将行为和特性组合起来，而不是通过继承来扩展类。这样可以更灵活地管理代码，并且不会导致类层次结构的爆炸性增长。\",\"“组合是代替继承的一种方法。 继承代表类之间的“是” 关系 （汽车是交通工具）， 而组合则代表“有” 关系（汽车有一个 引擎）” (pdf) 继承is是，组合is有\",\"SOLID 原则\",\"好莱坞原则” (pdf)\",\"“好莱坞原则” (pdf) 好莱坞原则是一种设计原则，它指导着框架与应用程序代码之间的交互方式。在这种原则下，框架控制着应用程序的执行流程，而应用程序代码则通过特定的方式与框架进行交互。具体来说，当需要执行某些操作时，框架会调用应用程序代码，而应用程序代码不能主动调用框架。\",\"让我们以JUnit为例来解释这个原则。JUnit是一个用于编写和运行Java单元测试的框架。在JUnit中，你可以编写测试用例，然后JUnit框架负责执行这些测试用例，并向你报告测试结果。在这个过程中，你的测试用例类会继承JUnit提供的测试类，并且你会覆盖一些方法或者使用注解来标记测试方法。\",\"下面是一个简单的JUnit测试用例的示例：\",\"import static org.junit.Assert.assertEquals; import org.junit.Test; public class MyTestClass { @Test public void testAddition() { int result = 2 + 2; assertEquals(4, result); } }\",\"在这个例子中，MyTestClass是一个简单的测试类，它包含了一个测试方法testAddition()。当你运行这个测试类时，JUnit框架会负责调用testAddition()方法，并检查其结果是否符合预期。\",\"这符合好莱坞原则的精神，因为测试方法的调用是由JUnit框架触发的，而不是由测试类自身触发的。换句话说，测试类告诉JUnit框架它有哪些测试方法，并且JUnit框架在需要执行这些方法时会主动调用它们。\",\"“设计 模式比框架更小且更抽象。 它们实际上是对一组类的关系及 其互动方式的描述。” (pdf) 模式的本质\",\"“中间层次的优点在于模式提供的复用方式要比框架的风险小。” (pdf) 中间层次的设计模式提供了一种介于框架和单个类之间的解决方案。它通常涉及将一些常见的模式、结构或者逻辑抽象出来，形成中间层次的组件，以便在不同的应用场景中进行复用。\",\"相比之下，框架提供了一个更为全面和高级的解决方案，它通常包含了整个应用程序的基础架构，定义了应用程序的整体结构和行为。因此，在使用框架时，你必须遵循框架所定义的规则和约定，这可能会限制你的灵活性，并且需要花费更多的时间来学习和理解整个框架的工作原理。\",\"中间层次的优点在于：\",\"更小的风险： 使用中间层次的设计模式，你可以更加灵活地选择性地应用一些特定的模式或者组件，而不需要依赖整个框架。这样可以降低引入新技术或者更改现有逻辑所带来的风险。因为中间层次的组件通常比整个框架更为简单和可控，你可以更容易地理解和管理这些组件。\",\"更高的可维护性： 中间层次的组件通常更加模块化和可组合，这使得它们更易于维护和扩展。你可以根据具体的需求选择性地替换或者更新中间层次的组件，而不会对整个应用程序产生太大的影响。\",\"举个例子，假设你正在开发一个Web应用程序，你可以选择使用一个完整的Web框架，比如Django或者Spring，来构建整个应用程序的基础架构。然而，如果你只需要处理一些简单的HTTP请求和响应，你也可以选择使用中间层次的组件，比如WSGI（Python Web Server Gateway Interface）或者Servlets（Java Servlets），来处理这些请求和响应，而不需要引入整个框架的复杂性和约束。这样可以减少开发和维护的成本，并且降低引入新技术所带来的风险。\"]},\"23\":{\"h\":\"\"},\"24\":{\"h\":\"工厂方法模式\",\"t\":[\"一、定义\",\"工厂方法模式是一种创建型设计模式，它定义了一个创建对象的接口，但让子类决定实例化哪个类。工厂方法模式将对象的创建与使用分离，使得系统更加灵活和可扩展。\",\"二、结构\",\"抽象工厂类：定义了一个创建产品的接口，其中包含一个抽象的工厂方法。\",\"具体工厂类：实现了抽象工厂类中的工厂方法，负责创建具体的产品对象。\",\"抽象产品类：定义了产品的共性，包含一个抽象的产品方法。\",\"具体产品类：实现了抽象产品类中的产品方法，是具体的产品对象。\",\"三、示例代码\",\"以下是一个使用工厂方法模式创建汽车的 C 语言示例：\",\"#include <stdio.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct { char* model; int year; } Car; // 抽象工厂函数 Car* createCar(CarType type) { switch (type) { case SEDAN: return createSedan(); case SUV: return createSUV(); case HATCHBACK: return createHatchback(); default: return NULL; } } // 创建轿车 Car* createSedan() { Car* sedan = (Car*)malloc(sizeof(Car)); sedan->model = \\\"Sedan Model\\\"; sedan->year = 2023; return sedan; } // 创建 SUV Car* createSUV() { Car* suv = (Car*)malloc(sizeof(Car)); suv->model = \\\"SUV Model\\\"; suv->year = 2023; return suv; } // 创建掀背车 Car* createHatchback() { Car* hatchback = (Car*)malloc(sizeof(Car)); hatchback->model = \\\"Hatchback Model\\\"; hatchback->year = 2023; return hatchback; } int main() { // 创建轿车 Car* sedan = createCar(SEDAN); printf(\\\"Created Sedan: %s, %d\\\\\\\\n\\\", sedan->model, sedan->year); // 创建 SUV Car* suv = createCar(SUV); printf(\\\"Created SUV: %s, %d\\\\\\\\n\\\", suv->model, suv->year); // 创建掀背车 Car* hatchback = createCar(HATCHBACK); printf(\\\"Created Hatchback: %s, %d\\\\\\\\n\\\", hatchback->model, hatchback->year); // 释放内存 free(sedan); free(suv); free(hatchback); return 0; }\",\"在上述示例中，我们定义了一个汽车类型枚举CarType，表示不同类型的汽车。然后，我们定义了一个汽车结构体Car，包含汽车的模型和年份信息。\",\"接下来，我们定义了一个抽象工厂函数createCar，它根据传入的汽车类型参数创建相应类型的汽车。在函数内部，我们使用switch语句根据汽车类型创建具体的汽车对象，并返回创建的汽车指针。\",\"然后，我们分别实现了创建轿车、SUV 和掀背车的具体函数createSedan、createSUV和createHatchback，它们分别创建相应类型的汽车对象，并设置汽车的模型和年份信息。\",\"在main函数中，我们使用createCar函数创建了三种不同类型的汽车，并打印出汽车的信息。最后，我们使用free函数释放了创建的汽车对象所占用的内存。\",\"通过使用工厂方法模式，我们将汽车的创建过程封装在抽象工厂函数中，使得客户端代码无需关心具体汽车类型的创建细节，只需要调用抽象工厂函数即可创建所需类型的汽车对象。这样可以提高代码的灵活性和可扩展性，方便后续添加新的汽车类型或修改汽车的创建方式。\",\"四、优点\",\"灵活性：工厂方法模式将对象的创建与使用分离，使得系统更加灵活。客户端可以根据需要选择不同的工厂类来创建不同的产品对象，而无需关心产品对象的具体实现细节。\",\"可扩展性：工厂方法模式允许添加新的工厂类和产品类，而无需修改现有代码。只需要在新的工厂类中实现createShape方法，就可以创建新的产品对象。\",\"封装性：工厂方法模式将产品对象的创建过程封装在工厂类中，使得客户端无法直接创建产品对象，从而提高了系统的封装性和安全性。\",\"五、缺点\",\"增加了系统的复杂度：工厂方法模式需要定义抽象工厂类、具体工厂类、抽象产品类和具体产品类，增加了系统的复杂度。\",\"可能会导致类的数量过多：如果系统中需要创建的产品种类较多，那么可能会导致工厂类和产品类的数量过多，从而增加了系统的维护成本。\",\"六、适用场景\",\"当需要创建的对象种类较多，且它们的创建过程比较复杂时，可以使用工厂方法模式。\",\"当需要在不同的条件下创建不同的对象时，可以使用工厂方法模式。\",\"当需要将对象的创建过程与使用过程分离时，可以使用工厂方法模式。\",\"七、总结\",\"工厂方法模式是一种创建型设计模式，它定义了一个创建对象的接口，但让子类决定实例化哪个类。工厂方法模式将对象的创建与使用分离，使得系统更加灵活和可扩展。工厂方法模式的优点是灵活性、可扩展性和封装性，缺点是增加了系统的复杂度和可能会导致类的数量过多。工厂方法模式适用于需要创建的对象种类较多、在不同的条件下创建不同的对象以及将对象的创建过程与使用过程分离的场景。\"]},\"25\":{\"h\":\"抽象工厂模式\",\"t\":[\"一、定义\",\"抽象工厂模式是一种创建型设计模式，它能创建一系列相关的对象，而无需指定其具体类。\",\"二、结构\",\"抽象产品：定义了产品的共性，是具体产品的父类。\",\"具体产品：实现了抽象产品的接口，是抽象产品的具体实现。\",\"抽象工厂：声明了一组创建抽象产品的方法，是具体工厂的父类。\",\"具体工厂：实现了抽象工厂的构建方法，负责创建具体的产品对象。\",\"三、示例代码\",\"#include <stdio.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct { char* model; int year; } Car; // 抽象工厂函数 Car* createCar(CarType type) { switch (type) { case SEDAN: return createSedan(); case SUV: return createSUV(); case HATCHBACK: return createHatchback(); default: return NULL; } } // 创建轿车 Car* createSedan() { Car* sedan = (Car*)malloc(sizeof(Car)); sedan->model = \\\"Sedan Model\\\"; sedan->year = 2023; return sedan; } // 创建 SUV Car* createSUV() { Car* suv = (Car*)malloc(sizeof(Car)); suv->model = \\\"SUV Model\\\"; suv->year = 2023; return suv; } // 创建掀背车 Car* createHatchback() { Car* hatchback = (Car*)malloc(sizeof(Car)); hatchback->model = \\\"Hatchback Model\\\"; hatchback->year = 2023; return hatchback; } int main() { // 创建轿车 Car* sedan = createCar(SEDAN); printf(\\\"Created Sedan: %s, %d\\\\\\\\n\\\", sedan->model, sedan->year); // 创建 SUV Car* suv = createCar(SUV); printf(\\\"Created SUV: %s, %d\\\\\\\\n\\\", suv->model, suv->year); // 创建掀背车 Car* hatchback = createCar(HATCHBACK); printf(\\\"Created Hatchback: %s, %d\\\\\\\\n\\\", hatchback->model, hatchback->year); // 释放内存 free(sedan); free(suv); free(hatchback); return 0; }\",\"在上述示例中，我们定义了一个抽象工厂函数createCar，它根据传入的汽车类型参数创建相应类型的汽车。在函数内部，我们使用switch语句根据汽车类型创建具体的汽车对象，并返回创建的汽车指针。\",\"然后，我们分别实现了创建轿车、SUV 和掀背车的具体函数createSedan、createSUV和createHatchback，它们分别创建相应类型的汽车对象，并设置汽车的模型和年份信息。\",\"在main函数中，我们使用createCar函数创建了三种不同类型的汽车，并打印出汽车的信息。最后，我们使用free函数释放了创建的汽车对象所占用的内存。\",\"四、优点\",\"封装性：抽象工厂模式将产品的创建过程封装在抽象工厂类中，使得客户端代码无需关心产品的具体创建过程，只需要通过抽象工厂类提供的方法来获取产品即可。\",\"可扩展性：抽象工厂模式支持产品族的扩展，当需要添加新的产品族时，只需要创建新的具体工厂类即可，无需修改现有代码。\",\"灵活性：抽象工厂模式可以根据不同的需求创建不同的产品族，从而提高了系统的灵活性。\",\"五、缺点\",\"抽象工厂类的设计难度较大：抽象工厂类需要定义多个抽象方法来创建不同的产品，这些方法的参数和返回值类型需要根据具体的产品族进行设计，因此抽象工厂类的设计难度较大。\",\"产品族的扩展较为困难：当需要添加新的产品族时，需要创建新的具体工厂类，并且需要在抽象工厂类中添加相应的抽象方法，这可能会导致抽象工厂类的代码变得复杂。\",\"客户端代码的修改较为困难：当需要修改产品族的实现时，需要修改具体工厂类的代码，这可能会导致客户端代码的修改较为困难。\",\"六、适用场景\",\"当需要创建的对象具有复杂的结构，且需要分步骤创建时，可以使用生成器模式。\",\"当需要创建的对象具有不同的实现方式，且这些实现方式之间存在差异时，可以使用生成器模式。\",\"当需要创建的对象具有不同的配置选项，且这些配置选项之间存在差异时，可以使用生成器模式。\",\"七、总结\",\"工厂模式与抽象工厂模式的区别在于:\",\"工厂方法模式：针对的是 一个产品等级结构。 抽象工厂模式：针对 多个产品等级结构\",\"抽象工厂模式是一种创建型设计模式，它能创建一系列相关的对象，而无需指定其具体类。抽象工厂模式将产品的创建过程封装在抽象工厂类中，使得客户端代码无需关心产品的具体创建过程，只需要通过抽象工厂类提供的方法来获取产品即可。抽象工厂模式支持产品族的扩展，当需要添加新的产品族时，只需要创建新的具体工厂类即可，无需修改现有代码。抽象工厂模式可以根据不同的需求创建不同的产品族，从而提高了系统的灵活性。\"]},\"26\":{\"h\":\"生成器模式\",\"t\":[\"一、定义\",\"生成器模式是一种创建型设计模式，它使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。\",\"二、结构\",\"生成器（Builder）：声明了创建产品对象的抽象接口，通常包含一系列创建方法。\",\"具体生成器（Concrete Builder）：实现了生成器接口，负责创建具体的产品对象，并提供了设置产品参数的方法。\",\"产品（Product）：表示被创建的复杂对象，包含多个部件。\",\"主管（Director）：负责使用生成器对象创建产品，它知道如何按照一定的顺序调用生成器的方法来创建产品。\",\"三、示例代码（用 C 语言举汽车例子）\",\"#include <stdio.h> #include <stdlib.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct { char* model; int year; CarType type; } Car; // 声明生成器 struct Builder; // 生成器接口 typedef struct Builder { void (*setModel)(struct Builder*, char*); void (*setYear)(struct Builder*, int); void (*setType)(struct Builder*, CarType); Car* (*build)(struct Builder*); } Builder; // 具体生成器 typedef struct { // base 用于模拟继承，ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)builder; Builder base; Car* car; } ConcreteBuilder; // 设置汽车模型 void setModel(Builder* builder, char* model) { ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)builder; concreteBuilder->car->model = model; } // 设置汽车年份 void setYear(Builder* builder, int year) { ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)builder; concreteBuilder->car->year = year; } // 设置汽车类型 void setType(Builder* builder, CarType type) { ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)builder; concreteBuilder->car->type = type; } // 构建汽车 Car* build(Builder* builder) { ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)builder; return concreteBuilder->car; } // 主管 typedef struct { Builder* builder; } Director; // 创建主管 Director* createDirector(Builder* builder) { Director* director = (Director*)malloc(sizeof(Director)); director->builder = builder; return director; } // 制造汽车 Car* manufactureCar(Director* director) { director->builder->setModel(director->builder, \\\"Toyota Camry\\\"); director->builder->setYear(director->builder, 2023); director->builder->setType(director->builder, SEDAN); return director->builder->build(director->builder); } int main() { // 创建具体生成器 ConcreteBuilder* concreteBuilder = (ConcreteBuilder*)malloc(sizeof(ConcreteBuilder)); concreteBuilder->car = (Car*)malloc(sizeof(Car)); // 初始化生成器接口 concreteBuilder->base.setModel = setModel; concreteBuilder->base.setYear = setYear; concreteBuilder->base.setType = setType; concreteBuilder->base.build = build; // 创建主管 Director* director = createDirector((Builder*)concreteBuilder); // 制造汽车 Car* car = manufactureCar(director); // 输出汽车信息 printf(\\\"Model: %s\\\\n\\\", car->model); printf(\\\"Year: %d\\\\n\\\", car->year); printf(\\\"Type: %d\\\\n\\\", car->type); // 释放内存 free(car); free(concreteBuilder); free(director); return 0; }\",\"在上述示例中，我们定义了一个汽车结构体Car，它包含汽车的模型、年份和类型等信息。然后，我们定义了一个生成器接口Builder，它包含了设置汽车模型、年份和类型的方法，以及构建汽车的方法。接着，我们定义了一个具体生成器ConcreteBuilder，它实现了生成器接口，并在构建汽车时创建了一个汽车结构体的实例。\",\"为了使用生成器模式创建汽车，我们还定义了一个主管Director，它包含了一个生成器实例。主管的manufactureCar方法按照一定的顺序调用生成器的方法来创建汽车。\",\"在main函数中，我们首先创建了一个具体生成器和一个生成器实例，然后创建了一个主管。接着，我们使用主管的manufactureCar方法创建了一辆汽车，并输出了汽车的信息。最后，我们释放了所有的内存。\",\"四、优点\",\"封装性：生成器模式将产品的创建过程封装在生成器类中，使得客户端代码无需关心产品的具体创建过程，只需要通过生成器类提供的方法来获取产品即可。\",\"灵活性：生成器模式可以根据不同的需求创建不同的生成器类，从而实现不同的产品创建过程。\",\"可扩展性：生成器模式可以很容易地添加新的产品类型和创建过程，只需要创建新的生成器类即可。\",\"五、缺点\",\"复杂性：生成器模式需要定义多个类来实现产品的创建过程，因此代码结构比较复杂。\",\"性能问题：生成器模式在创建产品时需要进行多次方法调用，因此可能会影响代码的性能。\",\"六、适用场景\",\"当需要创建的对象具有复杂的结构，且需要分步骤创建时，可以使用生成器模式。\",\"当需要创建的对象具有不同的实现方式，且这些实现方式之间存在差异时，可以使用生成器模式。\",\"当需要创建的对象具有不同的配置选项，且这些配置选项之间存在差异时，可以使用生成器模式。\",\"七、总结\",\"生成器模式是一种创建型设计模式，它使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。生成器模式的优点是封装性、灵活性和可扩展性，缺点是复杂性和性能问题。生成器模式适用于需要创建的对象具有复杂的结构、不同的实现方式或不同的配置选项的场景。\"]},\"27\":{\"h\":\"原型模式\",\"t\":[\"一、定义\",\"原型模式是一种创建型设计模式，它使你能够复制已有对象，而又无需使代码依赖它们所属的类。\",\"二、结构\",\"原型（Prototype）：声明了克隆方法的接口。在绝大多数情况下，其中只会有一个名为clone的方法。\",\"具体原型（Concrete Prototype）：实现了克隆方法的类。除了将原始对象的数据复制到克隆体中之外，该方法有时还需处理克隆过程中的极端情况，例如克隆关联对象和梳理递归依赖等等。\",\"客户端（Client）：可以复制实现了原型接口的任何对象。\",\"三、示例代码\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct Car { char* model; int year; CarType type; struct Car* (*clone)(struct Car*); } Car; // 克隆函数 Car* cloneCar(Car* original) { Car* newCar = (Car*)malloc(sizeof(Car)); newCar->model = strdup(original->model); newCar->year = original->year; newCar->type = original->type; newCar->clone = original->clone; return newCar; } // 创建新的汽车实例 Car* createCar(char* model, int year, CarType type) { Car* car = (Car*)malloc(sizeof(Car)); car->model = strdup(model); car->year = year; car->type = type; car->clone = cloneCar; return car; } // 打印汽车信息 void printCar(Car* car) { printf(\\\"Model: %s\\\\n\\\", car->model); printf(\\\"Year: %d\\\\n\\\", car->year); printf(\\\"Type: %d\\\\n\\\", car->type); } int main() { // 创建原型汽车 Car* prototypeCar = createCar(\\\"Toyota Camry\\\", 2023, SEDAN); // 克隆新汽车 Car* clonedCar = prototypeCar->clone(prototypeCar); // 修改克隆汽车的信息 clonedCar->model = strdup(\\\"Honda Accord\\\"); clonedCar->year = 2024; // 打印汽车信息 printf(\\\"Original Car:\\\\n\\\"); printCar(prototypeCar); printf(\\\"\\\\nCloned Car:\\\\n\\\"); printCar(clonedCar); // 释放内存 free(prototypeCar->model); free(prototypeCar); free(clonedCar->model); free(clonedCar); return 0; }\",\"四、优点\",\"提高性能：原型模式可以避免重复创建对象的开销，特别是在创建复杂对象时。\",\"方便创建复杂对象：原型模式可以通过复制已有对象来创建新对象，而无需关心对象的具体实现细节。\",\"便于扩展：原型模式可以通过添加新的原型类来扩展系统的功能，而无需修改已有代码。\",\"五、缺点\",\"内存消耗：原型模式需要为每个原型对象分配内存，如果原型对象数量较多，可能会导致内存消耗过大。\",\"深拷贝问题：如果原型对象包含指向其他对象的引用，那么在克隆原型对象时，需要进行深拷贝，否则可能会导致引用的对象被多个克隆对象共享，从而引发问题。\",\"安全问题：原型模式可能会导致安全问题，例如，如果原型对象包含敏感信息，那么在克隆原型对象时，需要进行特殊处理，以避免敏感信息泄露。\",\"六、适用场景\",\"创建复杂对象：如果创建一个复杂对象的过程比较复杂，或者需要大量的计算资源，那么可以使用原型模式来提高创建对象的效率。\",\"需要频繁创建对象：如果需要频繁创建对象，那么可以使用原型模式来避免重复创建对象的开销。\",\"对象状态变化较小：如果对象的状态变化较小，那么可以使用原型模式来减少对象的创建和销毁次数。\",\"七、总结\",\"原型模式是一种创建型设计模式，它通过复制已有对象来创建新对象，从而避免了重复创建对象的开销。原型模式的优点是提高性能、方便创建复杂对象和便于扩展，缺点是内存消耗、深拷贝问题和安全问题。原型模式适用于创建复杂对象、需要频繁创建对象和对象状态变化较小的场景。\"]},\"28\":{\"h\":\"单例模式\",\"t\":[\"一、定义\",\"单例模式是一种创建型设计模式，它保证一个类只有一个实例，并提供一个全局访问点来访问该实例。\",\"二、结构\",\"单例类：包含一个私有构造函数，以防止外部创建实例。它还包含一个静态成员变量来存储唯一的实例，并提供一个公共静态方法来获取该实例。\",\"客户端：通过调用单例类的公共静态方法来获取唯一的实例。\",\"三、示例代码（用 C 语言举汽车例子）\",\"#include <stdio.h> #include <stdlib.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct { char* model; int year; CarType type; } Car; // 单例类 typedef struct { Car* car; } Singleton; // 获取单例实例的方法 Singleton* getSingleton() { static Singleton instance = {NULL}; if (instance.car == NULL) { instance.car = (Car*)malloc(sizeof(Car)); instance.car->model = \\\"Toyota Camry\\\"; instance.car->year = 2023; instance.car->type = SEDAN; } return &instance; } int main() { // 获取单例实例 Singleton* singleton = getSingleton(); // 打印汽车信息 printf(\\\"Model: %s\\\\\\\\n\\\", singleton->car->model); printf(\\\"Year: %d\\\\\\\\n\\\", singleton->car->year); printf(\\\"Type: %d\\\\\\\\n\\\", singleton->car->type); // 释放内存 free(singleton->car); return 0; }\",\"在上述示例中，我们定义了一个Car结构体来表示汽车的属性，包括车型、生产年份和车辆类型。然后，我们定义了一个Singleton结构体来表示单例类，其中包含一个Car类型的指针car，用于存储唯一的汽车实例。\",\"在getSingleton方法中，我们使用静态变量instance来存储单例实例。如果instance为空，则创建一个新的汽车实例并将其赋值给instance。如果instance已经存在，则直接返回该实例。\",\"在main函数中，我们调用getSingleton方法获取单例实例，并打印汽车的信息。最后，我们释放单例实例所占用的内存。\",\"四、优点\",\"保证唯一性：单例模式保证一个类只有一个实例，避免了多个实例之间的竞争和冲突。\",\"全局访问点：单例模式提供了一个全局访问点来访问唯一的实例，方便了代码的使用和管理。\",\"节省资源：单例模式只创建一个实例，避免了多次创建和销毁实例所带来的资源浪费。\",\"提高性能：单例模式避免了多个实例之间的竞争和冲突，提高了程序的性能。\",\"五、缺点\",\"违反单一职责原则：单例模式将创建实例和管理实例的职责集中在一个类中，违反了单一职责原则。\",\"难以测试：单例模式的实例是在程序启动时创建的，难以在测试中进行模拟和控制。\",\"可能导致内存泄漏：如果单例模式的实例没有被正确释放，可能会导致内存泄漏。\",\"不支持多线程：在多线程环境下，单例模式可能会出现线程安全问题，需要进行特殊处理。\",\"六、适用场景\",\"需要全局访问的对象：如果一个对象需要在整个程序中被全局访问，例如日志记录器、数据库连接池等，可以使用单例模式来保证只有一个实例存在。\",\"资源共享的对象：如果一个对象需要被多个线程或进程共享，例如文件系统、网络连接等，可以使用单例模式来保证只有一个实例存在，避免资源竞争和冲突。\",\"需要频繁创建和销毁的对象：如果一个对象的创建和销毁非常频繁，例如线程池、对象池等，可以使用单例模式来避免频繁的创建和销毁操作，提高程序的性能。\",\"需要保证唯一性的对象：如果一个对象需要保证唯一性，例如序列号生成器、唯一标识符生成器等，可以使用单例模式来保证只有一个实例存在，避免重复生成。\",\"七、总结\",\"单例模式是一种简单而实用的设计模式，它保证了一个类只有一个实例，并提供了一个全局访问点来访问该实例。单例模式的优点是保证唯一性、全局访问点、节省资源和提高性能，缺点是违反单一职责原则、难以测试、可能导致内存泄漏和不支持多线程。单例模式适用于需要全局访问的对象、资源共享的对象、需要频繁创建和销毁的对象和需要保证唯一性的对象。在使用单例模式时，需要注意处理好线程安全问题，避免出现内存泄漏等问题。\"]},\"29\":{\"h\":\"\"},\"30\":{\"h\":\"适配器模式\",\"t\":[\"一、定义\",\"适配器模式是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。\",\"二、结构\",\"客户端（Client）：使用适配器的对象。\",\"目标接口（Target）：客户端期望的接口。\",\"适配器（Adapter）：将源接口转换为目标接口的对象。\",\"源接口（Adaptee）：需要被适配的接口。\",\"三、示例代码（用 C 语言举汽车例子）\",\"#include <stdio.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 汽车结构体 typedef struct { char* model; int year; CarType type; } Car; // 电动汽车结构体 typedef struct { Car car; int batteryCapacity; } ElectricCar; // 定义电动汽车接口 typedef struct { void (*charge)(struct ElectricCar*); } ElectricCarInterface; // 实现电动汽车接口的充电方法 void charge(ElectricCar* electricCar) { printf(\\\"Charging the electric car: %s\\\\\\\\n\\\", electricCar->car.model); } // 定义传统燃油汽车接口 typedef struct { void (*refuel)(struct GasolineCar*); } GasolineCarInterface; // 传统燃油汽车结构体 typedef struct { Car car; int fuelCapacity; } GasolineCar; // 实现传统燃油汽车接口的加油方法 void refuel(GasolineCar* gasolineCar) { printf(\\\"Refueling the gasoline car: %s\\\\n\\\", gasolineCar->car.model); } // 定义适配器结构体 typedef struct { ElectricCarInterface electricCarInterface; GasolineCar* gasolineCar; } Adapter; // 实现适配器的充电方法 void adapterCharge(Adapter* adapter) { refuel(adapter->gasolineCar); } int main() { // 创建传统燃油汽车对象 GasolineCar gasolineCar = { .car = { .model = \\\"Toyota Camry\\\", .year = 2023, .type = SEDAN }, .fuelCapacity = 50 }; // 创建适配器对象，并将传统燃油汽车对象作为参数传递给适配器的构造函数 Adapter adapter = { .electricCarInterface = { .charge = adapterCharge }, .gasolineCar = &gasolineCar }; // 通过适配器对象调用充电方法 adapter.electricCarInterface.charge(&adapter); return 0; }\",\"在上述示例中，我们定义了一个汽车类型枚举CarType，表示汽车的类型。然后，我们定义了一个汽车结构体Car，表示汽车的基本信息。\",\"接下来，我们定义了一个电动汽车接口ElectricCarInterface，其中包含一个充电方法charge。我们还定义了一个电动汽车结构体ElectricCar，它包含一个汽车结构体Car和一个电池容量batteryCapacity。\",\"然后，我们定义了一个传统燃油汽车接口GasolineCarInterface，其中包含一个加油方法refuel。我们还定义了一个传统燃油汽车结构体GasolineCar，它包含一个汽车结构体Car和一个燃油容量fuelCapacity。\",\"为了使传统燃油汽车能够使用电动汽车的充电接口，我们定义了一个适配器结构体Adapter，它包含一个电动汽车接口ElectricCarInterface和一个传统燃油汽车结构体GasolineCar的指针。\",\"在适配器的构造函数中，我们将传统燃油汽车结构体的指针赋值给适配器结构体中的gasolineCar指针。\",\"在适配器的充电方法adapterCharge中，我们调用了传统燃油汽车结构体的加油方法refuel，实现了将传统燃油汽车的加油接口转换为电动汽车的充电接口的功能。\",\"在main函数中，我们创建了一个传统燃油汽车对象gasolineCar，并创建了一个适配器对象adapter，将传统燃油汽车对象作为参数传递给适配器的构造函数。\",\"最后，我们通过适配器对象调用充电方法charge，实现了对传统燃油汽车的充电操作。\",\"四、优点\",\"提高了代码的复用性：适配器模式可以将现有的接口转换为客户端期望的接口，从而提高了代码的复用性。\",\"提高了代码的灵活性：适配器模式可以在不修改现有代码的情况下，将现有的接口转换为客户端期望的接口，从而提高了代码的灵活性。\",\"提高了代码的可扩展性：适配器模式可以在不修改现有代码的情况下，将现有的接口转换为客户端期望的接口，从而提高了代码的可扩展性。\",\"五、缺点\",\"增加了代码的复杂度：适配器模式需要定义一个适配器类，将现有的接口转换为客户端期望的接口，从而增加了代码的复杂度。\",\"降低了代码的性能：适配器模式需要将现有的接口转换为客户端期望的接口，从而降低了代码的性能。\",\"六、适用场景\",\"需要将现有的接口转换为客户端期望的接口：当现有的接口与客户端期望的接口不兼容时，可以使用适配器模式将现有的接口转换为客户端期望的接口。\",\"需要提高代码的复用性和灵活性：当需要提高代码的复用性和灵活性时，可以使用适配器模式将现有的接口转换为客户端期望的接口。\",\"需要提高代码的可扩展性：当需要提高代码的可扩展性时，可以使用适配器模式将现有的接口转换为客户端期望的接口。\",\"七、总结\",\"适配器模式是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。适配器模式的优点是提高了代码的复用性、灵活性和可扩展性，缺点是增加了代码的复杂度和降低了代码的性能。适配器模式适用于需要将现有的接口转换为客户端期望的接口的场景。\"]},\"31\":{\"h\":\"桥接模式\",\"t\":[\"一、定义\",\"桥接模式是一种结构型设计模式，它通过将抽象部分与实现部分分离，使它们可以独立变化。它是通过组合而不是继承来达到目的，即将抽象和实现用组合的方式桥接在一起。\",\"二、结构\",\"桥接模式主要包括以下几个部分：\",\"抽象部分（Abstraction）：定义高层接口，并维护对实现部分的引用。\",\"实现部分（Implementor）：定义实现接口，但不提供具体实现。\",\"具体实现部分（ConcreteImplementor）：实现实现接口的具体类。\",\"扩展抽象部分（RefinedAbstraction）：扩展抽象部分的接口，通常是高层业务逻辑。\",\"三、示例代码\",\"假设我们要设计一个汽车应用程序，不同类型的汽车（如轿车、SUV）可以有不同的操作系统（如Android Auto、Apple CarPlay）。我们使用桥接模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> // 实现部分接口 typedef struct CarSystem { void (*playMusic)(struct CarSystem*); void (*navigate)(struct CarSystem*); } CarSystem; // 具体实现部分：Android Auto typedef struct AndroidAuto { CarSystem carSystem; } AndroidAuto; void androidPlayMusic(CarSystem* carSystem) { printf(\\\"Playing music with Android Auto.\\\\\\\\n\\\"); } void androidNavigate(CarSystem* carSystem) { printf(\\\"Navigating with Android Auto.\\\\\\\\n\\\"); } AndroidAuto* createAndroidAuto() { AndroidAuto* androidAuto = (AndroidAuto*)malloc(sizeof(AndroidAuto)); androidAuto->carSystem.playMusic = androidPlayMusic; androidAuto->carSystem.navigate = androidNavigate; return androidAuto; } // 具体实现部分：Apple CarPlay typedef struct AppleCarPlay { CarSystem carSystem; } AppleCarPlay; void applePlayMusic(CarSystem* carSystem) { printf(\\\"Playing music with Apple CarPlay.\\\\\\\\n\\\"); } void appleNavigate(CarSystem* carSystem) { printf(\\\"Navigating with Apple CarPlay.\\\\\\\\n\\\"); } AppleCarPlay* createAppleCarPlay() { AppleCarPlay* appleCarPlay = (AppleCarPlay*)malloc(sizeof(AppleCarPlay)); appleCarPlay->carSystem.playMusic = applePlayMusic; appleCarPlay->carSystem.navigate = appleNavigate; return appleCarPlay; } // 抽象部分：汽车 typedef struct Car { CarSystem* carSystem; void (*playMusic)(struct Car*); void (*navigate)(struct Car*); } Car; void carPlayMusic(Car* car) { car->carSystem->playMusic(car->carSystem); } void carNavigate(Car* car) { car->carSystem->navigate(car->carSystem); } Car* createCar(CarSystem* carSystem) { Car* car = (Car*)malloc(sizeof(Car)); car->carSystem = carSystem; car->playMusic = carPlayMusic; car->navigate = carNavigate; return car; } // 扩展抽象部分：轿车 typedef struct Sedan { Car car; } Sedan; Sedan* createSedan(CarSystem* carSystem) { Sedan* sedan = (Sedan*)malloc(sizeof(Sedan)); sedan->car.carSystem = carSystem; sedan->car.playMusic = carPlayMusic; sedan->car.navigate = carNavigate; return sedan; } // 扩展抽象部分：SUV typedef struct SUV { Car car; } SUV; SUV* createSUV(CarSystem* carSystem) { SUV* suv = (SUV*)malloc(sizeof(SUV)); suv->car.carSystem = carSystem; suv->car.playMusic = carPlayMusic; suv->car.navigate = carNavigate; return suv; } int main() { // 创建具体实现部分对象 AndroidAuto* androidAuto = createAndroidAuto(); AppleCarPlay* appleCarPlay = createAppleCarPlay(); // 创建扩展抽象部分对象，使用不同的实现部分 Sedan* sedanWithAndroid = createSedan((CarSystem*)androidAuto); SUV* suvWithApple = createSUV((CarSystem*)appleCarPlay); // 使用扩展抽象部分对象 sedanWithAndroid->car.playMusic((Car*)sedanWithAndroid); sedanWithAndroid->car.navigate((Car*)sedanWithAndroid); suvWithApple->car.playMusic((Car*)suvWithApple); suvWithApple->car.navigate((Car*)suvWithApple); // 清理内存 free(androidAuto); free(appleCarPlay); free(sedanWithAndroid); free(suvWithApple); return 0; }\",\"主要结构说明\",\"实现部分（Implementor）：定义了CarSystem接口，包括playMusic和navigate方法。\",\"具体实现部分（ConcreteImplementor）：定义了AndroidAuto和AppleCarPlay，分别实现了CarSystem接口的方法。\",\"抽象部分（Abstraction）：定义了Car，包含一个指向CarSystem的指针，并提供playMusic和navigate方法，这些方法将调用CarSystem的相应方法。\",\"扩展抽象部分（RefinedAbstraction）：定义了Sedan和SUV，它们扩展了Car。\",\"四、优点\",\"分离抽象和实现：可以独立地扩展抽象部分和实现部分。\",\"提高系统可扩展性：桥接模式提高了系统的可扩展性。\",\"降低类的数量：通过组合来减少继承层次，可以有效地减少类的数量。\",\"五、缺点\",\"增加复杂性：引入了更多的类和接口，增加了系统的复杂性。\",\"六、适用场景\",\"需要在抽象和具体实现之间增加更多的灵活性。\",\"不希望使用继承或层次过深的继承结构。\",\"一个类存在两个独立变化的维度，并且这两个维度都需要独立扩展。\",\"七、总结\",\"桥接模式通过分离抽象部分和实现部分，使得它们可以独立变化，提高了系统的可扩展性和灵活性。在汽车应用中，不同类型的汽车可以使用不同的操作系统，这展示了桥接模式如何在实际项目中使用。\"]},\"32\":{\"h\":\"组合模式\",\"t\":[\"一、定义\",\"组合模式是一种结构型设计模式，它允许你将对象组合成树状结构来表示“部分-整体”的层次结构。组合模式使得客户端可以统一对待单个对象和组合对象。\",\"二、结构\",\"组合模式主要包括以下几个部分：\",\"组件（Component）：定义对象的接口，并提供接口的默认实现。\",\"叶子（Leaf）：表示叶节点对象，没有子节点。\",\"容器（Composite）：包含子节点，既可以是叶子也可以是其他容器。\",\"三、示例代码\",\"假设我们要设计一个汽车应用程序，不同的汽车零部件（如车轮、发动机）可以组合成一个整体汽车。我们使用组合模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 定义组件接口 typedef struct Component { void (*operation)(struct Component*); void (*add)(struct Component*, struct Component*); void (*remove)(struct Component*, struct Component*); struct Component* (*getChild)(struct Component*, int); char* name; } Component; // 定义叶子节点：汽车零部件 typedef struct Leaf { Component component; } Leaf; void leafOperation(Component* component) { printf(\\\"Leaf: %s\\\\\\\\n\\\", component->name); } void leafAdd(Component* component, Component* child) { // 叶子节点不能添加子节点 } void leafRemove(Component* component, Component* child) { // 叶子节点不能移除子节点 } Component* leafGetChild(Component* component, int index) { return NULL; // 叶子节点没有子节点 } Leaf* createLeaf(const char* name) { Leaf* leaf = (Leaf*)malloc(sizeof(Leaf)); leaf->component.name = strdup(name); leaf->component.operation = leafOperation; leaf->component.add = leafAdd; leaf->component.remove = leafRemove; leaf->component.getChild = leafGetChild; return leaf; } // 定义组合节点：汽车 typedef struct Composite { Component component; Component** children; int childCount; int capacity; } Composite; void compositeOperation(Component* component) { Composite* composite = (Composite*)component; printf(\\\"Composite: %s\\\\\\\\n\\\", component->name); for (int i = 0; i < composite->childCount; ++i) { composite->children[i]->operation(composite->children[i]); } } void compositeAdd(Component* component, Component* child) { Composite* composite = (Composite*)component; if (composite->childCount >= composite->capacity) { composite->capacity *= 2; composite->children = (Component**)realloc(composite->children, composite->capacity * sizeof(Component*)); } composite->children[composite->childCount++] = child; } void compositeRemove(Component* component, Component* child) { Composite* composite = (Composite*)component; for (int i = 0; i < composite->childCount; ++i) { if (composite->children[i] == child) { for (int j = i; j < composite->childCount - 1; ++j) { composite->children[j] = composite->children[j + 1]; } composite->childCount--; break; } } } Component* compositeGetChild(Component* component, int index) { Composite* composite = (Composite*)component; if (index < 0 || index >= composite->childCount) { return NULL; } return composite->children[index]; } Composite* createComposite(const char* name) { Composite* composite = (Composite*)malloc(sizeof(Composite)); composite->component.name = strdup(name); composite->component.operation = compositeOperation; composite->component.add = compositeAdd; composite->component.remove = compositeRemove; composite->component.getChild = compositeGetChild; composite->children = (Component**)malloc(4 * sizeof(Component*)); composite->capacity = 4; composite->childCount = 0; return composite; } // 测试组合模式 int main() { // 创建叶子节点：汽车零部件 Leaf* wheel = createLeaf(\\\"Wheel\\\"); Leaf* engine = createLeaf(\\\"Engine\\\"); Leaf* door = createLeaf(\\\"Door\\\"); // 创建组合节点：汽车 Composite* car = createComposite(\\\"Car\\\"); // 将零部件添加到汽车 car->component.add((Component*)car, (Component*)wheel); car->component.add((Component*)car, (Component*)engine); car->component.add((Component*)car, (Component*)door); // 调用汽车的操作，应该递归调用子节点的操作 car->component.operation((Component*)car); // 清理内存 free(wheel->component.name); free(wheel); free(engine->component.name); free(engine); free(door->component.name); free(door); free(car->children); free(car->component.name); free(car); return 0; }\",\"主要结构说明\",\"组件（Component）：定义了统一的接口，包含操作方法 operation 以及管理子节点的方法 add、remove 和 getChild。还包含一个名称属性 name。\",\"叶子（Leaf）：具体实现了组件接口，没有子节点的功能。实现了 operation 方法。\",\"容器（Composite）：实现了组件接口，并包含一个子节点数组，用于管理其子节点。实现了 operation、add、remove 和 getChild 方法。\",\"测试组合模式：创建了多个叶子节点（汽车零部件）和一个组合节点（汽车），并将叶子节点添加到组合节点中，最终调用组合节点的操作方法来展示组合模式的工作方式。\",\"四、优点\",\"清晰的层次结构：组合模式能清晰地表示对象的层次结构。\",\"客户端一致性：客户端可以一致地对待单个对象和组合对象。\",\"便于扩展：可以很容易地增加新的叶子节点或组合节点。\",\"五、缺点\",\"类型安全性较低：由于使用了通用的组件接口，类型检查只能在运行时进行。\",\"管理复杂性：如果层次结构较深，可能会导致管理复杂性增加。\",\"六、适用场景\",\"需要表示对象的部分-整体层次结构。\",\"希望客户端可以统一处理单个对象和组合对象。\",\"七、 总结\",\"组合模式通过定义统一的接口，使得单个对象和组合对象可以一致地进行处理。它适用于需要表示部分-整体层次结构的场景。在汽车应用中，汽车可以由不同的零部件组合而成，展示了组合模式如何在实际项目中使用。\"]},\"33\":{\"h\":\"装饰模式\",\"t\":[\"一、定义\",\"装饰模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。它是一种结构型设计模式，通过创建一个装饰类来包装原有的类，并在不修改原类的情况下添加额外的行为。\",\"二、结构\",\"装饰模式的主要角色包括：\",\"组件（Component）：定义了一个对象接口，可以给这些对象动态地添加职责。\",\"具体组件（Concrete Component）：定义了一个具体的对象，也可以给这个对象添加一些职责。\",\"装饰（Decorator）：装饰抽象类，继承了Component，从外类来扩展Component类的功能，但对于Component来说，是无需知道Decorator的存在的。\",\"具体装饰（Concrete Decorator）：具体的装饰对象，起到给Component添加职责的功能。\",\"三、示例代码\",\"下面是一个使用装饰模式的示例代码，演示了如何使用装饰模式来为一个汽车添加不同的功能：\",\"#include <stdio.h> // 定义汽车结构体 typedef struct { char *name; int speed; } Car; // 定义汽车装饰结构体 typedef struct { Car *car; void (*decorate)(struct Decorator *decorator); } Decorator; // 定义汽车装饰函数 void decorateWithGPS(Decorator *decorator) { printf(\\\"%s 汽车已安装 GPS\\\\\\\\n\\\", decorator->car->name); } void decorateWithSunroof(Decorator *decorator) { printf(\\\"%s 汽车已安装天窗\\\\\\\\n\\\", decorator->car->name); } // 创建汽车对象 Car *createCar(char *name, int speed) { Car *car = (Car *)malloc(sizeof(Car)); car->name = name; car->speed = speed; return car; } // 创建汽车装饰对象 Decorator *createDecorator(Car *car, void (*decorate)(Decorator *decorator)) { Decorator *decorator = (Decorator *)malloc(sizeof(Decorator)); decorator->car = car; decorator->decorate = decorate; return decorator; } // 测试函数 int main() { // 创建汽车对象 Car *car = createCar(\\\"宝马\\\", 200); // 创建汽车装饰对象 Decorator *decoratorWithGPS = createDecorator(car, decorateWithGPS); Decorator *decoratorWithSunroof = createDecorator(car, decorateWithSunroof); // 调用汽车装饰函数 decoratorWithGPS->decorate(decoratorWithGPS); decoratorWithSunroof->decorate(decoratorWithSunroof); // 释放内存 free(car); free(decoratorWithGPS); free(decoratorWithSunroof); return 0; }\",\"在上述代码中，我们首先定义了一个Car结构体，其中包含汽车的名称和速度。然后，我们定义了一个Decorator结构体，其中包含一个指向Car结构体的指针和一个装饰函数指针。接着，我们定义了两个装饰函数decorateWithGPS和decorateWithSunroof，分别用于为汽车添加GPS和天窗功能。然后，我们使用createCar函数创建了一个汽车对象，并使用createDecorator函数为汽车对象创建了两个装饰对象，分别用于添加GPS和天窗功能。最后，我们使用decorate函数调用了装饰对象的装饰函数，为汽车添加了GPS和天窗功能。\",\"四、优点\",\"动态扩展：装饰模式可以在不改变原有对象结构的情况下，动态地给对象添加新的功能，具有很强的灵活性。\",\"遵循开闭原则：装饰模式可以在不修改原有代码的情况下，扩展对象的功能，符合开闭原则。\",\"简化代码：装饰模式可以将复杂的功能分解为多个简单的装饰类，每个装饰类只负责一个特定的功能，从而简化了代码的结构。\",\"提高代码的可维护性：装饰模式将功能分解为多个独立的装饰类，每个装饰类只负责一个特定的功能，从而提高了代码的可维护性。\",\"五、缺点\",\"增加了系统的复杂性：装饰模式需要创建多个装饰类，增加了系统的复杂性。\",\"降低了系统的性能：装饰模式需要创建多个装饰类，并且在运行时需要动态地选择装饰类，从而降低了系统的性能。\",\"六、适用场景\",\"需要动态地给对象添加新的功能：装饰模式可以在不改变原有对象结构的情况下，动态地给对象添加新的功能，具有很强的灵活性。\",\"需要在不修改原有代码的情况下，扩展对象的功能：装饰模式可以在不修改原有代码的情况下，扩展对象的功能，符合开闭原则。\",\"需要将复杂的功能分解为多个简单的装饰类：装饰模式可以将复杂的功能分解为多个简单的装饰类，每个装饰类只负责一个特定的功能，从而简化了代码的结构，提高了代码的可维护性。\",\"七、总结\",\"装饰模式是一种非常有用的设计模式，它可以在不改变原有对象结构的情况下，动态地给对象添加新的功能，具有很强的灵活性。装饰模式遵循开闭原则，可以在不修改原有代码的情况下，扩展对象的功能。装饰模式可以将复杂的功能分解为多个简单的装饰类，每个装饰类只负责一个特定的功能，从而简化了代码的结构，提高了代码的可维护性。\"]},\"34\":{\"h\":\"外观模式\",\"t\":[\"一、定义\",\"外观模式是一种结构型设计模式，它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。\",\"二、结构\",\"外观类（Facade）：外观类是外观模式的核心，它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。外观类通常包含一些与子系统相关的业务逻辑，它可以将这些业务逻辑封装起来，对外提供一个简单的接口。\",\"子系统类（Subsystem Classes）：子系统类是外观模式的组成部分，它们是子系统中的具体实现类，负责实现子系统的具体功能。子系统类通常包含一些与子系统相关的业务逻辑，它们可以将这些业务逻辑封装起来，对外提供一个简单的接口。\",\"三、示例代码（C语言汽车举例）\",\"#include <stdio.h> #include <stdlib.h> // 定义汽车类型枚举 typedef enum { SEDAN, SUV, HATCHBACK } CarType; // 定义汽车结构体 typedef struct { char* model; int year; CarType type; } Car; // 创建汽车对象 Car* createCar(CarType type) { Car* car = (Car*)malloc(sizeof(Car)); car->model = \\\"Toyota Camry\\\"; car->year = 2023; car->type = type; return car; } // 定义汽车工厂结构体 typedef struct { Car* (*createCar)(CarType type); } CarFactory; // 创建汽车工厂对象 CarFactory* createCarFactory() { CarFactory* factory = (CarFactory*)malloc(sizeof(CarFactory)); factory->createCar = createCar; return factory; } // 定义汽车经销商结构体 typedef struct { CarFactory* factory; } CarDealer; // 创建汽车经销商对象 CarDealer* createCarDealer() { CarDealer* dealer = (CarDealer*)malloc(sizeof(CarDealer)); dealer->factory = createCarFactory(); return dealer; } // 销售汽车 void sellCar(CarDealer* dealer, CarType type) { Car* car = dealer->factory->createCar(type); printf(\\\"Sold a %s %d\\\\\\\\n\\\", car->model, car->year); free(car); } int main() { // 创建汽车经销商对象 CarDealer* dealer = createCarDealer(); // 销售汽车 sellCar(dealer, SEDAN); sellCar(dealer, SUV); sellCar(dealer, HATCHBACK); // 释放汽车经销商对象 free(dealer); return 0; }\",\"在上述示例代码中，我们定义了一个汽车工厂结构体CarFactory，它包含一个创建汽车对象的函数指针createCar。我们还定义了一个汽车经销商结构体CarDealer，它包含一个汽车工厂对象factory。在main函数中，我们创建了一个汽车经销商对象dealer，并通过调用sellCar函数来销售汽车。在sellCar函数中，我们通过调用汽车工厂对象的createCar函数来创建汽车对象，并将其销售出去。最后，我们释放了汽车经销商对象。\",\"四、优点\",\"简化了客户端的代码：外观模式为子系统中的一组接口提供了一个统一的高层接口，使得客户端的代码更加简洁。客户端只需要与外观类进行交互，而不需要与子系统中的具体实现类进行交互，从而减少了客户端的代码量。\",\"提高了系统的可维护性：外观模式将子系统中的具体实现类隐藏起来，使得客户端只需要与外观类进行交互，而不需要了解子系统的具体实现细节。这样，当子系统中的具体实现类发生变化时，客户端的代码不需要进行修改，从而提高了系统的可维护性。\",\"提高了系统的灵活性：外观模式可以根据客户端的需求，动态地选择不同的子系统实现类，从而提高了系统的灵活性。例如，当客户端需要使用不同的汽车品牌时，只需要修改外观类中的汽车工厂对象，而不需要修改客户端的代码。\",\"五、缺点\",\"可能会增加系统的复杂度：外观模式将子系统中的具体实现类隐藏起来，使得客户端只需要与外观类进行交互，而不需要了解子系统的具体实现细节。这样，当子系统中的具体实现类发生变化时，客户端的代码不需要进行修改，从而提高了系统的可维护性。但是，这也可能会导致系统的复杂度增加，因为外观类需要了解子系统的具体实现细节，以便为客户端提供一个统一的高层接口。\",\"可能会降低系统的性能：外观模式为子系统中的一组接口提供了一个统一的高层接口，使得客户端的代码更加简洁。但是，这也可能会导致系统的性能降低，因为外观类需要将客户端的请求转发给子系统中的具体实现类，从而增加了系统的开销。\",\"六、适用场景\",\"当需要为一个复杂的子系统提供一个简单的接口时：外观模式可以为一个复杂的子系统提供一个简单的接口，使得客户端的代码更加简洁。\",\"当需要提高系统的可维护性时：外观模式可以将子系统中的具体实现类隐藏起来，使得客户端只需要与外观类进行交互，而不需要了解子系统的具体实现细节。这样，当子系统中的具体实现类发生变化时，客户端的代码不需要进行修改，从而提高了系统的可维护性。\",\"当需要提高系统的灵活性时：外观模式可以根据客户端的需求，动态地选择不同的子系统实现类，从而提高了系统的灵活性。\",\"七、总结\",\"外观模式是一种结构型设计模式，它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。外观模式的优点是简化了客户端的代码、提高了系统的可维护性和灵活性；缺点是可能会增加系统的复杂度和降低系统的性能。外观模式适用于当需要为一个复杂的子系统提供一个简单的接口、提高系统的可维护性和灵活性的场景。\"]},\"35\":{\"h\":\"享元模式\",\"t\":[\"一、定义\",\"享元模式是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。\",\"二、结构\",\"享元（Flyweight）：包含了一个对象的部分状态，这些状态可以在多个对象之间共享。\",\"具体享元（Concrete Flyweight）：实现了享元接口，包含了具体的共享状态。\",\"享元工厂（Flyweight Factory）：负责创建和管理享元对象。\",\"客户端（Client）：使用享元对象。\",\"三、示例代码（用 C 语言汽车举例）\",\"#include <stdio.h> #include <stdlib.h> // 定义汽车颜色枚举 typedef enum { RED, BLUE, GREEN, WHITE, BLACK } CarColor; // 定义汽车品牌枚举 typedef enum { BMW, AUDI, BENZ, TOYOTA, HONDA } CarBrand; // 定义汽车结构体 typedef struct { CarColor color; CarBrand brand; } Car; // 享元工厂结构体 typedef struct { Car* cars[100]; int numCars; } CarFactory; // 创建享元工厂 CarFactory* createCarFactory() { CarFactory* factory = (CarFactory*)malloc(sizeof(CarFactory)); factory->numCars = 0; return factory; } // 获取汽车享元 Car* getCar(CarFactory* factory, CarColor color, CarBrand brand) { for (int i = 0; i < factory->numCars; i++) { if (factory->cars[i]->color == color && factory->cars[i]->brand == brand) { return factory->cars[i]; } } Car* car = (Car*)malloc(sizeof(Car)); car->color = color; car->brand = brand; factory->cars[factory->numCars++] = car; return car; } // 打印汽车信息 void printCar(Car* car) { printf(\\\"Car: color = %d, brand = %d\\\\\\\\n\\\", car->color, car->brand); } int main() { // 创建享元工厂 CarFactory* factory = createCarFactory(); // 获取汽车享元 Car* car1 = getCar(factory, RED, BMW); Car* car2 = getCar(factory, BLUE, AUDI); Car* car3 = getCar(factory, GREEN, BENZ); Car* car4 = getCar(factory, WHITE, TOYOTA); Car* car5 = getCar(factory, BLACK, HONDA); // 打印汽车信息 printCar(car1); printCar(car2); printCar(car3); printCar(car4); printCar(car5); // 释放内存 free(car1); free(car2); free(car3); free(car4); free(car5); free(factory); return 0; }\",\"在上述示例中，我们定义了汽车颜色和品牌的枚举类型，以及汽车结构体。然后，我们实现了享元工厂，用于创建和管理汽车享元对象。在getCar方法中，我们首先检查工厂中是否已经存在具有相同颜色和品牌的汽车享元对象，如果存在则直接返回该对象，否则创建一个新的汽车享元对象并添加到工厂中。最后，我们在main函数中创建了一个享元工厂，并通过getCar方法获取了多个汽车享元对象，并打印了它们的信息。\",\"四、优点\",\"减少内存占用：通过共享相同的状态，减少了内存的占用。\",\"提高性能：避免了重复创建相同的对象，提高了程序的性能。\",\"增强代码的可维护性：将对象的状态分离出来，使得代码更加清晰易读，易于维护。\",\"五、缺点\",\"增加了系统的复杂性：需要额外的代码来管理享元对象，增加了系统的复杂性。\",\"可能会导致外部状态的问题：如果享元对象需要依赖外部状态，可能会导致一些问题，例如线程安全问题。\",\"不适合用于频繁变化的对象：如果对象的状态经常变化，那么使用享元模式可能会导致性能下降。\",\"六、适用场景\",\"系统中存在大量相似的对象：如果系统中存在大量相似的对象，例如文本编辑器中的字符、图形编辑器中的图形等，那么使用享元模式可以减少内存的占用，提高程序的性能。\",\"对象的状态可以共享：如果对象的状态可以共享，例如汽车的颜色、品牌等，那么使用享元模式可以减少内存的占用，提高程序的性能。\",\"需要提高系统的性能：如果系统的性能是一个关键因素，那么使用享元模式可以提高程序的性能。\",\"七、总结\",\"享元模式是一种通过共享对象来减少内存占用和提高性能的设计模式。它适用于系统中存在大量相似对象且对象的状态可以共享的场景。通过使用享元模式，可以将对象的状态分离出来，使得代码更加清晰易读，易于维护。但是，享元模式也有一些缺点，例如增加了系统的复杂性、可能会导致外部状态的问题以及不适合用于频繁变化的对象等。因此，在使用享元模式时，需要根据具体情况进行权衡和选择。\"]},\"36\":{\"h\":\"代理模式\",\"t\":[\"一、定义\",\"代理模式是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。\",\"二、结构\",\"服务接口（Service Interface）：声明了服务接口。代理必须遵循该接口才能伪装成服务对象。\",\"服务（Service）：类提供了一些实用的业务逻辑。\",\"代理（Proxy）：包含一个指向服务对象的引用成员变量。代理完成其任务（例如延迟初始化、记录日志、访问控制和缓存等）后会将请求传递给服务对象。通常情况下，代理会对其服务对象的整个生命周期进行管理。\",\"客户端（Client）：能通过同一接口与服务或代理进行交互，所以你可在一切需要服务对象的代码中使用代理。\",\"三、示例代码（用 C 语言汽车举例）\",\"#include <stdio.h> // 服务接口 typedef struct { void (*drive)(void); } Car; // 服务实现 typedef struct { Car car; } RealCar; void realCarDrive(void) { printf(\\\"Real Car is driving...\\\\\\\\n\\\"); } // 代理 typedef struct { RealCar *realCar; } CarProxy; void carProxyDrive(void) { printf(\\\"Car Proxy is checking...\\\\\\\\n\\\"); if (carProxy->realCar!= NULL) { carProxy->realCar->drive(); } else { printf(\\\"Real Car is not available.\\\\\\\\n\\\"); } } // 客户端 int main() { // 创建代理对象 CarProxy carProxy = {NULL}; // 模拟请求 carProxyDrive(&carProxy); // 创建真实汽车对象 RealCar realCar = {(Car){realCarDrive}}; // 将真实汽车对象与代理关联 carProxy.realCar = &realCar; // 再次模拟请求 carProxyDrive(&carProxy); return 0; }\",\"在上述示例中，我们定义了一个Car接口，其中包含一个drive方法。RealCar结构体实现了Car接口，代表真实的汽车。CarProxy结构体是Car接口的代理，它包含一个指向RealCar对象的指针。\",\"在main函数中，我们首先创建了一个CarProxy对象。然后，我们模拟了一个请求，此时代理会检查真实汽车是否可用。由于我们还没有创建真实汽车对象，所以代理会输出“Real Car is not available.”。\",\"接下来，我们创建了一个RealCar对象，并将其与代理关联。最后，我们再次模拟请求，此时代理会将请求转发给真实汽车对象，输出“Real Car is driving...”。\",\"四、优点\",\"控制请求访问：代理可以控制对真实对象的访问，例如检查权限、缓存结果等。\",\"延迟初始化：代理可以延迟创建真实对象，直到真正需要时才进行创建，从而提高性能。\",\"保护真实对象：代理可以保护真实对象，避免其直接暴露在客户端代码中，从而提高安全性。\",\"实现远程访问：代理可以实现远程访问，例如通过网络连接访问远程对象。\",\"五、缺点\",\"增加系统复杂度：代理模式需要引入额外的代理对象，增加了系统的复杂度。\",\"可能会降低性能：代理模式可能会降低系统的性能，因为代理对象需要进行额外的处理。\",\"可能会导致代码冗余：代理模式可能会导致代码冗余，因为代理对象需要实现与真实对象相同的接口。\",\"六、适用场景\",\"远程代理：适用于需要访问远程对象的场景，例如通过网络连接访问远程服务器上的对象。\",\"虚拟代理：适用于需要延迟初始化的场景，例如创建一个大型对象时，可以先创建一个虚拟代理，等到真正需要时再创建真实对象。\",\"保护代理：适用于需要保护真实对象的场景，例如限制对真实对象的访问权限。\",\"智能引用：适用于需要在没有客户端使用某个重量级对象时立即销毁该对象的场景。\",\"七、总结\",\"代理模式是一种非常有用的设计模式，它可以控制对真实对象的访问，延迟初始化，保护真实对象，实现远程访问等。但是，代理模式也有一些缺点，例如增加系统复杂度，可能会降低性能，可能会导致代码冗余等。因此，在使用代理模式时，需要根据具体情况进行权衡，选择合适的代理模式。\"]},\"37\":{\"h\":\"\"},\"38\":{\"h\":\"责任链模式（Chain of Responsibility Pattern）\",\"t\":[\"定义\",\"责任链模式是一种行为设计模式，它允许多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。\",\"结构\",\"责任链模式主要包括以下几个部分：\",\"抽象处理者（Handler）：定义处理请求的接口，并包含对下一个处理者的引用。\",\"具体处理者（ConcreteHandler）：实现处理请求的具体处理者，处理它所负责的请求，如果不能处理则将请求传递给下一个处理者。\",\"客户端（Client）：向链上的具体处理者对象提交请求。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，模拟不同的汽车零部件（如引擎、车轮、制动系统）检查的责任链。我们使用责任链模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 抽象处理者：汽车检查器 typedef struct CarInspector { struct CarInspector* nextInspector; void (*inspect)(struct CarInspector*, const char*); } CarInspector; // 设置下一个检查者 void setNextInspector(CarInspector* currentInspector, CarInspector* nextInspector) { currentInspector->nextInspector = nextInspector; } // 引擎检查器 typedef struct EngineInspector { CarInspector base; } EngineInspector; void inspectEngine(CarInspector* inspector, const char* component) { if (strcmp(component, \\\"Engine\\\") == 0) { printf(\\\"Inspecting the engine.\\\\\\\\n\\\"); } else if (inspector->nextInspector != NULL) { inspector->nextInspector->inspect(inspector->nextInspector, component); } else { printf(\\\"No inspector available for component: %s\\\\\\\\n\\\", component); } } EngineInspector* createEngineInspector() { EngineInspector* engineInspector = (EngineInspector*)malloc(sizeof(EngineInspector)); engineInspector->base.nextInspector = NULL; engineInspector->base.inspect = inspectEngine; return engineInspector; } // 车轮检查器 typedef struct WheelInspector { CarInspector base; } WheelInspector; void inspectWheel(CarInspector* inspector, const char* component) { if (strcmp(component, \\\"Wheel\\\") == 0) { printf(\\\"Inspecting the wheel.\\\\\\\\n\\\"); } else if (inspector->nextInspector != NULL) { inspector->nextInspector->inspect(inspector->nextInspector, component); } else { printf(\\\"No inspector available for component: %s\\\\\\\\n\\\", component); } } WheelInspector* createWheelInspector() { WheelInspector* wheelInspector = (WheelInspector*)malloc(sizeof(WheelInspector)); wheelInspector->base.nextInspector = NULL; wheelInspector->base.inspect = inspectWheel; return wheelInspector; } // 制动系统检查器 typedef struct BrakeInspector { CarInspector base; } BrakeInspector; void inspectBrake(CarInspector* inspector, const char* component) { if (strcmp(component, \\\"Brake\\\") == 0) { printf(\\\"Inspecting the brake system.\\\\\\\\n\\\"); } else if (inspector->nextInspector != NULL) { inspector->nextInspector->inspect(inspector->nextInspector, component); } else { printf(\\\"No inspector available for component: %s\\\\\\\\n\\\", component); } } BrakeInspector* createBrakeInspector() { BrakeInspector* brakeInspector = (BrakeInspector*)malloc(sizeof(BrakeInspector)); brakeInspector->base.nextInspector = NULL; brakeInspector->base.inspect = inspectBrake; return brakeInspector; } // 客户端代码 int main() { // 创建具体的检查者对象 EngineInspector* engineInspector = createEngineInspector(); WheelInspector* wheelInspector = createWheelInspector(); BrakeInspector* brakeInspector = createBrakeInspector(); // 设置责任链 setNextInspector((CarInspector*)engineInspector, (CarInspector*)wheelInspector); setNextInspector((CarInspector*)wheelInspector, (CarInspector*)brakeInspector); // 测试责任链 printf(\\\"Testing engine inspection:\\\\\\\\n\\\"); engineInspector->base.inspect((CarInspector*)engineInspector, \\\"Engine\\\"); printf(\\\"\\\\\\\\nTesting wheel inspection:\\\\\\\\n\\\"); engineInspector->base.inspect((CarInspector*)engineInspector, \\\"Wheel\\\"); printf(\\\"\\\\\\\\nTesting brake inspection:\\\\\\\\n\\\"); engineInspector->base.inspect((CarInspector*)engineInspector, \\\"Brake\\\"); printf(\\\"\\\\\\\\nTesting unknown component inspection:\\\\\\\\n\\\"); engineInspector->base.inspect((CarInspector*)engineInspector, \\\"Door\\\"); // 清理内存 free(engineInspector); free(wheelInspector); free(brakeInspector); return 0; }\",\"主要结构说明\",\"抽象处理者（CarInspector）：定义了处理请求的接口inspect，并包含对下一个处理者的引用nextInspector。\",\"具体处理者（EngineInspector、WheelInspector、BrakeInspector）：实现了处理请求的方法inspect，并在处理不了请求时将其传递给下一个处理者。\",\"客户端（main函数）：创建具体处理者对象，设置责任链，并提交请求进行测试。\",\"优点\",\"降低耦合度：将请求的发送者和接收者解耦，使得多个处理者有机会处理该请求。\",\"提高灵活性：可以动态地添加或删除责任链中的处理者，增加了系统的灵活性。\",\"增强可扩展性：新的处理者可以很方便地加入到责任链中。\",\"缺点\",\"调试困难：由于请求是在责任链中传递的，可能会导致调试和跟踪较为困难。\",\"性能问题：如果责任链过长，可能会导致性能问题，因为请求要经过多个处理者。\",\"适用场景\",\"多个对象可以处理同一请求：但是具体由哪个对象处理请求在运行时动态决定。\",\"需要动态指定处理请求的对象：并且可以灵活地改变处理者的顺序。\",\"总结\",\"责任链模式通过将请求沿着处理者链传递，使得多个处理者都有机会处理请求，降低了发送者和接收者的耦合度。在汽车应用中，责任链模式可以用于不同的汽车零部件检查，展示了责任链模式如何在实际项目中使用。\",\"命令模式\"]},\"39\":{\"h\":\"命令模式（Command Pattern）\",\"t\":[\"定义\",\"命令模式是一种行为型设计模式，它将请求封装成对象，从而使你可以用不同的请求对客户进行参数化，并且支持请求的排队、记录日志以及撤销操作。\",\"结构\",\"命令模式主要包括以下几个部分：\",\"命令接口（Command）：定义执行命令的接口。\",\"具体命令（ConcreteCommand）：实现命令接口，绑定接收者对象，调用接收者的相应操作。\",\"接收者（Receiver）：执行具体操作的类。\",\"调用者（Invoker）：持有命令对象并通过命令对象来执行请求。\",\"客户端（Client）：创建具体命令对象并设置其接收者。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，不同的命令可以控制汽车的操作（如启动发动机、停止发动机、加速等）。我们使用命令模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 定义命令接口 typedef struct Command { void (*execute)(struct Command*); void (*undo)(struct Command*); } Command; // 定义接收者：汽车 typedef struct Car { char* model; } Car; void startEngine(Car* car) { printf(\\\"Engine of %s is starting.\\\\\\\\n\\\", car->model); } void stopEngine(Car* car) { printf(\\\"Engine of %s is stopping.\\\\\\\\n\\\", car->model); } void accelerate(Car* car) { printf(\\\"Car %s is accelerating.\\\\\\\\n\\\", car->model); } // 定义具体命令：启动引擎命令 typedef struct StartEngineCommand { Command command; Car* car; } StartEngineCommand; void executeStartEngine(Command* command) { StartEngineCommand* startCommand = (StartEngineCommand*)command; startEngine(startCommand->car); } void undoStartEngine(Command* command) { StartEngineCommand* startCommand = (StartEngineCommand*)command; stopEngine(startCommand->car); } StartEngineCommand* createStartEngineCommand(Car* car) { StartEngineCommand* command = (StartEngineCommand*)malloc(sizeof(StartEngineCommand)); command->car = car; command->command.execute = executeStartEngine; command->command.undo = undoStartEngine; return command; } // 定义具体命令：停止引擎命令 typedef struct StopEngineCommand { Command command; Car* car; } StopEngineCommand; void executeStopEngine(Command* command) { StopEngineCommand* stopCommand = (StopEngineCommand*)command; stopEngine(stopCommand->car); } void undoStopEngine(Command* command) { StopEngineCommand* stopCommand = (StopEngineCommand*)command; startEngine(stopCommand->car); } StopEngineCommand* createStopEngineCommand(Car* car) { StopEngineCommand* command = (StopEngineCommand*)malloc(sizeof(StopEngineCommand)); command->car = car; command->command.execute = executeStopEngine; command->command.undo = undoStopEngine; return command; } // 定义调用者 typedef struct Invoker { Command* command; } Invoker; void setCommand(Invoker* invoker, Command* command) { invoker->command = command; } void executeCommand(Invoker* invoker) { if (invoker->command != NULL) { invoker->command->execute(invoker->command); } } void undoCommand(Invoker* invoker) { if (invoker->command != NULL) { invoker->command->undo(invoker->command); } } // 测试命令模式 int main() { // 创建接收者对象：汽车 Car car = { .model = \\\"Toyota Camry\\\" }; // 创建具体命令对象 StartEngineCommand* startCommand = createStartEngineCommand(&car); StopEngineCommand* stopCommand = createStopEngineCommand(&car); // 创建调用者对象 Invoker invoker = { .command = NULL }; // 客户端设置并执行命令 setCommand(&invoker, (Command*)startCommand); executeCommand(&invoker); // 撤销命令 undoCommand(&invoker); // 设置并执行停止引擎命令 setCommand(&invoker, (Command*)stopCommand); executeCommand(&invoker); // 撤销停止引擎命令 undoCommand(&invoker); // 清理内存 free(startCommand); free(stopCommand); return 0; }\",\"主要结构说明\",\"命令接口（Command）：定义了执行命令和撤销命令的接口。\",\"具体命令（ConcreteCommand）：实现了命令接口，将请求委托给接收者执行。例子中包括启动引擎命令和停止引擎命令。\",\"接收者（Receiver）：执行实际操作的对象，例子中为Car。\",\"调用者（Invoker）：持有命令对象并通过命令对象来执行请求。例子中Invoker负责调用命令的执行和撤销操作。\",\"客户端（Client）：创建具体命令对象并设置其接收者，例子中为main函数。\",\"优点\",\"解耦请求发送者和接收者：命令模式将请求封装成对象，使请求的发送者与接收者解耦。\",\"支持撤销和重做：命令对象可以实现撤销和重做操作。\",\"命令的组合：可以将多个命令组合成一个复合命令，从而支持宏命令。\",\"扩展性强：可以很容易地增加新的命令。\",\"缺点\",\"类数量增加：每个具体命令都需要一个对应的类，可能会导致类数量大幅增加。\",\"增加系统复杂性：引入了许多新类和对象，增加了系统的复杂性。\",\"适用场景\",\"需要对请求排队和记录日志：命令对象可以支持请求的排队、记录日志和事务操作。\",\"需要支持撤销和重做操作：命令模式可以很方便地实现操作的撤销和重做功能。\",\"请求的发送者和接收者需要解耦：通过命令对象来解耦请求的发送者和接收者。\",\"总结\",\"命令模式通过将请求封装成对象，实现了请求发送者与接收者的解耦，并支持请求的撤销和重做操作。它适用于需要对请求进行排队、记录日志以及支持撤销和重做操作的场景。在汽车应用中，命令模式可以用于控制汽车的各种操作，如启动引擎、停止引擎等。\",\"迭代器模式\"]},\"40\":{\"h\":\"迭代器模式（Iterator Pattern）\",\"t\":[\"定义\",\"迭代器模式是一种行为型设计模式，它提供一种方法顺序访问一个聚合对象中的各个元素，而不暴露该对象的内部表示。迭代器模式将遍历聚合对象的责任从聚合对象本身转移到了迭代器对象。\",\"结构\",\"迭代器模式主要包括以下几个部分：\",\"迭代器接口（Iterator）：定义访问和遍历元素的接口。\",\"具体迭代器（ConcreteIterator）：实现迭代器接口，并负责遍历聚合对象中的元素。\",\"聚合接口（Aggregate）：定义创建迭代器对象的接口。\",\"具体聚合（ConcreteAggregate）：实现聚合接口，并提供一个方法来返回具体迭代器的实例。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，管理一系列的汽车对象。我们使用迭代器模式来遍历这些汽车对象。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 汽车结构体 typedef struct { char* model; int year; } Car; // 迭代器接口 typedef struct Iterator { void (*first)(struct Iterator*); void (*next)(struct Iterator*); int (*isDone)(struct Iterator*); Car* (*currentItem)(struct Iterator*); void* aggregate; int currentIndex; } Iterator; // 汽车集合结构体 typedef struct { Car** cars; int size; int capacity; } CarCollection; // 创建汽车集合 CarCollection* createCarCollection(int capacity) { CarCollection* collection = (CarCollection*)malloc(sizeof(CarCollection)); collection->cars = (Car**)malloc(sizeof(Car*) * capacity); collection->size = 0; collection->capacity = capacity; return collection; } // 向汽车集合中添加汽车 void addCar(CarCollection* collection, Car* car) { if (collection->size < collection->capacity) { collection->cars[collection->size++] = car; } } // 迭代器方法实现 void first(Iterator* iterator) { iterator->currentIndex = 0; } void next(Iterator* iterator) { iterator->currentIndex++; } int isDone(Iterator* iterator) { CarCollection* collection = (CarCollection*)iterator->aggregate; return iterator->currentIndex >= collection->size; } Car* currentItem(Iterator* iterator) { CarCollection* collection = (CarCollection*)iterator->aggregate; if (iterator->currentIndex < collection->size) { return collection->cars[iterator->currentIndex]; } return NULL; } // 创建汽车集合的迭代器 Iterator* createIterator(CarCollection* collection) { Iterator* iterator = (Iterator*)malloc(sizeof(Iterator)); iterator->first = first; iterator->next = next; iterator->isDone = isDone; iterator->currentItem = currentItem; iterator->aggregate = collection; iterator->currentIndex = 0; return iterator; } // 测试迭代器模式 int main() { // 创建汽车集合 CarCollection* collection = createCarCollection(3); // 创建汽车对象 Car* car1 = (Car*)malloc(sizeof(Car)); car1->model = \\\"Toyota Camry\\\"; car1->year = 2023; Car* car2 = (Car*)malloc(sizeof(Car)); car2->model = \\\"Honda Accord\\\"; car2->year = 2022; Car* car3 = (Car*)malloc(sizeof(Car)); car3->model = \\\"Tesla Model 3\\\"; car3->year = 2024; // 将汽车对象添加到集合中 addCar(collection, car1); addCar(collection, car2); addCar(collection, car3); // 创建迭代器 Iterator* iterator = createIterator(collection); // 使用迭代器遍历汽车集合 for (iterator->first(iterator); !iterator->isDone(iterator); iterator->next(iterator)) { Car* car = iterator->currentItem(iterator); if (car != NULL) { printf(\\\"Car Model: %s, Year: %d\\\\\\\\n\\\", car->model, car->year); } } // 清理内存 free(car1); free(car2); free(car3); free(collection->cars); free(collection); free(iterator); return 0; }\",\"主要结构说明\",\"迭代器接口（Iterator）：定义了遍历方法 first、next、isDone 和 currentItem。还包含一个指向聚合对象的指针 aggregate 和当前索引 currentIndex。\",\"具体迭代器（ConcreteIterator）：实现了迭代器接口的方法，用于遍历 CarCollection。\",\"聚合接口（Aggregate）：本例中隐含在 CarCollection 中，没有显式定义。\",\"具体聚合（ConcreteAggregate）：实现了 CarCollection，包含汽车对象的集合。\",\"优点\",\"分离遍历算法：将遍历算法与集合对象分离，使得算法可以独立于集合对象变化。\",\"统一接口：通过定义统一的遍历接口，使得不同的集合对象可以使用相同的遍历方法。\",\"支持多种遍历方式：可以根据需要实现不同的迭代器，支持不同的遍历方式。\",\"缺点\",\"额外的开销：由于引入了迭代器对象，可能会增加额外的开销。\",\"复杂性增加：增加了类的数量，可能会使系统变得复杂。\",\"适用场景\",\"需要遍历不同类型的集合对象：并且希望使用统一的遍历接口。\",\"需要支持多种遍历方式：如前序遍历、后序遍历、中序遍历等。\",\"希望分离遍历算法和集合对象：使得两者可以独立变化。\",\"总结\",\"迭代器模式通过定义统一的遍历接口，使得不同的集合对象可以使用相同的遍历方法。它适用于需要遍历不同类型的集合对象，并希望支持多种遍历方式的场景。在汽车应用中，迭代器模式可以用于遍历汽车集合对象，展示了迭代器模式如何在实际项目中使用。\"]},\"41\":{\"h\":\"中介者模式（Mediator Pattern）\",\"t\":[\"定义\",\"中介者模式是一种行为型设计模式，它通过引入一个中介对象来封装一系列对象之间的交互，使各个对象不需要显式地相互引用，从而实现松散耦合，并且可以独立地改变它们之间的交互。\",\"结构\",\"中介者模式主要包括以下几个部分：\",\"中介者接口（Mediator）：定义一个接口用于与各同事对象之间的通信。\",\"具体中介者（ConcreteMediator）：实现中介者接口，协调各同事对象之间的交互。\",\"同事类（Colleague）：各同事类只知道中介者，而不知道其他同事类。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，其中包括不同的汽车部件（如引擎、变速箱）相互通信。我们使用中介者模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 定义中介者接口 typedef struct Mediator { void (*notify)(struct Mediator*, const char* event); } Mediator; // 定义同事类接口 typedef struct Colleague { Mediator* mediator; } Colleague; // 定义具体同事类：引擎 typedef struct Engine { Colleague colleague; void (*startEngine)(struct Engine*); } Engine; void startEngine(Engine* engine) { printf(\\\"Engine started.\\\\\\\\n\\\"); engine->colleague.mediator->notify(engine->colleague.mediator, \\\"EngineStarted\\\"); } Engine* createEngine(Mediator* mediator) { Engine* engine = (Engine*)malloc(sizeof(Engine)); engine->colleague.mediator = mediator; engine->startEngine = startEngine; return engine; } // 定义具体同事类：变速箱 typedef struct Transmission { Colleague colleague; void (*shiftGear)(struct Transmission*); } Transmission; void shiftGear(Transmission* transmission) { printf(\\\"Transmission shifting gear.\\\\\\\\n\\\"); transmission->colleague.mediator->notify(transmission->colleague.mediator, \\\"GearShifted\\\"); } Transmission* createTransmission(Mediator* mediator) { Transmission* transmission = (Transmission*)malloc(sizeof(Transmission)); transmission->colleague.mediator = mediator; transmission->shiftGear = shiftGear; return transmission; } // 定义具体中介者 typedef struct CarMediator { Mediator mediator; Engine* engine; Transmission* transmission; } CarMediator; void notify(Mediator* mediator, const char* event) { CarMediator* carMediator = (CarMediator*)mediator; if (strcmp(event, \\\"EngineStarted\\\") == 0) { printf(\\\"Mediator: Engine has started, now shifting gear.\\\\\\\\n\\\"); carMediator->transmission->shiftGear(carMediator->transmission); } else if (strcmp(event, \\\"GearShifted\\\") == 0) { printf(\\\"Mediator: Gear has been shifted.\\\\\\\\n\\\"); } } CarMediator* createCarMediator() { CarMediator* mediator = (CarMediator*)malloc(sizeof(CarMediator)); mediator->mediator.notify = notify; mediator->engine = NULL; mediator->transmission = NULL; return mediator; } // 测试中介者模式 int main() { // 创建中介者 CarMediator* carMediator = createCarMediator(); // 创建同事类对象并设置中介者 Engine* engine = createEngine((Mediator*)carMediator); Transmission* transmission = createTransmission((Mediator*)carMediator); // 设置中介者的同事类 carMediator->engine = engine; carMediator->transmission = transmission; // 启动引擎 engine->startEngine(engine); // 清理内存 free(engine); free(transmission); free(carMediator); return 0; }\",\"主要结构说明\",\"中介者接口（Mediator）：定义了一个通知方法 notify，用于同事类之间的通信。\",\"具体中介者（ConcreteMediator）：实现了中介者接口，协调同事类之间的交互。在本例中是 CarMediator。\",\"同事类（Colleague）：包括引擎（Engine）和变速箱（Transmission），它们通过中介者进行通信。\",\"优点\",\"降低耦合：中介者模式通过引入一个中介对象，使各同事类不需要显式地相互引用，降低了对象之间的耦合度。\",\"简化对象交互：中介者封装了对象之间的交互逻辑，使得系统更容易理解和维护。\",\"集中控制：中介者模式将交互逻辑集中到中介者中，使得修改和扩展交互行为更加方便。\",\"缺点\",\"中介者复杂性：随着同事类的增加，中介者的复杂性也会增加，可能会变得难以维护。\",\"性能问题：中介者模式引入了额外的中介对象，可能会对系统性能产生一定的影响。\",\"适用场景\",\"对象之间存在复杂的引用关系：需要通过一个中介对象来管理这些关系。\",\"需要解耦多个对象之间的交互：避免对象之间的直接依赖。\",\"希望集中控制交互逻辑：使得系统更易于理解和维护。\",\"总结\",\"中介者模式通过引入一个中介对象，使各同事类不需要显式地相互引用，降低了对象之间的耦合度，并简化了对象之间的交互。在汽车应用中，中介者模式可以用于协调汽车部件（如引擎、变速箱）之间的交互，展示了中介者模式如何在实际项目中使用。\"]},\"42\":{\"h\":\"备忘录模式（Memento Pattern）\",\"t\":[\"定义\",\"备忘录模式是一种行为型设计模式，它允许在不破坏封装的前提下，捕获和恢复对象的内部状态。备忘录模式将对象的状态保存到一个备忘录对象中，以便以后恢复到之前的状态。\",\"结构\",\"备忘录模式主要包括以下几个部分：\",\"发起人（Originator）：创建一个包含其当前内部状态的备忘录对象，并使用备忘录对象恢复其内部状态。\",\"备忘录（Memento）：存储发起人的内部状态，并防止其他对象访问备忘录。备忘录一般是不可变的。\",\"负责人（Caretaker）：负责保存和恢复备忘录，但不能操作或检查备忘录的内容。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，汽车的状态（如速度、燃油量）可以保存和恢复。我们使用备忘录模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 定义汽车状态结构体 typedef struct { int speed; int fuel; } CarState; // 定义备忘录结构体 typedef struct { CarState state; } Memento; // 定义汽车结构体 typedef struct { int speed; int fuel; } Car; // 创建备忘录 Memento* createMemento(Car* car) { Memento* memento = (Memento*)malloc(sizeof(Memento)); memento->state.speed = car->speed; memento->state.fuel = car->fuel; return memento; } // 从备忘录恢复状态 void restoreFromMemento(Car* car, Memento* memento) { car->speed = memento->state.speed; car->fuel = memento->state.fuel; } // 打印汽车状态 void printCarState(Car* car) { printf(\\\"Car state - Speed: %d, Fuel: %d\\\\\\\\n\\\", car->speed, car->fuel); } // 测试备忘录模式 int main() { // 创建汽车对象 Car* car = (Car*)malloc(sizeof(Car)); car->speed = 100; car->fuel = 50; // 打印初始状态 printCarState(car); // 创建备忘录并保存当前状态 Memento* memento = createMemento(car); // 改变汽车状态 car->speed = 150; car->fuel = 20; printCarState(car); // 从备忘录恢复状态 restoreFromMemento(car, memento); printCarState(car); // 清理内存 free(memento); free(car); return 0; }\",\"主要结构说明\",\"发起人（Originator）：Car 结构体，包括汽车的状态（速度和燃油量），并包含创建备忘录和从备忘录恢复状态的方法。\",\"备忘录（Memento）：Memento 结构体，存储汽车的状态。\",\"负责人（Caretaker）：本例中由 main 函数充当，负责保存和恢复备忘录。\",\"优点\",\"封装性：备忘录模式通过封装对象的状态，保持了对象的封装性，不会暴露对象的内部细节。\",\"简化状态管理：通过备忘录，可以方便地保存和恢复对象的状态，简化了状态管理。\",\"支持撤销操作：备忘录模式可以用于实现撤销操作，方便恢复到之前的状态。\",\"缺点\",\"内存消耗：如果对象的状态非常复杂，保存多个备忘录会占用较多内存。\",\"性能开销：创建和恢复备忘录需要额外的计算开销，可能会影响性能。\",\"实现复杂性：在某些情况下，实现备忘录模式可能会比较复杂，特别是涉及到对象的深拷贝。\",\"适用场景\",\"需要保存和恢复对象的状态：适用于需要频繁保存和恢复对象状态的场景，如撤销操作、历史记录等。\",\"需要避免暴露对象的内部状态：通过备忘录模式，可以保持对象的封装性，避免暴露内部细节。\",\"需要支持撤销操作：备忘录模式可以方便地实现撤销操作，恢复到之前的状态。\",\"总结\",\"备忘录模式通过封装对象的状态，提供了一种保存和恢复对象状态的方法。它保持了对象的封装性，简化了状态管理，并且可以用于实现撤销操作。在汽车应用中，备忘录模式可以用于保存和恢复汽车的状态，如速度和燃油量，展示了备忘录模式如何在实际项目中使用。\"]},\"43\":{\"h\":\"观察者模式（Observer Pattern）\",\"t\":[\"定义\",\"观察者模式是一种行为型设计模式，它定义了一种一对多的依赖关系，使得当一个对象的状态发生变化时，其相关依赖对象会得到通知并自动更新。这种模式有时也被称为发布-订阅模式。\",\"结构\",\"观察者模式主要包括以下几个部分：\",\"主题（Subject）：维护一个观察者列表，并提供注册、移除和通知观察者的方法。\",\"观察者（Observer）：定义一个更新接口，当主题的状态发生变化时通知观察者。\",\"具体主题（ConcreteSubject）：实现主题接口，维护主题的状态，并在状态改变时通知所有观察者。\",\"具体观察者（ConcreteObserver）：实现观察者接口，定义在接收到通知时的行为。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，当汽车的状态（如速度、燃油量）发生变化时，通知相关的监控系统（如仪表盘、导航系统）。我们使用观察者模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> #define MAX_OBSERVERS 10 // 定义观察者接口 typedef struct Observer { void (*update)(struct Observer*, int, int); } Observer; // 定义主题接口 typedef struct Subject { void (*registerObserver)(struct Subject*, Observer*); void (*removeObserver)(struct Subject*, Observer*); void (*notifyObservers)(struct Subject*); Observer* observers[MAX_OBSERVERS]; int observerCount; int speed; int fuel; } Subject; // 具体观察者：仪表盘 typedef struct { Observer observer; void (*update)(struct Observer*, int, int); } Dashboard; void updateDashboard(Observer* observer, int speed, int fuel) { printf(\\\"Dashboard: Speed = %d, Fuel = %d\\\\\\\\n\\\", speed, fuel); } Dashboard* createDashboard() { Dashboard* dashboard = (Dashboard*)malloc(sizeof(Dashboard)); dashboard->observer.update = updateDashboard; return dashboard; } // 具体观察者：导航系统 typedef struct { Observer observer; void (*update)(struct Observer*, int, int); } Navigation; void updateNavigation(Observer* observer, int speed, int fuel) { printf(\\\"Navigation: Speed = %d, Fuel = %d\\\\\\\\n\\\", speed, fuel); } Navigation* createNavigation() { Navigation* navigation = (Navigation*)malloc(sizeof(Navigation)); navigation->observer.update = updateNavigation; return navigation; } // 具体主题：汽车 typedef struct { Subject subject; } Car; void registerObserver(Subject* subject, Observer* observer) { if (subject->observerCount < MAX_OBSERVERS) { subject->observers[subject->observerCount++] = observer; } } void removeObserver(Subject* subject, Observer* observer) { for (int i = 0; i < subject->observerCount; i++) { if (subject->observers[i] == observer) { for (int j = i; j < subject->observerCount - 1; j++) { subject->observers[j] = subject->observers[j + 1]; } subject->observerCount--; break; } } } void notifyObservers(Subject* subject) { for (int i = 0; i < subject->observerCount; i++) { subject->observers[i]->update(subject->observers[i], subject->speed, subject->fuel); } } Car* createCar() { Car* car = (Car*)malloc(sizeof(Car)); car->subject.registerObserver = registerObserver; car->subject.removeObserver = removeObserver; car->subject.notifyObservers = notifyObservers; car->subject.observerCount = 0; car->subject.speed = 0; car->subject.fuel = 0; return car; } void setCarState(Car* car, int speed, int fuel) { car->subject.speed = speed; car->subject.fuel = fuel; car->subject.notifyObservers((Subject*)car); } // 测试观察者模式 int main() { // 创建汽车对象 Car* car = createCar(); // 创建观察者对象 Dashboard* dashboard = createDashboard(); Navigation* navigation = createNavigation(); // 注册观察者 car->subject.registerObserver((Subject*)car, (Observer*)dashboard); car->subject.registerObserver((Subject*)car, (Observer*)navigation); // 改变汽车状态，通知观察者 setCarState(car, 100, 50); setCarState(car, 150, 20); // 移除一个观察者 car->subject.removeObserver((Subject*)car, (Observer*)dashboard); // 再次改变汽车状态，通知剩余观察者 setCarState(car, 200, 10); // 清理内存 free(dashboard); free(navigation); free(car); return 0; }\",\"主要结构说明\",\"主题接口（Subject）：定义了注册、移除和通知观察者的方法。\",\"观察者接口（Observer）：定义了更新方法 update，当主题的状态发生变化时调用。\",\"具体主题（ConcreteSubject）：Car 结构体，实现了主题接口，并维护主题的状态（速度和燃油量）。\",\"具体观察者（ConcreteObserver）：Dashboard 和 Navigation 结构体，实现了观察者接口，定义了在接收到通知时的行为。\",\"优点\",\"解耦：观察者模式使得主题和观察者之间的依赖关系减少，从而实现低耦合。\",\"易于扩展：可以方便地增加或删除观察者，符合开放-关闭原则。\",\"广播通信：主题可以向所有注册的观察者广播更新通知，简化了消息的传递。\",\"缺点\",\"通知延迟：如果观察者较多，或者通知的频率较高，可能会导致通知延迟。\",\"复杂性增加：如果观察者和主题之间的依赖关系过于复杂，可能会增加系统的复杂性和维护成本。\",\"无序更新：观察者接收通知的顺序可能是不确定的，如果顺序很重要，需要额外处理。\",\"适用场景\",\"状态变化通知：需要在一个对象状态发生变化时通知其他对象。\",\"多级联动更新：一个对象的更新需要触发其他对象的更新，如图形界面中的数据绑定。\",\"事件处理系统：用于实现事件处理和广播机制，如订阅-发布系统。\",\"总结\",\"观察者模式通过定义一对多的依赖关系，使得主题和观察者之间的交互更加灵活和松散耦合。在汽车应用中，观察者模式可以用于监控汽车状态的变化，并通知相关的监控系统，如仪表盘和导航系统，展示了观察者模式如何在实际项目中使用。\"]},\"44\":{\"h\":\"状态模式（State Pattern）\",\"t\":[\"定义\",\"状态模式是一种行为型设计模式，它允许对象在其内部状态改变时改变其行为。状态模式将状态的相关行为封装到独立的状态类中，使得状态切换更加明确和可管理。\",\"结构\",\"状态模式主要包括以下几个部分：\",\"状态接口（State）：定义一个接口，封装与上下文的一个特定状态相关的行为。\",\"具体状态（ConcreteState）：实现状态接口的具体状态类，每一个类实现一个与上下文的一个状态相关的行为。\",\"上下文（Context）：维护一个当前状态，并且可以切换状态。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，汽车有不同的状态（如启动、行驶、停止）。我们使用状态模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> // 定义状态接口 typedef struct Car Car; // 前向声明 typedef struct State { void (*start)(Car*); void (*drive)(Car*); void (*stop)(Car*); } State; // 定义汽车结构体 struct Car { State* currentState; }; // 启动状态 typedef struct { State state; } StartState; void startStateStart(Car* car); void startStateDrive(Car* car); void startStateStop(Car* car); StartState* createStartState() { StartState* state = (StartState*)malloc(sizeof(StartState)); state->state.start = startStateStart; state->state.drive = startStateDrive; state->state.stop = startStateStop; return state; } void startStateStart(Car* car) { printf(\\\"Car is already started.\\\\\\\\n\\\"); } void startStateDrive(Car* car) { printf(\\\"Car is now driving.\\\\\\\\n\\\"); // 切换到行驶状态 extern State* drivingState; car->currentState = drivingState; } void startStateStop(Car* car) { printf(\\\"Car is stopping from start state.\\\\\\\\n\\\"); // 切换到停止状态 extern State* stoppedState; car->currentState = stoppedState; } // 行驶状态 typedef struct { State state; } DrivingState; void drivingStateStart(Car* car); void drivingStateDrive(Car* car); void drivingStateStop(Car* car); DrivingState* createDrivingState() { DrivingState* state = (DrivingState*)malloc(sizeof(DrivingState)); state->state.start = drivingStateStart; state->state.drive = drivingStateDrive; state->state.stop = drivingStateStop; return state; } void drivingStateStart(Car* car) { printf(\\\"Car is already driving.\\\\\\\\n\\\"); } void drivingStateDrive(Car* car) { printf(\\\"Car is already driving.\\\\\\\\n\\\"); } void drivingStateStop(Car* car) { printf(\\\"Car is stopping from driving state.\\\\\\\\n\\\"); // 切换到停止状态 extern State* stoppedState; car->currentState = stoppedState; } // 停止状态 typedef struct { State state; } StoppedState; void stoppedStateStart(Car* car); void stoppedStateDrive(Car* car); void stoppedStateStop(Car* car); StoppedState* createStoppedState() { StoppedState* state = (StoppedState*)malloc(sizeof(StoppedState)); state->state.start = stoppedStateStart; state->state.drive = stoppedStateDrive; state->state.stop = stoppedStateStop; return state; } void stoppedStateStart(Car* car) { printf(\\\"Car is starting from stop state.\\\\\\\\n\\\"); // 切换到启动状态 extern State* startState; car->currentState = startState; } void stoppedStateDrive(Car* car) { printf(\\\"Car needs to be started first before driving.\\\\\\\\n\\\"); } void stoppedStateStop(Car* car) { printf(\\\"Car is already stopped.\\\\\\\\n\\\"); } // 全局状态实例 State* startState; State* drivingState; State* stoppedState; // 初始化全局状态 void initializeStates() { startState = (State*)createStartState(); drivingState = (State*)createDrivingState(); stoppedState = (State*)createStoppedState(); } // 释放全局状态 void releaseStates() { free(startState); free(drivingState); free(stoppedState); } // 创建汽车 Car* createCar() { Car* car = (Car*)malloc(sizeof(Car)); car->currentState = stoppedState; // 初始状态为停止 return car; } // 测试状态模式 int main() { initializeStates(); Car* car = createCar(); car->currentState->start(car); car->currentState->drive(car); car->currentState->stop(car); car->currentState->drive(car); car->currentState->stop(car); free(car); releaseStates(); return 0; }\",\"主要结构说明\",\"状态接口（State）：定义了汽车的状态接口，包括 start、drive 和 stop 方法。\",\"具体状态（ConcreteState）：包括 StartState、DrivingState 和 StoppedState，分别实现了状态接口的具体行为。\",\"上下文（Context）：Car 结构体，维护当前状态并委托状态处理具体行为。\",\"优点\",\"状态切换清晰：状态模式将状态相关的行为封装在独立的状态类中，使状态切换更加清晰。\",\"易于扩展：可以方便地添加新的状态或修改现有状态，而无需改变上下文的代码。\",\"符合单一职责原则：每个状态类只负责与其状态相关的行为。\",\"缺点\",\"类的数量增加：每个具体状态都需要定义一个类，可能会导致类的数量增加。\",\"状态切换的管理：需要手动管理状态的切换逻辑，可能会增加一定的复杂性。\",\"适用场景\",\"对象的行为依赖于其状态：对象的行为随状态变化而变化。\",\"需要明确状态转换的场景：需要明确地定义对象在不同状态下的行为。\",\"状态切换频繁：对象在运行时需要频繁切换状态。\",\"总结\",\"状态模式通过将状态相关的行为封装到独立的状态类中，使得状态切换更加清晰和可管理。在汽车应用中，状态模式可以用于表示汽车的不同状态（启动、行驶、停止），并根据状态的变化执行相应的行为，展示了状态模式如何在实际项目中使用。\"]},\"45\":{\"h\":\"策略模式（Strategy Pattern）\",\"t\":[\"定义\",\"策略模式是一种行为型设计模式，它定义了一系列算法，并将每一个算法封装起来，使它们可以相互替换，算法的变化不会影响使用算法的客户。策略模式使得算法可以独立于使用它的客户而变化。\",\"结构\",\"策略模式主要包括以下几个部分：\",\"策略接口（Strategy）：定义所有支持的算法的公共接口。\",\"具体策略（ConcreteStrategy）：实现策略接口的具体算法。\",\"上下文（Context）：维护一个策略对象的引用，并且可以动态地更换策略。\",\"示例代码\",\"假设我们要设计一个汽车应用程序，汽车有不同的驾驶模式（如经济模式、运动模式、普通模式）。我们使用策略模式来实现这一点。\",\"#include <stdio.h> #include <stdlib.h> // 定义策略接口 typedef struct Car Car; typedef struct { void (*drive)(Car*); } DriveStrategy; // 定义汽车结构体 struct Car { DriveStrategy* strategy; }; // 具体策略：经济模式 typedef struct { DriveStrategy strategy; } EconomicMode; void driveEconomic(Car* car) { printf(\\\"Driving in economic mode: Saving fuel.\\\\\\\\n\\\"); } EconomicMode* createEconomicMode() { EconomicMode* mode = (EconomicMode*)malloc(sizeof(EconomicMode)); mode->strategy.drive = driveEconomic; return mode; } // 具体策略：运动模式 typedef struct { DriveStrategy strategy; } SportMode; void driveSport(Car* car) { printf(\\\"Driving in sport mode: Enhanced performance.\\\\\\\\n\\\"); } SportMode* createSportMode() { SportMode* mode = (SportMode*)malloc(sizeof(SportMode)); mode->strategy.drive = driveSport; return mode; } // 具体策略：普通模式 typedef struct { DriveStrategy strategy; } NormalMode; void driveNormal(Car* car) { printf(\\\"Driving in normal mode: Balanced performance.\\\\\\\\n\\\"); } NormalMode* createNormalMode() { NormalMode* mode = (NormalMode*)malloc(sizeof(NormalMode)); mode->strategy.drive = driveNormal; return mode; } // 设置策略 void setStrategy(Car* car, DriveStrategy* strategy) { car->strategy = strategy; } // 创建汽车 Car* createCar() { Car* car = (Car*)malloc(sizeof(Car)); car->strategy = NULL; // 初始没有策略 return car; } // 测试策略模式 int main() { Car* car = createCar(); EconomicMode* economicMode = createEconomicMode(); SportMode* sportMode = createSportMode(); NormalMode* normalMode = createNormalMode(); setStrategy(car, (DriveStrategy*)economicMode); car->strategy->drive(car); setStrategy(car, (DriveStrategy*)sportMode); car->strategy->drive(car); setStrategy(car, (DriveStrategy*)normalMode); car->strategy->drive(car); // 清理内存 free(economicMode); free(sportMode); free(normalMode); free(car); return 0; }\",\"主要结构说明\",\"策略接口（Strategy）：定义了 drive 方法，表示不同的驾驶模式。\",\"具体策略（ConcreteStrategy）：包括 EconomicMode、SportMode 和 NormalMode，分别实现了不同的驾驶模式。\",\"上下文（Context）：Car 结构体，维护一个策略对象的引用，并提供设置策略的方法。\",\"优点\",\"算法的封装：策略模式将算法的实现和使用分离，使得算法可以独立于使用它的客户而变化。\",\"易于扩展：可以方便地增加新的策略而无需修改上下文类，符合开放-关闭原则。\",\"动态切换：可以在运行时动态切换策略，提供了更大的灵活性。\",\"缺点\",\"策略数目增加：如果策略过多，会导致类的数量增加，增加系统的复杂性。\",\"上下文需要了解策略：上下文必须知道所有的策略，并根据需要选择合适的策略。\",\"适用场景\",\"需要动态选择算法：在运行时需要根据不同的条件选择不同的算法。\",\"算法多变且易于扩展：算法经常变化并且需要增加新的算法。\",\"避免多重条件语句：使用策略模式可以避免在上下文中使用大量的条件语句来选择算法。\",\"总结\",\"策略模式通过定义一系列算法，并将每一个算法封装起来，使得它们可以相互替换，算法的变化不会影响使用算法的客户。在汽车应用中，策略模式可以用于实现不同的驾驶模式（如经济模式、运动模式、普通模式），展示了策略模式如何在实际项目中使用。\"]},\"46\":{\"h\":\"模板方法模式（Template Method Pattern）\",\"t\":[\"定义\",\"模板方法模式是一种行为型设计模式，定义了一个算法的骨架，将一些步骤延迟到子类中实现。模板方法使得子类可以在不改变算法结构的情况下重新定义算法的某些步骤。\",\"结构\",\"模板方法模式通常由以下几个部分组成：\",\"抽象类（Abstract Class）：定义了算法的骨架，包括一些抽象方法来延迟到子类实现。\",\"具体子类（Concrete Class）：实现抽象类中的抽象方法，完成算法中特定步骤的具体实现。\",\"示例代码\",\"假设我们要设计一个汽车制造的程序，其中有两种具体的汽车制造流程：制造经济型汽车和制造豪华型汽车。这两种汽车制造过程中的某些步骤是相同的，而某些步骤则因车型不同而有所差异。我们可以使用模板方法模式来实现这一设计。\",\"#include <stdio.h> // 抽象类：汽车制造过程 typedef struct { void (*assembleBody)(); void (*installEngine)(); void (*installWheels)(); void (*paint)(); void (*finalize)(); } CarManufacturingProcess; // 具体类：制造经济型汽车 typedef struct { CarManufacturingProcess super; } EconomyCar; void assembleBodyEconomy() { printf(\\\"Assembling body of Economy Car.\\\\\\\\n\\\"); } void installEngineEconomy() { printf(\\\"Installing engine of Economy Car.\\\\\\\\n\\\"); } void installWheelsEconomy() { printf(\\\"Installing wheels of Economy Car.\\\\\\\\n\\\"); } void paintEconomy() { printf(\\\"Painting Economy Car.\\\\\\\\n\\\"); } void finalizeEconomy() { printf(\\\"Economy Car manufacturing finalized.\\\\\\\\n\\\"); } void constructEconomyCar() { EconomyCar economyCar = { .super = { .assembleBody = assembleBodyEconomy, .installEngine = installEngineEconomy, .installWheels = installWheelsEconomy, .paint = paintEconomy, .finalize = finalizeEconomy } }; economyCar.super.assembleBody(); economyCar.super.installEngine(); economyCar.super.installWheels(); economyCar.super.paint(); economyCar.super.finalize(); } // 具体类：制造豪华型汽车 typedef struct { CarManufacturingProcess super; } LuxuryCar; void assembleBodyLuxury() { printf(\\\"Assembling body of Luxury Car.\\\\\\\\n\\\"); } void installEngineLuxury() { printf(\\\"Installing powerful engine of Luxury Car.\\\\\\\\n\\\"); } void installWheelsLuxury() { printf(\\\"Installing large wheels of Luxury Car.\\\\\\\\n\\\"); } void paintLuxury() { printf(\\\"Painting Luxury Car with metallic paint.\\\\\\\\n\\\"); } void finalizeLuxury() { printf(\\\"Luxury Car manufacturing finalized with additional features.\\\\\\\\n\\\"); } void constructLuxuryCar() { LuxuryCar luxuryCar = { .super = { .assembleBody = assembleBodyLuxury, .installEngine = installEngineLuxury, .installWheels = installWheelsLuxury, .paint = paintLuxury, .finalize = finalizeLuxury } }; luxuryCar.super.assembleBody(); luxuryCar.super.installEngine(); luxuryCar.super.installWheels(); luxuryCar.super.paint(); luxuryCar.super.finalize(); } int main() { printf(\\\"Manufacturing Economy Car:\\\\\\\\n\\\"); constructEconomyCar(); printf(\\\"\\\\\\\\n\\\"); printf(\\\"Manufacturing Luxury Car:\\\\\\\\n\\\"); constructLuxuryCar(); return 0; }\",\"主要结构说明\",\"抽象类（CarManufacturingProcess）：定义了汽车制造过程的骨架，包括一系列步骤（方法），其中某些步骤是抽象的，延迟到具体子类实现。\",\"具体类（EconomyCar 和 LuxuryCar）：实现了抽象类中的抽象方法，完成了制造过程中的具体步骤。\",\"优点\",\"代码复用：模板方法将公共的步骤实现在抽象类中，避免了代码重复。\",\"扩展性：子类可以通过覆盖抽象方法来改变算法的某些步骤，同时保持算法的整体结构不变。\",\"控制流程：抽象类中的模板方法定义了算法的框架和步骤顺序，提高了代码的逻辑清晰性和可维护性。\",\"缺点\",\"复杂度增加：可能会导致类的数量增加，特别是有多个变种的算法时。\",\"限制子类的灵活性：模板方法定义了算法的骨架，有时子类想要改变骨架可能比较困难。\",\"适用场景\",\"多个算法有共同的流程：有多个算法，且它们之间有一些共同的步骤。\",\"避免代码重复：需要在多个类中实现相同的代码，但有些步骤因子类而异。\",\"控制子类扩展：框架需要控制子类扩展，以确保它们不改变算法的结构。\",\"总结\",\"模板方法模式通过定义一个算法的骨架，将一些步骤延迟到子类中实现，从而使得不同的子类可以在不改变算法结构的情况下重新定义算法的某些步骤。在汽车制造的示例中，展示了如何通过模板方法模式实现经济型汽车和豪华型汽车的制造过程，突出了模板方法在实际项目中的应用。\"]},\"47\":{\"h\":\"访问者模式（Visitor Pattern）\",\"t\":[\"定义\",\"访问者模式是一种行为型设计模式，它允许你定义一些操作，而无需修改要操作的元素类。通过将操作封装在访问者对象中，可以在不改变各元素类的情况下增加新操作。访问者模式的核心思想是将数据结构与数据操作分离，使得操作可以独立变化而不影响数据结构。\",\"结构\",\"访问者模式的结构包括以下几个主要组成部分：\",\"抽象访问者（Visitor）：定义了对每个具体元素类（如 Car, SUV, Truck）中的各种操作，它包含一系列的 visit 方法，每个方法对应一个具体元素类。\",\"具体访问者（ConcreteVisitor）：实现了抽象访问者中声明的各种 visit 方法，完成对具体元素的操作。\",\"元素（Element）：定义了一个接收访问者对象的 accept 方法，通常是一个抽象类或接口，可以有多个具体子类。\",\"具体元素（ConcreteElement）：实现了 accept 方法，在其中调用访问者对象的对应方法以便对自身进行操作。\",\"对象结构（Object Structure）：一个元素的集合，提供 accept 方法以便访问者访问它的元素。\",\"示例代码\",\"以下是使用访问者模式实现的一个简单汽车应用示例：\",\"#include <stdio.h> // 前置声明 typedef struct Car Car; typedef struct SUV SUV; typedef struct Truck Truck; typedef struct Visitor Visitor; // 抽象访问者 struct Visitor { void (*visitCar)(Car*); void (*visitSUV)(SUV*); void (*visitTruck)(Truck*); }; // 抽象元素：汽车 struct Car { char* model; int year; void (*accept)(Car*, Visitor*); }; // 抽象元素：SUV struct SUV { char* model; int year; void (*accept)(SUV*, Visitor*); }; // 抽象元素：卡车 struct Truck { char* model; int year; void (*accept)(Truck*, Visitor*); }; // 具体访问者：汽车特性展示访问者 typedef struct { Visitor super; } CarFeaturesVisitor; void visitCar(Car* car) { printf(\\\"Visiting Car: Model %s, Year %d\\\\\\\\n\\\", car->model, car->year); } void visitSUV(SUV* suv) { printf(\\\"Visiting SUV: Model %s, Year %d\\\\\\\\n\\\", suv->model, suv->year); } void visitTruck(Truck* truck) { printf(\\\"Visiting Truck: Model %s, Year %d\\\\\\\\n\\\", truck->model, truck->year); } // 具体元素实现 accept 方法 void carAccept(Car* car, Visitor* visitor) { car->accept = carAccept; visitor->visitCar(car); } void suvAccept(SUV* suv, Visitor* visitor) { suv->accept = suvAccept; visitor->visitSUV(suv); } void truckAccept(Truck* truck, Visitor* visitor) { truck->accept = truckAccept; visitor->visitTruck(truck); } // 测试代码 int main() { CarFeaturesVisitor carFeaturesVisitor = { .super = { .visitCar = visitCar, .visitSUV = visitSUV, .visitTruck = visitTruck } }; Car car = { .model = \\\"Toyota Camry\\\", .year = 2023, .accept = carAccept }; SUV suv = { .model = \\\"Honda CR-V\\\", .year = 2022, .accept = suvAccept }; Truck truck = { .model = \\\"Ford F-150\\\", .year = 2021, .accept = truckAccept }; car.accept(&car, (Visitor*)&carFeaturesVisitor); suv.accept(&suv, (Visitor*)&carFeaturesVisitor); truck.accept(&truck, (Visitor*)&carFeaturesVisitor); return 0; }\",\"优点\",\"分离关注点：访问者模式将数据结构与操作分离，使得可以在不改变元素类的情况下增加新操作。\",\"增加新操作：通过增加新的具体访问者，可以方便地在现有系统中添加新的操作，符合开闭原则。\",\"集中相关操作：将相关的操作集中到一个访问者中，使得代码更加易于维护和理解。\",\"缺点\",\"增加新元素困难：如果需要在系统中增加新的元素类型，需要修改所有具体访问者类，可能导致系统的复杂性增加。\",\"破坏封装：访问者模式要求访问者对象访问元素的内部状态，这可能会破坏元素对象的封装性。\",\"适用场景\",\"当一个对象结构包含多个类型的对象，且希望对这些对象进行不同的操作时，可以考虑使用访问者模式。\",\"当需要对现有的对象结构添加新的操作而不改变其结构时，访问者模式是一个比较好的选择。\",\"当对象结构中的元素类经常变化，但操作算法相对稳定时，访问者模式可以帮助我们避免在每个元素类中增加新操作。\",\"总结\",\"访问者模式通过将数据结构与数据操作分离，提供了一种灵活的方式来处理多种类型的元素及其操作。它能够有效地增加新的操作而不改变元素类结构，但也可能会导致系统的复杂性增加，特别是在增加新元素类型时需要谨慎设计。在示例中，我们展示了如何通过访问者模式来访问不同类型的汽车并执行特定的操作，以便更好地理解和应用这种设计模式。\"]},\"48\":{\"h\":\"\",\"t\":[\"《深入设计模式》\",\"《设计模式：可复用面向对象软件的基础》\",\"《重构与模式》\",\"《代码整洁之道》\",\"《敏捷软件开发：原则、模式与实践》\",\"《Head First 设计模式》\",\"《Effective Java》\",\"《设计模式解析》\",\"《大话设计模式》\",\"《重构：改善既有代码的设计》\"]},\"49\":{\"c\":[\"使用指南\"]},\"50\":{\"c\":[\"设计模式\",\"C\"]},\"51\":{\"h\":\"Autosar can协议栈\",\"t\":[\"本文主要讲解Autosar CAN 协议栈原理、集成及相关调试策略\"]},\"52\":{\"h\":\"CAN通信基本原理\"},\"53\":{\"h\":\"CAN通信概述\",\"t\":[\"CAN（Controller Area Network）即控制器局域网络。由于其高性能、高可靠性、及独 特的设计，CAN越来越受到人们的重视。国外已有许多大公司的产品采用了这一技术。\",\"CAN最初是由德国的BOSCH公司为汽车监测、控制系统而设计的。现代汽车越来越多地采用电子装置控制，如发动机的定时、注油控制，加速、刹车控制（ASC）及复杂的抗锁定刹车系统（ABS）等。由于这些控制需检测及交换大量数据，采用硬接信号线的方式不但烦琐、昂贵，而且难以解决问题，采用CAN总线上述问题便得到很好地解决。\"]},\"54\":{\"h\":\"CAN标准及原理图\",\"t\":[\"CAN总线是一种用于在不同的ECU（电子控制单元）之间传输数据的线，CAN总线协议是一种ISO 国际标准化的串行通信协议，有 ISO-11898 和 ISO-11519两个系列。其定义有： ISO-11898 定义了通信速率为 125 kbps ~1Mbps 的高速 CAN 通信标准，属于闭环总线，传输速率可达1Mbps，总线长度 ≤ 40米，如下图。\",\"ISO11519 定义了通信速率为 10～125 kbps 的低速 CAN 通信标准，属于开环总线，传输速率为40kbps时，总线长度可达1000米，如下图。\"]},\"55\":{\"h\":\"CAN特性\",\"t\":[\"传输速率最高可达1Mbps，距离最远可达10km\",\"通信介质选择灵活（双绞线、同轴电缆、光纤）\",\"采用双线差分信号\",\"协议本身对节点的数量没有限制\",\"总线上节点的数量可以动态改变，组网灵活\",\"短帧结构，传输时间短，受干扰概率低\",\"多主站结构，各节点平等，任一节点可在任一时刻主动发送\",\"非破坏性的基于优先级的总线仲裁\",\"优先级通过报文的标识符（ID）区分，报文标识符在网络中是唯一的 \",\"标识符描述了数据的含义\",\"某些特定的应用对标识符的分配进行了标准化\",\"广播发送报文，报文可以被所有节点同时接收\",\"根据需要可进行相关性报文过滤\"]},\"56\":{\"h\":\"CAN功能特性\",\"t\":[\"CAN总线上，信号表现为电压形式，通过CAN_H和CAN_L线上的电位差来表示CAN信号，分为显性电平(dominant)和隐性电平(recessive)两种类型。其中显性电平规定为逻辑0，隐性电平则为逻辑1。其具体定义可通过下图来理解。\"]},\"57\":{\"h\":\"CAN系统构成\",\"t\":[\"有两种，如下图；第三种是CAN收发器也集成到微控制器中\"]},\"58\":{\"h\":\"AUTOSAR CAN协议栈概述\",\"t\":[\"Driver：主要包括CAN的Driver，以及根据外部的CAN的收\",\"HaedwareAbs：包括用于区分CAN通信的接口，接收／发送不同功能的PDU以及控制CAN收发器进行工作的Transceiver\",\"Services：包换CAN的状态管理以及PDU和信号的处理相关的模块\"]},\"59\":{\"h\":\"CAN Driver\",\"t\":[\"MCU的CAN外设控制模块\",\"主要数处理CAN的控制器中的功能，实现 数据在MCU CAN模块的收发\"]},\"60\":{\"h\":\"MCAL相关配置\",\"t\":[\"CanGeneral：配置一些API的使能函数周期等\",\"CanController：配置MCU的CAN外设操作功能以及CAN的Filter\",\"CanHaradwareObject：配置CAN的接收发送邮箱以及使用的Filter\"]},\"61\":{\"h\":\"CANTrcv\",\"t\":[\"CAN Trcv模块主要控制CAN外部收发器的模式，MCU的CAN信号与CAN总线建立起数据交互;目标是为适用于大多数当前和未来CAN收发器设备定义接口和行为。CAN Trcv抽象了CAN收发器硬件。它为更高层提供了一个独立于硬件的接口。 它通过使用MCAL层的API来访问CAN收发器硬件，以便实现ECU布局中的抽象化。\"]},\"62\":{\"h\":\"CANTrcv 模式切换\",\"t\":[\"CANTrcv的模式转换主要通过控制Dio或者SPI来控制硬件Trcv\",\"上电调用Init可以直接切换到任意一个模式\",\"SetMode函数用于被MainFunction或者CANIf接口调用控制\",\"在支持唤醒的Trcv一定要确保下电进入Sleep，才能有唤醒功能，这个时候Trcv处于常电模式，且唤醒中断引脚连接SBC的唤醒引脚\"]},\"63\":{\"h\":\"MCAL配置\",\"t\":[\"·General：主要配置相关API的使能以及是否支持唤醒等功能 ·ConfigSet：根据外部电路配置Trcv的通道，主要分为DIO控制的和SPI控制的，DIO控制的根据使用的PIN关联到DIO通道，SPI控制的要分配SPI的Sequence\"]},\"64\":{\"h\":\"AUTOSAR CAN协议栈集成\"},\"65\":{\"h\":\"AUTOSAR CAN调试策略\"},\"66\":{\"h\":\"参考链接\",\"t\":[\"AUTOSAR_TR_FoundationReleaseOverview AUTOSAR中国官方培训课程\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"67\":{\"c\":[\"Autosar\"]},\"68\":{\"c\":[\"CAN\",\"协议\"]},\"69\":{\"h\":\"Autosar解决方案概述\",\"t\":[\"本文主要讲解Autosar解决方案相关内容\"]},\"70\":{\"h\":\"Autosar技术标准框架\",\"t\":[\"AUTOSAR技术标准针对不同的需求提供了不同的解决方案，以涵盖汽车软件开发领域的各种应用场景\"]},\"71\":{\"h\":\"Adaptive Platform(AP)\",\"t\":[\"Adaptive Platform是AUTOSAR为开发安全相关的高算力ECU，如自动驾驶，而提供的解决方案\",\"AP分层软件架构特点:\",\"支持采用C++作为应用软件的编程语言\",\"采用面向服务的架构（SOA）\",\"支持多任务并行处理\",\"尽可能重用已有标准\",\"支持功能安全和信息安全\",\"有计划的动态性，而非完全动态\",\"支持基于敏捷的开发过程\"]},\"72\":{\"h\":\"Classic Platform(CP)\",\"t\":[\"Classic Platform是AUTOSAR为开发硬实时、高安全性嵌入式系统，如电驱控制，而提供的解决方案\",\"CP分层软件架构支持：\",\"对硬件进行抽象，实现软硬解耦\",\"对Runnable和Task进行调度（操作系统）\",\"抽象部署在同一ECU或者不同ECU上的应用之间的通信，实现整车层面的虚拟功能总线\",\"故障诊断及诊断服务\",\"功能安全服务\",\"今信息安全服务\",\"CP所定义的系统服务、存储、通信、硬件1/0和复杂驱动等各个基础软件技术栈，其作用类似于人体的神经系统。相对应地，控制器硬件可以理解为身体，而应用软件可以理解为大脑或灵魂。\"]},\"73\":{\"h\":\"Foundation(FO)\",\"t\":[\"Foundation包含了AP和CP之间通用的内容以保证二者之间以及二者与非AUTOSAR系统之间的兼容性\",\"原文如下：\"]},\"74\":{\"h\":\"FO部分所定义的通用特性\",\"t\":[\"FO部分所定义的内容为“基础设施”，同时适用于CP和AP两种系统，以保证二者之间的兼容性。如通信协议、元模型、主干需求与术语、文件模板等。\"]},\"75\":{\"h\":\"AP、CP、FO间的关系\",\"t\":[\"Alt text\"]},\"76\":{\"h\":\"CP 与 AP 的区别\",\"t\":[\"CP\",\"AP\",\"Based on OSEK\",\"Based on POSIX\",\"Execution of code directly from ROM\",\"App is loaded from persistent memory into RAM\",\"Same address space for all applications (MPU support for safety)\",\"Each application has its own (virtual) address space (MMU support)\",\"Optimized for signal-based communication (CAN, FlexRay)\",\"Service-oriented communication\",\"Fixed task configuration\",\"Support of multiple (dynamic) scheduling strategies\",\"Specification\",\"Specification and code\",\"从CP到AP,实时性与安全性需求减少，算力需求增加\"]},\"77\":{\"h\":\"基于区域集中式EE架构的整车部署\",\"t\":[\" CP应用范围更广，AP与CP相辅相成，AP不会替代AP\"]},\"78\":{\"h\":\"Autosar标准制定方式\"},\"79\":{\"h\":\"AUTOSAR年度关键节点\",\"t\":[\"每年11月份集中发布FO、CP和AP标准\",\"AP演示代码在次年春季发布\",\"每年上半年举办开放大会AOC\",\"每年12月份组织标准发布会\",\"年中组织全体工作组会议\",\"Alt text\"]},\"80\":{\"h\":\"参考链接\",\"t\":[\"AUTOSAR_TR_FoundationReleaseOverview AUTOSAR中国官方培训课程\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"81\":{\"c\":[\"Autosar\"]},\"82\":{\"c\":[\"概述\",\"解决方案\"]},\"83\":{\"h\":\"一些算法公式技巧摘录\",\"t\":[\"本文主要讲解Autosar CAN 协议栈原理、集成及相关调试策略\"]},\"84\":{\"h\":\"余法运算公式\",\"t\":[\"a mod b表示a除以b的余数。有下面的公式：\",\"(a + b) % p = (a%p + b%p) %p\",\"(a - b) % p = ((a%p - b%p) + p) %p\",\"(a * b) % p = (a%p)*(b%p) %p\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"85\":{\"c\":[\"算法\"]},\"86\":{\"c\":[\"余数计算\",\"协议\"]},\"87\":{\"h\":\"github代理配置指南\",\"t\":[\"本文主要介绍github system、global、local三个级别的代理配置及优先级\"]},\"88\":{\"h\":\"指令介绍\"},\"89\":{\"h\":\"设置代理\",\"t\":[\"git config --global http.proxy http://127.0.0.1:[Port] git config --global https.proxy https://127.0.0.1:1080:[Port]\"]},\"90\":{\"h\":\"取消代理\",\"t\":[\"git config --global --unset http.proxy git config --global --unset https.proxy\",\"提示\",\"[Port]替换为你本地代理的端口 --global 可替换为--system、--local\"]},\"91\":{\"h\":\"生效优先级\",\"t\":[\"system级指的是程序级别的配置，配置文件在程序的配置目录中 global级是用户级别的配置，配置文件在用户目录中 local级是仓库级别的配置，配置文件在仓库下的.git目录中\",\"提示\",\"优先级：local > global > system\"]},\"92\":{\"h\":\"案例\",\"t\":[\"在一个git脚本中当执行取消代理指令\",\"Alt text\",\"遇到报错\",\"Alt text\",\"通过执行代理查看指令\",\"git config --global --get http.proxy git config --global --get https.proxy\",\"发现global级别配置了代理地址，取消global级别的代理配置后，问题解决\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"93\":{\"c\":[\"使用指南\"]},\"94\":{\"c\":[\"github\",\"使用指南\"]},\"95\":{\"h\":\"《炒股的智慧》读书笔记\",\"t\":[\"《炒股的智慧》读书笔记\"]},\"96\":{\"h\":\"引言\",\"t\":[\"因为赚钱时，你不知自己为何赚了钱，你不知下次要怎么办才能重复赚钱的经历；亏钱时，你不明白自己为何亏了钱，下次要怎么做才能防止亏钱的再次发生。我希望你能在这本书中找到解决这些问题的答案。\",\"朋友，你开始看这本书，准备玩全世界最刺激的游戏并要成为专家时，我要给你这样的忠告：不要怕，也不要悔；玩游戏之前，先搞清游戏的规则，面对人为操纵的赌局，一定要摸清对方的心理；最后提醒你，小偷的本事不在偷，而在于危急的时候怎么逃。\",\"何以一般股民败多胜少，那就是：人性使然！说的全面些，就是这些永远不变的人性——讨厌风险、急着发财、自以为是、赶潮跟风、因循守旧和耿于报复\",\"我慢慢感悟这些聪明人失败的原因大约有两个：一、炒股的技能太活了；二，他们太聪明，选择太多。\",\"“贪”是人性，“不贪”是经验。\",\"你们选择太多，所以成功的机会不大。\",\"股票的迷惑性不在于股票所基于的价值，而在于它给炒股者提供的幻想。\",\"股市这一恒久的赌局却要求你每时每刻都要做理性的决定且为决定的结果负全部的责任！这就淘汰了一大部分股民，因为他们没有办法长期承担这样的心理压力。\",\"这一恒久变动的股市还有一致命的特点：它能使你亏掉较预期多得多的\",\"使股民蒙受超出预期损失的第二个原因则是人性中的吃不得小亏的心理，具体分析见下节\",\"这种赚大钱的可能以及挣了大钱后对你的生活方式、虚荣心及权力的幻 想，是极其危险的\",\"你常常面对两个选择，即选择正确或选择赚钱，在股市，它们常常并不同步。\",\"句话，股市没有即定的运行准则\",\"这一方面是人性中亏不起的心态，另一方面是报复赌场，报复赌场让他们亏钱。\"]},\"97\":{\"h\":\"环境\"},\"98\":{\"h\":\"大环境\",\"t\":[\"1．利率\",\"2．税收\",\"3．汇率\",\"4．银根松紧\",\"5．经济周期\",\"6．通货膨胀\",\"7．政治环境\",\"8、政府的产业政策\"]},\"99\":{\"h\":\"小环境\",\"t\":[\"1．营业收入\",\"2．盈利\",\"3．固定资产\",\"4．类似公司的情况\",\"5．品牌的价值\",\"大环境的变化是谈天的好材料，用来炒股的实用性不大。大的政治动乱和经济震荡当然例外。\"]},\"100\":{\"h\":\"影响股票的三个因素\",\"t\":[\"1.盈利的增长\",\"2.新产品\",\"3.公司回购自己的股票\"]},\"101\":{\"h\":\"股票的走势及走势线\",\"t\":[\"在升势图中，请注意交易量的变化。在上升阶段，交易量增加，下调阶段，交易量减少。\",\"典型的跌势图\",\"在跌势时，交易量没有特别之处，但跌波的每个波峰较上一波峰为低，波谷也较上一波谷为低。\",\"无势图\",\"一只无势的股票通常不适合炒作。\",\"影响投资者决定的最重要因素是对未来的预期。\",\"股票的运动有点像推石球上山，要往上推，你要很大的力，但石球往下 滚，用不着很多力气。\",\"华尔街有过调查，使一般投资者入场买股票的原因最主要的就是因为股票在升！\",\"一般投资者入场买股票主要不是因为股票的成本收益比率低或红利高，而是因为股票在升！升！升！ 除了股票在升的理由之外，其它因素都是次要的。这就是为什么股票一开始升势，它往上一波高过一波，不会马上停止。要想学习养成对股票运动的感觉，你必须牢牢记住这一点。\",\"现在你能体会到为什么股票升时常常升得离谱，跌时跌到惨不忍睹的原因了吧？记住股民买卖股票的真正原因，耐心地观察市场，你很快就会发现股票运动是有迹可循的。\",\"2．支撑线和阻力线\",\"3．双肩图和头肩图\",\"4．平均线\",\"我自己习惯用200天平均线来衡量股票的长期走势，50天平均线来衡量中期走势。\",\"股票短期的运动方向我注重股价及交易量。\",\"我通常不买股价在200天平均线下的股票，做短线时例外\"]},\"102\":{\"h\":\"综合看图\",\"t\":[\"把图2-10倒过来，我们就有了最常见的买入理想点。记住如果这是升势开始的话，交易量通常增大\",\"支撑线和阻力线：一旦阻力线被突破，股票应该继续上升，虽然可能有反调，便反调不应该跌到阻力线之下，否则便是不正常运动。同样，一旦支撑线被突破，股票应往下跌，否则的话，便是不正常运动。如果股票一跌破支撑线便反弹到支撑线之上，可能是买股的好时机。\",\"以下我简单地解释经济周期怎样在股价上反映出来。这些知识能加深你对股市的认识（\",\"。必须强调，股市操纵可能改变每天的或短期的波动，但不可能改变大势。 道氏理论特点指出这一点\",\"马克思的政治经济学主要目的便是解决不断重复的资本广义经济周期对社会负面的影响。\",\"由于我自己以中短期炒作为主，技术分析是我买进卖出的主要参考。\",\"不要把技术分析孤立起来看。\",\"股票大市的重要性的：“炒股的诀窍便是在牛市中全力投入，在牛市结束或接近结束的时候卖掉你的所有股票。\",\"要确定大市的走向，最重要的是每天要追踪股票指数的运动\",\"留意每天的交易总量。如果股市交易总量很大，但指数不升，或开市走 高，收市低收盘，这就给你危险信号了\",\"判断大市走向是极其重要的\",\"炒股是概率的游戏，逆大潮流而动，你的获胜概率就被大打折扣了。\",\"，但一定要在心理上不断提醒自己：大市不好时，别买任何股票。\",\"综合指数有时会被几只大股票糊弄\",\"最流行的“现金值法”是怎么判断合理股价的。\",\"要得到股票的现金值需要2个假设。一个是通货膨胀，另一个是未来盈利\",\"我们生活在从工业社会转型到信息社会的关口。互联网公司属于信息社会的产业。\",\"现今流行的企业评估标尺如本利比、现金值、固定资产值等等是用来评估工业社会企业的，它取代了农业社会丈量土地的方法；但它用来评估信息社会的企业可能并不十分合适。\"]},\"103\":{\"h\":\"成功的要素\",\"t\":[\"么投机的原理是什么呢? 它的精华可以浓缩成两句话：(1)败而不倒(2)追求卓越。\",\"具体的做法就是分层下注\",\"把“保本”这个概念牢牢地记在心里，你在炒股时每次犯错，你的体会就会深一层，时间一久，你就知道该怎样做了。\",\"但我常听到炒股的人居然会为亏钱而自豪！这其实便是炒股艰难的地方。看不见、摸不着的股票使一般人的判断力走了样。\",\"在这里我要强调的是：只要股票运动正常，便必须按兵不动\",\"你如果有60%的胜算，下注的数额比你有80%的胜算时应该为少。至于你怎么知道有60%的胜算或80%的胜算，完全决定于你自己的经验。\",\"股票从来不是恒定不动的，它有时很活跃，有时很安静，要么上一下，要么下一点，在一固定的区间波动，一旦股票开始一个新的走势，它通常循着一条比较固定的路径运行。华尔街将这条线称为“最少阻力线”。\",\"如果读者觉得还很抽象的话，我以下用数字来描述一遍，因为掌握股票正常运动的特点对炒股成功是极其重要的。\",\"一只正常运动的股票，每次上冲的强度通常较上一次更为猛烈。\",\"炒股的最基本信条是在任何时候，你手上持有股票的上升潜力必须大过下跌的可能，否则你就不应留在手里。\",\"但炒友们必须牢牢记住：股市从来都不错，它总是走自己要走的路，会错的只有人自己\",\"华尔街曾经对一般的股民做过调查，其结果是惊人的：80%的股民入市并非以赚钱为主要目的\",\"欲望必须由努力做基础，否则只是白日梦，白日梦不是欲望是梦。\",\"这个世界充满聪明而失意的人，受过良好教育但成日感叹怀才不遇的人，……他们有个共性，缺少锲而不舍的精神\",\"它是在忍无可忍的时候，再忍下去的毅力！\",\"最痛苦的不是亏钱的数目，钱亏掉不可怕，可怕的是不知有无本事再赚回来\",\"成功的秘诀不外乎是“在忍无可忍的时候，再忍一忍”。\",\"一位成功的炒手必须如一位成功的商人，正确地预见未来的需求，适时进货，耐心地等待盈利的时刻。\",\"要甘于做孤独者\",\"但炒股需要不同的思维方式。\",\"反之如果大多数股民不看好股市，他们都已经脱手出场，那么股市的继续下跌区间也已不大。\",\"你如果随大流，则你将常常在高点入市，低点出市，你将成为失败者。\",\"当然，何为大多数股民看好大市或大多数股民不看好大市是很难计量的，你主要通过研究“股势”来得到答案。\",\"你从小学习的那些讨人喜欢的性格，如听话、合群、不标新立异等等都成为炒股成功的障碍。\",\"必须具有耐心和自制力\",\"你不把“苦工”当成习惯，你在这行成功的机会就不大。\",\"在正确的时间和环境做正确的事才有可能得到预想的效果。\",\"对业余炒手而言，往往不是没有耐心，也不是不知道危险，他们也知道春天是播种的时机，但问题是他们没有足够的知识和经验判定何时是春天\",\"大多数人注重于今天发生的一切并假设今天发生的一切会不断延续，但优秀的投资者会看得更远一步，预想在什么情况下今天的情形会停滞甚或产生逆转。\",\"成功的投资者绝不幻想\",\"按原来的预想，这只股票的运动不对，你会怎么办？一般人常常想像出各种理由把这一不正常的运动“合理化”。\",\"要有应用知识的毅力\",\"因为人们常常做不到自己知道该做的事情！\",\"在炒股问题上，我是坚信“知易行难”之说的。\"]},\"104\":{\"h\":\"\",\"t\":[\"买点的最最重要点是选择止损点。\",\"这个止损点不应超出投资额的20%。请读者切切牢记，否则这里讲的一切都是空的。\",\"买股票的依据主要是三点：基础分析、技术分析及大市走向。\",\"说到底，我差不多就等于在开赌场，每次入场时我的获胜概率都超过50%，而且我只下小注，所以我久赌必赢\",\"操作技巧\",\"假如这是一个正常的升势，A、B点分别是波峰和波谷。一旦股价超过A点，便是好的买入点。\",\"阻力线和支撑线的操作\",\"我自己的经验，最有用的概念是阻力线和支撑线，从心理上它们最容易解释，在实际中它们也最为有效\"]},\"105\":{\"h\":\"买入的要点归纳\",\"t\":[\"第一，在买入之前，一定要参照一下股票的走势图，因为它是大众投资心理的反映。\",\"第二，在买入之前，先定好止损点，搞清楚你最多愿亏多少钱。切记照 办。\",\"第三，选择临界点，记住你不可能每次正确，所以入场点的获胜概率应大过失败概率。\",\"第四，最好在升势或突破阻力线，准备开始升势的时候买入。\",\"第五，绝不要在跌势时入市。\",\"第六，不要把“股票已跌了很低了”作为买入的理由，你不知道它还会跌多少！\",\"第七，不要把“好消息”或“专家推荐”作为买的理由，特别在这些好消息公布之前，股票已升了一大截的情况下。\",\"第八，记住这些要点及点点照办。\",\"但有一点可以确定，短线操作的资金都是热钱，它不会长久留在某只股票上，除非大户真的认为该股有潜力。\",\"如果交易量没有增加，突破阻力线的现象并没有很大意义，请读者自己思考一下其中的原由\",\"只有在交易量增加的前提下，突破阻力线才可以认为股票的运动进入新的阶段。\",\"大户的花招其实明显的很。讲白了，他们想买进的股票要么静悄悄地，要么想法引起大众的恐慌性抛售，前者你会看到交易量增加，但不明显，股价慢慢地一步步升高，后者便是搞一些大家公认的好卖点\",\"想像你的对手是谁！如果是大户的话，你炒股大概常亏钱，如果是小股民的话，你大约已赢多过输。\",\"买股的时机固然重要，买什么股票有同样的分量。\"]},\"106\":{\"h\":\"选择股票的步骤\",\"t\":[\"第一，什么是大市的走向？如果大市不好，你最好什么都别买，安坐不 动。\",\"第二，哪些类别的股票“牛劲”最足？\",\"第三，当你判定股票大市属于“牛市”，选好“牛劲”最足的类别股后，余下的工作就是“牛劲”最足的股类中选择一两只“龙头”股\",\"第三点怎么办？在“牛劲”最足的类别股中，怎样找最有潜力的股票？\",\"形成自己的风格模式\",\"用你自己发现的临界点，按自己定好的规则买进卖出，训练自己的耐性，留意市场提供的危险信号，你就走上了学股的正确道路。\"]},\"107\":{\"h\":\"何时卖股票\",\"t\":[\"不要试图寻找股票的最高点，你永远不知股票会升多高。\",\"和买股票一样，卖股票的点也是“临界点”\",\"寻找临界点的过程便是你的学股过程\"]},\"108\":{\"h\":\"小结一下何时及怎样卖股票\",\"t\":[\"1．注意危险信号\",\"2．保本第一\",\"3．亏小钱\",\"只要条件允许，越小越好\",\"我自己喜欢把止损点定在入市当天的最低点。比如我今天以10.75元买进股票，今天的最高价是11元，最低价是10元，我便以10元作为止损点。以我的经验，如果我的入场点选的正确，股票开始上升，它不应跌回我当天入场的最低点。\",\"4．遇有暴利，拿了再说\",\"5．小心交易量猛增，股价却不升\",\"6．用移动止损点来卖股票\"]},\"109\":{\"h\":\"华尔街家训\",\"t\":[\"时刻牢记：市场从来不会错，而你的想法常常是错的。\",\"止损，止损，止损\",\"分散风险\",\"避免买太多股票\",\"将注意力集中在三至五只最有潜力的股票，随着经验的增加，逐渐将留意的股票增加到十至十五只。我自己的极限是二十只股票。\",\"有疑问的时候，离场\",\"忘掉你的入场价\",\"别频繁交易\",\"不要向下摊平\",\"不要向下摊也可用另一种说法：第一次入场后，纸面上没有利润的话不要加码。纸面有利润了，表示你第一次入场的判断正确，那么可以扩大战果，适当加注，否则即刻止损离场，另寻机会。\",\"就算进价较你第一次进价为低也没有关系。这样做的思想基础不是为了解套，而是你“知道”股票的升势还在继续。\",\"别让利润变成亏损\",\"跟着股市走，别跟朋友走！\",\"别将“股价很低了”当成买的理由，也别将“股价很高了”当成卖的理由！\",\"别爱上任何股票！\",\"要在投资领域成功，他相信以下的六点素质是必备的\",\"第一，你要有点贪念，但不能太多。\",\"第二，你必须有耐心\",\"第三，你必须独立思考\",\"第四，你必须有自信\",\"第五，不要不懂装懂，要有自知之明。\",\"第六，对投资的对象可以有弹性\",\"他列出下面几点作为选择公司的参考。\",\"：一，我们的投资将基于股票的价值而不是股票是否热门；二，我们的管理将尽量使损失降至最低（有别于股价的短期波动）。\",\"一位成功投资者的重要素质之一便是市场情况不允许时，离开市场。\",\"第一，不要第一次就入市太深，从小开始，如果进展顺利，再加码。\",\"第二，市场是愚蠢的，你也非不着太聪明。\",\"索罗斯建议投资研究越简化越好。他自己从不在经济研究上花大量的时间，不读华尔街证券行的研究报告。\",\"。索罗斯认为这一理论根本就是错的。\",\"他自己提出了“反馈理论”（theory of reflexivity）。这个理论的简单解释便是：想法改变了事件，事件的改变又反过来改变想法。\",\"我对所有的炒股规则都抱有怀疑，所以很不愿意多谈。但就我的亲身经历，以下的几点或许能帮助你自律：\",\"1．除非你能将炒股当成全时工作，否则别冒险\",\"2．对任何给你‘内幕消息’的人士，无论是理发师、美容师还是餐馆跑 堂，都要小心\",\"3．在你买股票之前，找出公司的所有资料，它的管理层、竞争者，它的盈利及增长的可能性。\",\"4．别试着在最低点买股、最高点卖股，这是不可能的，除非你撒谎。\",\"5．学习快速干净地止损。别希望自己每次都正确。如果犯了错，越快止损越好。\",\"6．别买太多股票，最好只买九只股票，以保证你能够仔细地观察它们。\",\"7．定期有计划地检查你的投资，看看有什么新的发展可能改变你的想法。\",\"8．研究税务情况，在卖股时争取最大的税务效益\",\"9．永远持有一部分现金，不要将钱全部投入股市\",\"10．不要尝试成为万事通，专心于你了解最多的行业。\",\"大钱不存在于股票的日常小波动，大钱只存在大势之内。因此你需要判定大势的走向\",\"我赚到大钱的诀窍不在于我怎么思考，而在于我能安坐不动，坐着不动！\",\"我只在升势的时候买股票，此时我才觉得舒服。我每多进一手都一定较上一手的价格更高。\",\"记住，股票从来就没有太高了不能买或太低了不能卖这回事，但进场 后，如果第一手没给你利润，别进第二手。\",\"所有的专业炒手都不在乎赚钱或亏钱，他们在乎在正确时间做正确的事。他们知道利润会随之而来\",\"1．确定你对炒手生涯感兴趣\",\"2．检查你买卖的动机\",\"3．你的交易方式必须和你的个性相符合\",\"4．你必须有“胜算”\",\"5．找一个方法\",\"6．好的交易方法应毫不费力\",\"7．风险控制\",\"8．自律\",\"9．独立思维和自信\",\"10．亏损是游戏的一部分\",\"11．耐心\",\"12．该出手时就出手\",\"13．发现压力的根源，解除压力\",\"14．尊重自己的直觉\",\"15．价格的变动不是随机的，你能战胜市场\"]},\"110\":{\"h\":\"\",\"t\":[\"第一，获得炒股的基本知识； 第二，制定切实可行的炒股计划； 第三，严格按照这个计划实行。\",\"你对“未随大流”的恐惧和失去“赚大钱”机会的贪婪常使你在股票的最高点入股。\",\"无论得到什么，得到多少，你总会编出理由来证明你应该得到更多\",\"一旦怀抱“希望”，你每天都在寻找对你有利的信息，忽略对你不利的信息。\",\"成功的投资必须基于对今天和未来所发生的事件对股价的可能影响做理性判断，“希望”在这个判断过程中不应占有任何地位。\",\"什么是正确的心态？\",\"这些正确的心态至少包括以下几方面：\",\"1．你要相信自己\",\"2．诚实地面对自己，评价自己\",\"3．独立的判断能力\",\"4．自我督促\",\"5．改变的能力\",\"6．热爱你选择的行业\",\"所见到的大多是玩股的，把炒股当成业余消遣，这些人永远都达不到专业的层次。\",\"在本书的最后一章“和炒手们谈谈天”里我会较为详细地谈谈学股经历的几个过程。从什么都不懂到有信心不断地从股市赚到钱，我也用了近六年的时间，那还不算我业余炒股的经验及金融硕士的知识背景。所以，你要准备“长期抗战”。\"]},\"111\":{\"h\":\"\",\"t\":[\"当年也不是没有头脑清醒的人，但他们太早了一步，他们指出这个泡沫会破碎，但市场用不断升高证明他们论断的错误。开始还有人听听他们的警钟，随后便嘲笑他们的短视。骗案层出不穷是所有“疯”到了晚期的特征之一\",\"所有的疯狂都有梦醒时分。\",\"气球吹胀的初期，气球后面一定有一动人的故事，提供给人们无穷的想像。发财的希望，促使投资大众开始投入\",\"每一个更高的波浪都带动更多的贪婪心理，吸引更多的股民加入。股票将节节升高，这就形成了所谓的升势。\",\"“疯”的特性\",\"1．可信的想法、概念或产品，能提供快速的增长，带来巨额的财富\",\"2．社会游资甚多，或通过某些方式“创造”出游资。一时这些资金集中在某个领域，必定带来滚雪球效应\",\"3．这个想法必须具备即简单又复杂的特性。简单到普通民众能“觉”得是好主意，但必须复杂到很难用事实证明其对错。否则气球吹不起来。\",\"4．有人赚到钱！没有什么比轻松和快速来钱更能吸引普通民众，它传染的速度远超过瘟疫。\",\"5．气球胀到一定地步，有“专家”背书：这气球会继续胀。这些“专 家”通常是偶像人物，代表智慧、权威、依赖。民众相信自己在模仿成功人士。\",\"6．气球胀的时间比常人想像得更久。最初指出气球会破的人随着气球的不断胀大而被嘲笑。\",\"经济史是一部基于假象和谎言的连续剧，经济史的演绎从不基于真实的剧本，但它铺平了累积巨额财富的道路。做法就是认清其假象，投入其中，在假象被公众认识之前退出游戏。\"]},\"112\":{\"h\":\"炒手访谈\",\"t\":[\"你做什么都可以，只要你自己喜欢！但我希望你能有一个不求人的一技之长。”\",\"体验风险阶段\",\"我每次赚了大钱，随即常常来一次亏大钱，因为每次赚了大钱，都让我自己觉得自己”懂了”\",\"任何有输的可能的行为都是赌。把钱存银行不是赌，因为一定有利息。可炒股就是赌钱，两者没有区别。\"]},\"113\":{\"h\":\"\",\"t\":[\"成功不是达到目的，应该是达到这一目的的过程。\",\"你可能较其它行的从业者富有，但成为富豪在天不在人\",\"别想着在股市赚钱\",\"别将股市当成是赚钱的地方，将它当成是娱乐场所，当成小赌怡情、陶冶性情的场所；这样你就可以据此制定一系列游戏规则，按这些游戏规则，你将以最少的代价得到最多的乐趣。\",\"一、多玩几种游戏，将玩的费用分散些！\",\"二、开心的游戏玩久些，不开心的游戏便快些离开！\",\"三、别把痛苦带回家！\",\"华尔街有个说法：第一损失往往是代价最小的损失。\"]},\"114\":{\"h\":\"\",\"t\":[\"正常”或“不正常”涉及一个很重要的数学概念：概率！想在股市谋生，每次买卖都要有50％以上的胜率，任何持有的股票都应有超过50％的上升几率，否则你无法从股市长久赚到钱。有了判断“正常”或“不正常”的能力，你在股市就有了50％以上的胜率，你就有了生存的可能。想有这样的判断力，除了熬和交学费外，似乎还没有什么其他方法——而最重要的是熬！\",\"小小做，快快止损\",\"为自己立些规矩，按规矩做，你会成功的\"]},\"115\":{\"c\":[\"使用指南\"]},\"116\":{\"c\":[\"炒股的智慧\",\"读书笔记\"]},\"117\":{\"h\":\"C/C++语法报错集合汇总\",\"t\":[\"本文主要汇总C/C++语法报错问题\"]},\"118\":{\"h\":\"在C++类中vector声明，报错 “expected parameter declarator”\",\"t\":[\"class A{ private: vector<int> nums(5); };\",\"错误原因是：编译器无法区分该语句是成员变量声明还是成员函数声明。\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"119\":{\"c\":[\"编程语言\"]},\"120\":{\"c\":[\"C\",\"C++\",\"报错\"]},\"121\":{\"h\":\"C++中两种字符串拼接的区别\",\"t\":[\"本文探讨C++中 s = s + 'A' 和 s += 'A' 的区别\"]},\"122\":{\"h\":\"原理\",\"t\":[\"在C++中，当你执行s = s + 'A'时，实际上是创建了一个新的字符串。这是因为C++中字符串的+运算符被重载以连接字符串，其结果是一个新的字符串。\",\"另一方面，当你执行s += 'A'时，这是一种原地操作，它通过将字符'A'附加到现有字符串s上来修改现有字符串。字符串的+=运算符被设计为修改现有字符串对象，而不是创建新的对象。\",\"从效率的角度来看，s += 'A'可能比s = s + 'A'更高效，因为它有可能避免创建新的字符串对象，直接修改现有对象。\",\"简而言之：\",\"s = s + 'A'：通过将现有字符串s和字符'A'连接起来创建一个新的字符串对象，然后将这个新字符串赋给s。\",\"s += 'A'：通过将字符'A'附加到现有字符串s上来修改现有字符串。\",\"一般来说，如果你不需要保留原始字符串，使用+=可能更高效，因为它修改现有对象。然而，如果你想保留原始字符串不变，应该使用s = s + 'A'。\"]},\"123\":{\"h\":\"案例\",\"t\":[\"参考链接：\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"124\":{\"c\":[\"编程语言\"]},\"125\":{\"c\":[\"C++\",\"+字符串拼接\"]},\"126\":{\"h\":\"C语言extern关键字作用分析\",\"t\":[\"本文主要介绍C语言中extern的作用分析\"]},\"127\":{\"h\":\"前提\",\"t\":[\"首先理解声明和定义：\",\"声明是告诉编译器有一个这样的变量或函数存在，定义是为变量分配内存空间或者实现函数本体(body)\",\"提示\",\"在c语言中声明和定义一个变量是同时进行的，但extern仅用于声明\"]},\"128\":{\"h\":\"extern作用\",\"t\":[\"在C语言中，关键字extern用于声明一个变量或函数，以便告诉编译器它们的存在，但并不会分配实际的存储空间。具体来说，extern的作用有以下几点：\",\"变量声明：当extern用于变量声明时，它告诉编译器该变量在其他文件中已经定义，因此在当前文件中不需要为其分配存储空间。这样做可以避免重复定义变量，而只是声明它的存在。\",\"// 在一个文件中声明变量 extern int x;\",\"函数声明：类似地，extern也可以用于函数声明，以便告诉编译器该函数在其他文件中已经定义。\",\"// 声明函数的存在 extern void someFunction();\",\"全局变量：在全局范围内使用extern可以使变量在当前文件中具有全局作用域，但实际的定义在其他文件中。这在大型项目中很有用，因为它允许多个文件共享相同的全局变量。\",\"// 在一个文件中使用 extern 声明全局变量 extern int globalVariable;\",\"总之，extern关键字用于声明变量或函数的存在，但不会分配实际的存储空间。这使得程序可以跨多个文件共享变量和函数，同时避免了重复定义的问题。\"]},\"129\":{\"h\":\"案例： 使用extern模拟面向对象编程\",\"t\":[\"在C语言中，使用extern关键字可以实现一定程度的面向对象编程。下面是一个详细的例子，展示了如何使用extern来模拟类和对象的概念。\",\"首先，我们创建一个头文件myclass.h，其中定义了一个类MyClass和相关的方法和属性：\",\"// myclass.h #ifndef MYCLASS_H #define MYCLASS_H typedef struct { int data; void (*printData)(); } MyClass; extern MyClass myObject; void MyClass_init(); void MyClass_printData(); #endif\",\"然后，我们创建一个源文件myclass.c，实现了类的初始化和打印数据的方法：\",\"// myclass.c #include <stdio.h> #include \\\"myclass.h\\\" MyClass myObject; void MyClass_init() { myObject.data = 2023; myObject.printData = MyClass_printData; } void MyClass_printData() { printf(\\\"Data: %d\\\\\\\\n\\\", myObject.data); }\",\"接下来，我们创建一个主文件main.c，在其中使用类和对象：\",\"// main.c #include \\\"myclass.h\\\" extern MyClass myObject; int main() { MyClass_init(); myObject.printData(); return 0; }\",\"运行结果\",\"运行结果图\",\"在这个例子中，我们使用extern关键字在main.c中引用了在myclass.c中定义的myObject对象。通过调用MyClass_init()方法初始化对象，并通过myObject.printData()调用对象的方法。\",\"编译这些文件并运行程序，你将看到输出结果为Data: 2023，表示成功使用extern实现了面向对象编程的模拟。\",\"需要注意的是，虽然使用extern可以模拟类和对象的概念，但C语言本身并不直接支持面向对象编程。这只是一种基于C语言的技巧或模式来实现一些面向对象的思想。\",\"参考链接：Difference between Definition and Declaration - GeeksforGeeks\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"130\":{\"c\":[\"编程语言\"]},\"131\":{\"c\":[\"C语言\",\"extern\"]},\"132\":{\"h\":\"C语言sizeof宏分析\",\"t\":[\"本文主要介绍C语言中sizeof的原理分析\"]},\"133\":{\"h\":\"原理\",\"t\":[\"sizeof 是 C 语言的一个运算符，用于返回一个对象或数据类型的大小，以字节为单位。sizeof 运算符在编译时计算，不会执行实际的运算。\",\"由于 sizeof 是编译时计算大小的，其实现是由编译器提供的，而不是由标准 C 库提供的函数。因此，sizeof 的实现通常依赖于编译器和目标体系结构。\"]},\"134\":{\"h\":\"实现方式\",\"t\":[\"以下是 sizeof 运算符的一种可能的简化实现，假设一个字节等于 8 比特：\",\"test.c文件\",\"#define SIZEOF(type) ((size_t)(&((type*)0)[1])) // 示例用法 int main() { size_t size = SIZEOF(int); return 0; }\",\"这个宏的工作原理是，将一个空指针转换为类型 type*，然后取数组的第一个元素的地址。由于数组索引是从零开始的，&((type*)0)[1] 计算出第一个元素之后的地址。然后，整个表达式被强制转换为 size_t 类型，以表示大小。\",\"需要注意的是，这只是一个简化的例子，实际的实现可能更为复杂，以处理各种类型和体系结构。实际的 sizeof 实现通常是由编译器内部提供的，因为它需要考虑各种编译器和目标平台的特定细节。\"]},\"135\":{\"h\":\"代码分析\",\"t\":[\"(size_t)(&((type*)0)[1]) 的运算顺序可以分解为以下步骤：\",\"(type*)0: 将整数 0 转换为指向类型 type 的指针，得到一个指向类型 type 的空指针。\",\"((type*)0)[1]: 使用上一步得到的空指针进行数组操作，取得数组的第二个元素。这等效于 ( ((type*)0) + 1)。请注意，这里并没有实际的数组，只是利用了指针运算的语法。\",\"&((type*)0)[1]: 取得数组第二个元素的地址。\",\"(size_t)(&((type*)0)[1]): 将这个地址转换为 size_t 类型。\",\"整个表达式的目的是计算一个指向类型 type 的指针，指向一个虚构的数组的第二个元素，然后获取这个元素的地址，并将其转换为 size_t 类型。这种技巧通常用于计算结构体或数组的大小，而无需创建实际的实例。\",\"通过将test.c文件编译成汇编文件可发现：\",\"SIZEOF(int) 对应汇编文件中的 movq $4, -8(%rbp)，将值 4 存储在相对于 %rbp 偏移为 -8 的位置。\",\"SIZEOF(double) 对应汇编文件中的movq $8, -8(%rbp)，将值 8 存储在相对于 %rbp 偏移为 -8 的位置。\",\"可见将整数 0 转换为指向类型 type 的指针，得到一个指向类型 type 的空指针时type[0]的地址为0，((type*)0)[1]的偏移量即为type的字节大小，从而可获取type的字节大小\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"136\":{\"c\":[\"编程语言\"]},\"137\":{\"c\":[\"C语言\",\"siezof\"]},\"138\":{\"h\":\"Python项目生成requirements文件\",\"t\":[\"如何生成requirements依赖文件\"]},\"139\":{\"h\":\"ppireqs 安装\",\"t\":[\"pip install pipreqs\"]},\"140\":{\"h\":\"使用\",\"t\":[\"Usage: pipreqs [options] [<path>] Arguments: <path> The path to the directory containing the application files for which a requirements file should be generated (defaults to the current working directory) Options: --use-local Use ONLY local package info instead of querying PyPI --pypi-server <url> Use custom PyPi server --proxy <url> Use Proxy, parameter will be passed to requests library. You can also just set the environments parameter in your terminal: $ export HTTP_PROXY=\\\"http://10.10.1.10:3128\\\" $ export HTTPS_PROXY=\\\"https://10.10.1.10:1080\\\" --debug Print debug information --ignore <dirs>... Ignore extra directories, each separated by a comma --no-follow-links Do not follow symbolic links in the project --encoding <charset> Use encoding parameter for file open --savepath <file> Save the list of requirements in the given file --print Output the list of requirements in the standard output --force Overwrite existing requirements.txt --diff <file> Compare modules in requirements.txt to project imports --clean <file> Clean up requirements.txt by removing modules that are not imported in project --mode <scheme> Enables dynamic versioning with <compat>, <gt> or <non-pin> schemes <compat> | e.g. Flask~=1.1.2 <gt> | e.g. Flask>=1.1.2 <no-pin> | e.g. Flask\"]},\"141\":{\"h\":\"使用案例\",\"t\":[\"生成requirements\",\"pipreqs /home/project/location\",\"Successfully saved requirements file in /home/project/location/requirements.txt\",\"更新requirements\",\"pipreqs --force [location]\"]},\"142\":{\"h\":\"参考链接\",\"t\":[\"pipreqs\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"143\":{\"c\":[\"编程语言\"]},\"144\":{\"c\":[\"Python\",\"pipreqs\"]},\"145\":{\"h\":\"Python虚拟环境配置及其工作原理\",\"t\":[\"venv in python\"]},\"146\":{\"h\":\"工作原理\",\"t\":[\"当Python解释器在虚拟环境中运行时，sys.prefix和sys.exec_prefix指向虚拟环境的目录，而sys.prefix则指向虚拟环境的目录。sys.base_prefix和 sys.base_exec_prefix指向用于创建环境的基本Python。检查sys.prefix != sys.base_prefix来确定当前解释器是否从虚拟环境中运行。\",\"虚拟环境可以使用其二进制目录(bin on POSIX; Scripts on Windows)。这将把该目录添加到您的PATH中，以便运行python将调用环境的python解释器，并且您可以运行已安装的脚本而不必使用它们的完整路径。激活脚本的调用是特定于平台的(<venv>必须被包含虚拟环境的目录的路径所替换)\"]},\"147\":{\"h\":\"配置方法\",\"t\":[\"在Windows/Linux上，你可以使用Python的内置工具venv来创建指定版本的虚拟环境。以下以Window环境为例创建指定版本虚拟环境的步骤：\",\"确保你已经安装了指定版本的Python解释器。你可以在Python官方网站上下载和安装所需的Python版本\",\"打开命令提示符（CMD）或者PowerShell。\",\"导航到你希望创建虚拟环境的目录。例如，如果你想在C:\\\\\\\\Projects目录下创建虚拟环境，可以使用以下命令：\",\"cd C:\\\\\\\\Projects\",\"创建虚拟环境。使用python命令和m venv参数，后面跟着虚拟环境的名称和Python解释器的路径。例如，如果你想创建一个名为myenv的虚拟环境，并使用Python 3.7版本，可以使用以下命令：\",\"python -m venv myenv\",\"如果你的系统上同时安装了多个版本的Python，你可以指定要使用的Python解释器的完径。例如：\",\"python -m venv --python=C:\\\\\\\\Python37\\\\\\\\python.exe myenv\",\"激活虚拟环境。在命令提示符或者PowerShell中，使用以下命令激活虚拟环境：\",\"myenv\\\\\\\\Scripts\\\\\\\\activate\",\"激活后，你将看到命令提示符或者PowerShell的提示符前面有(myenv)字样，表示你进入了虚拟环境。\",\"现在，你已经成功创建了指定版本的虚拟环境，并且可以在该环境中安装和运行特定版本的Python程序。\"]},\"148\":{\"h\":\"参考链接\",\"t\":[\"https://docs.python.org/3/library/venv.html\",\"提示\",\"若本文对您有用，欢迎送个表情包或评论 ;若有不对之处或建议，欢迎评论\"]},\"149\":{\"c\":[\"编程语言\"]},\"150\":{\"c\":[\"Python\",\"venv\"]},\"151\":{\"h\":\"davinci developer classic Port auto-connect\",\"t\":[\"本文主要讲解developer Port auto-connect 规则\"]},\"152\":{\"h\":\"连接原则\"},\"153\":{\"h\":\"auto-connect\"},\"154\":{\"h\":\"simple pattern\"},\"155\":{\"h\":\"enhanced patterns\"},\"156\":{\"h\":\"Reference\",\"t\":[\"官方文档\"]},\"157\":{\"c\":[\"Autosar\"]},\"158\":{\"c\":[\"tool\",\"developer\"]},\"159\":{\"h\":\"Autosar davinci developer classic使用教程\",\"t\":[\"本文主要讲解Autosar davinci developer classic基本使用\"]},\"160\":{\"h\":\"1.介绍\",\"t\":[\"为autosar ECU 设计软件组件架构，位于V形流程的Application Software Development; 通过图形视图或文本网格视图，可以设计包括端口、数据在内的软件组件类型、连接器和内部行为。\"]},\"161\":{\"h\":\"2.工作空间(workspace)\",\"t\":[\"Alt text\",\"Alt text\"]},\"162\":{\"h\":\"3. SWC 设计\",\"t\":[\"Alt text\",\"应用组件(Application Components)\",\"端口、端口初始值和数据元素(Ports, Port Init Values and Data Elements)\",\"连接(Connections)\",\"可运行实体(Runnables)\",\"触发器(Triggers)\",\"端口访问(Port Access)\",\"数据映射(Data Mapping)\"]},\"163\":{\"h\":\"1. 创建 Application Components\",\"t\":[\"在 object browser界面有三种视图：Type-oriented、Package-oriented 和 File-oriented\",\"在 Type-oriented 视图右键即可创建新Application Component type\",\"Alt text\"]},\"164\":{\"h\":\"2. 理解类型、原型和接口(Types, Prototypes and Interfaces)\",\"t\":[\"在Object Browser中，软件组件是类型，端口是接口。只要你 使用它们，它们就变成了原型\",\"Port Interface used by a component type -> Port Prototype\",\"Component Type in Object Browser used in software design view -> Component Prototype\",\"Alt text\"]},\"165\":{\"h\":\"3. 端口、端口初始值和 数据元素(元数据的一个原子数据单元)\",\"t\":[\"在使用应用程序端口之前，必须定义应用程序端口接口。要完全定义端口接口，如果不想使用预定义的数据类型，则必须首先定义数据类型。 端口有以下几个类别\",\"Sender Ports to provide information\",\"Receiver Ports to receive information\",\"Sender/Receiver Ports to provide and receive information within one port\",\"Server Ports to provide services (operations)\",\"Client Ports to use services (operations)\",\"Calibration Ports to hand over calibration parameters\",\"Mode Ports to e.g. trigger or not trigger runnables within certain modes\"]},\"166\":{\"h\":\"4. 在应用程序组件中配置服务端口\"},\"167\":{\"h\":\"5. 定义runnables\"},\"168\":{\"h\":\"6. 为runnable配置触发器、 Port Access\"},\"169\":{\"h\":\"7. 生成模板\",\"t\":[\"如果计划手动实现SWC(而不是使用基于模型的代码生成器)，可以生成SWC模板和合约头文件。 要生成代码，可以在对象浏览器中选择SWC，并通过上下文调用代码生成器菜单\",\"Alt text\"]},\"170\":{\"c\":[\"Autosar\"]},\"171\":{\"c\":[\"tool\",\"developer\"]},\"172\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"173\":{\"h\":\"Blog\"},\"174\":{\"h\":\"Design Mode\"},\"175\":{\"h\":\"Autosar\"},\"176\":{\"h\":\"Algorithm\"},\"177\":{\"h\":\"Github\"},\"178\":{\"h\":\"Investment\"},\"179\":{\"h\":\"C Cplusplus\"},\"180\":{\"h\":\"Programming Language\"},\"181\":{\"h\":\"Python\"},\"182\":{\"h\":\"Auto Connect Port Prototypes\"},\"183\":{\"h\":\"Da Vinci Configurator Classic\"},\"184\":{\"h\":\"User Manual\"}},\"dirtCount\":0,\"index\":[[\"理解类型\",{\"0\":{\"164\":1}}],[\"视图右键即可创建新application\",{\"1\":{\"163\":1}}],[\"触发器\",{\"1\":{\"162\":1}}],[\"端口有以下几个类别\",{\"1\":{\"165\":1}}],[\"端口初始值和\",{\"0\":{\"165\":1}}],[\"端口初始值和数据元素\",{\"1\":{\"162\":1}}],[\"端口是接口\",{\"1\":{\"164\":1}}],[\"端口访问\",{\"1\":{\"162\":1}}],[\"端口\",{\"0\":{\"165\":1},\"1\":{\"162\":1}}],[\"应用组件\",{\"1\":{\"162\":1}}],[\"应该使用s\",{\"1\":{\"122\":1}}],[\"应该是达到这一目的的过程\",{\"1\":{\"113\":1}}],[\"应该递归调用子节点的操作\",{\"1\":{\"32\":1}}],[\"应该将高层模块和低层模块之间的依赖关系倒置过来\",{\"1\":{\"22\":1}}],[\"应该将接口拆分成更小的接口\",{\"1\":{\"22\":1}}],[\"位于v形流程的application\",{\"1\":{\"160\":1}}],[\"介绍\",{\"0\":{\"160\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}],[\"官方文档\",{\"1\":{\"156\":1}}],[\"规则\",{\"1\":{\"151\":1}}],[\"规定一类对象的行为\",{\"1\":{\"14\":1}}],[\"字样\",{\"1\":{\"147\":1}}],[\"字符串的+=运算符被设计为修改现有字符串对象\",{\"1\":{\"122\":1}}],[\"激活后\",{\"1\":{\"147\":1}}],[\"激活虚拟环境\",{\"1\":{\"147\":1}}],[\"激活脚本的调用是特定于平台的\",{\"1\":{\"146\":1}}],[\"导航到你希望创建虚拟环境的目录\",{\"1\":{\"147\":1}}],[\"导航系统\",{\"1\":{\"43\":2}}],[\"打开命令提示符\",{\"1\":{\"147\":1}}],[\"打印初始状态\",{\"1\":{\"42\":1}}],[\"打印汽车状态\",{\"1\":{\"42\":1}}],[\"打印汽车信息\",{\"1\":{\"27\":2,\"28\":1,\"35\":2}}],[\"工作空间\",{\"0\":{\"161\":1}}],[\"工作原理\",{\"0\":{\"146\":1}}],[\"工厂模式与抽象工厂模式的区别在于\",{\"1\":{\"25\":1}}],[\"工厂方法模式适用于需要创建的对象种类较多\",{\"1\":{\"24\":1}}],[\"工厂方法模式的优点是灵活性\",{\"1\":{\"24\":1}}],[\"工厂方法模式需要定义抽象工厂类\",{\"1\":{\"24\":1}}],[\"工厂方法模式将产品对象的创建过程封装在工厂类中\",{\"1\":{\"24\":1}}],[\"工厂方法模式将对象的创建与使用分离\",{\"1\":{\"24\":3}}],[\"工厂方法模式允许添加新的工厂类和产品类\",{\"1\":{\"24\":1}}],[\"工厂方法模式是一种创建型设计模式\",{\"1\":{\"24\":2}}],[\"工厂方法模式\",{\"0\":{\"24\":1},\"1\":{\"25\":1}}],[\"|\",{\"1\":{\"140\":3}}],[\"||\",{\"1\":{\"32\":1}}],[\"querying\",{\"1\":{\"140\":1}}],[\"$\",{\"1\":{\"140\":2}}],[\"$8\",{\"1\":{\"135\":1}}],[\"$4\",{\"1\":{\"135\":1}}],[\"偏移为\",{\"1\":{\"135\":2}}],[\"指向一个虚构的数组的第二个元素\",{\"1\":{\"135\":1}}],[\"指令介绍\",{\"0\":{\"88\":1}}],[\"取得数组第二个元素的地址\",{\"1\":{\"135\":1}}],[\"取得数组的第二个元素\",{\"1\":{\"135\":1}}],[\"取消global级别的代理配置后\",{\"1\":{\"92\":1}}],[\"取消代理\",{\"0\":{\"90\":1}}],[\"转换为指向类型\",{\"1\":{\"135\":2}}],[\"整个表达式的目的是计算一个指向类型\",{\"1\":{\"135\":1}}],[\"整个表达式被强制转换为\",{\"1\":{\"134\":1}}],[\"整体层次结构的场景\",{\"1\":{\"32\":1}}],[\"整体层次结构\",{\"1\":{\"32\":1}}],[\"整体\",{\"1\":{\"32\":1}}],[\"计算出第一个元素之后的地址\",{\"1\":{\"134\":1}}],[\"示例用法\",{\"1\":{\"134\":1}}],[\"示例代码\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"比特\",{\"1\":{\"134\":1}}],[\"比如我今天以10\",{\"1\":{\"108\":1}}],[\"比如wsgi\",{\"1\":{\"22\":1}}],[\"比如django或者spring\",{\"1\":{\"22\":1}}],[\"库提供的函数\",{\"1\":{\"133\":1}}],[\"虽然使用extern可以模拟类和对象的概念\",{\"1\":{\"129\":1}}],[\"虽然可能有反调\",{\"1\":{\"102\":1}}],[\"运算符的一种可能的简化实现\",{\"1\":{\"134\":1}}],[\"运算符在编译时计算\",{\"1\":{\"133\":1}}],[\"运行结果图\",{\"1\":{\"129\":1}}],[\"运行结果\",{\"1\":{\"129\":1}}],[\"运动模式\",{\"1\":{\"45\":3}}],[\"首先\",{\"1\":{\"129\":1}}],[\"首先理解声明和定义\",{\"1\":{\"127\":1}}],[\"x\",{\"1\":{\"128\":1}}],[\"变量声明\",{\"1\":{\"128\":1}}],[\"变速箱\",{\"1\":{\"41\":3}}],[\"连接\",{\"1\":{\"162\":1}}],[\"连接器和内部行为\",{\"1\":{\"160\":1}}],[\"连接原则\",{\"0\":{\"152\":1}}],[\"连接起来创建一个新的字符串对象\",{\"1\":{\"122\":1}}],[\"连接远程分支\",{\"1\":{\"4\":1}}],[\"直接修改现有对象\",{\"1\":{\"122\":1}}],[\"直到有一个对象处理它为止\",{\"1\":{\"38\":1}}],[\"直到真正需要时才进行创建\",{\"1\":{\"36\":1}}],[\"附加到现有字符串s上来修改现有字符串\",{\"1\":{\"122\":2}}],[\"编译这些文件并运行程序\",{\"1\":{\"129\":1}}],[\"编译器无法区分该语句是成员变量声明还是成员函数声明\",{\"1\":{\"118\":1}}],[\"编程语言\",{\"2\":{\"119\":1,\"124\":1,\"130\":1,\"136\":1,\"143\":1,\"149\":1}}],[\"错误原因是\",{\"1\":{\"118\":1}}],[\"快快止损\",{\"1\":{\"114\":1}}],[\"似乎还没有什么其他方法\",{\"1\":{\"114\":1}}],[\"涉及一个很重要的数学概念\",{\"1\":{\"114\":1}}],[\"正常\",{\"1\":{\"114\":2}}],[\"正确地预见未来的需求\",{\"1\":{\"103\":1}}],[\"陶冶性情的场所\",{\"1\":{\"113\":1}}],[\"成功不是达到目的\",{\"1\":{\"113\":1}}],[\"成功的投资必须基于对今天和未来所发生的事件对股价的可能影响做理性判断\",{\"1\":{\"110\":1}}],[\"成功的投资者绝不幻想\",{\"1\":{\"103\":1}}],[\"成功的秘诀不外乎是\",{\"1\":{\"103\":1}}],[\"成功的要素\",{\"0\":{\"103\":1}}],[\"两者没有区别\",{\"1\":{\"112\":1}}],[\"两种类型\",{\"1\":{\"56\":1}}],[\"任何持有的股票都应有超过50\",{\"1\":{\"114\":1}}],[\"任何有输的可能的行为都是赌\",{\"1\":{\"112\":1}}],[\"任一节点可在任一时刻主动发送\",{\"1\":{\"55\":1}}],[\"懂了\",{\"1\":{\"112\":1}}],[\"都让我自己觉得自己\",{\"1\":{\"112\":1}}],[\"都要小心\",{\"1\":{\"109\":1}}],[\"体验风险阶段\",{\"1\":{\"112\":1}}],[\"炒手访谈\",{\"0\":{\"112\":1}}],[\"炒股是概率的游戏\",{\"1\":{\"102\":1}}],[\"炒股的最基本信条是在任何时候\",{\"1\":{\"103\":1}}],[\"炒股的诀窍便是在牛市中全力投入\",{\"1\":{\"102\":1}}],[\"炒股的技能太活了\",{\"1\":{\"96\":1}}],[\"炒股的智慧\",{\"0\":{\"95\":1},\"1\":{\"95\":1},\"2\":{\"116\":1}}],[\"投入其中\",{\"1\":{\"111\":1}}],[\"做法就是认清其假象\",{\"1\":{\"111\":1}}],[\"做短线时例外\",{\"1\":{\"101\":1}}],[\"民众相信自己在模仿成功人士\",{\"1\":{\"111\":1}}],[\"依赖\",{\"1\":{\"111\":1}}],[\"依赖倒置原则\",{\"1\":{\"22\":1}}],[\"权威\",{\"1\":{\"111\":1}}],[\"家\",{\"1\":{\"111\":1}}],[\"背书\",{\"1\":{\"111\":1}}],[\"得到一个指向类型\",{\"1\":{\"135\":2}}],[\"得到多少\",{\"1\":{\"110\":1}}],[\"得是好主意\",{\"1\":{\"111\":1}}],[\"觉\",{\"1\":{\"111\":1}}],[\"必定带来滚雪球效应\",{\"1\":{\"111\":1}}],[\"必须定义应用程序端口接口\",{\"1\":{\"165\":1}}],[\"必须具有耐心和自制力\",{\"1\":{\"103\":1}}],[\"必须强调\",{\"1\":{\"102\":1}}],[\"出游资\",{\"1\":{\"111\":1}}],[\"创造\",{\"1\":{\"111\":1}}],[\"创建虚拟环境\",{\"1\":{\"147\":1}}],[\"创建观察者对象\",{\"1\":{\"43\":1}}],[\"创建和恢复备忘录需要额外的计算开销\",{\"1\":{\"42\":1}}],[\"创建备忘录并保存当前状态\",{\"1\":{\"42\":1}}],[\"创建备忘录\",{\"1\":{\"42\":1}}],[\"创建同事类对象并设置中介者\",{\"1\":{\"41\":1}}],[\"创建中介者\",{\"1\":{\"41\":1}}],[\"创建迭代器\",{\"1\":{\"40\":1}}],[\"创建调用者对象\",{\"1\":{\"39\":1}}],[\"创建接收者对象\",{\"1\":{\"39\":1}}],[\"创建真实汽车对象\",{\"1\":{\"36\":1}}],[\"创建代理对象\",{\"1\":{\"36\":1}}],[\"创建享元工厂\",{\"1\":{\"35\":2}}],[\"创建汽车\",{\"1\":{\"44\":1,\"45\":1}}],[\"创建汽车集合的迭代器\",{\"1\":{\"40\":1}}],[\"创建汽车集合\",{\"1\":{\"40\":2}}],[\"创建汽车经销商对象\",{\"1\":{\"34\":2}}],[\"创建汽车工厂对象\",{\"1\":{\"34\":1}}],[\"创建汽车装饰对象\",{\"1\":{\"33\":2}}],[\"创建汽车对象\",{\"1\":{\"33\":2,\"34\":1,\"40\":1,\"42\":1,\"43\":1}}],[\"创建了多个叶子节点\",{\"1\":{\"32\":1}}],[\"创建组合节点\",{\"1\":{\"32\":1}}],[\"创建叶子节点\",{\"1\":{\"32\":1}}],[\"创建扩展抽象部分对象\",{\"1\":{\"31\":1}}],[\"创建具体命令对象\",{\"1\":{\"39\":1}}],[\"创建具体命令对象并设置其接收者\",{\"1\":{\"39\":2}}],[\"创建具体处理者对象\",{\"1\":{\"38\":1}}],[\"创建具体的检查者对象\",{\"1\":{\"38\":1}}],[\"创建具体实现部分对象\",{\"1\":{\"31\":1}}],[\"创建具体生成器\",{\"1\":{\"26\":1}}],[\"创建适配器对象\",{\"1\":{\"30\":1}}],[\"创建传统燃油汽车对象\",{\"1\":{\"30\":1}}],[\"创建复杂对象\",{\"1\":{\"27\":1}}],[\"创建原型汽车\",{\"1\":{\"27\":1}}],[\"创建新的汽车实例\",{\"1\":{\"27\":1}}],[\"创建主管\",{\"1\":{\"26\":2}}],[\"创建掀背车\",{\"1\":{\"24\":2,\"25\":2}}],[\"创建\",{\"0\":{\"163\":1},\"1\":{\"24\":2,\"25\":2}}],[\"创建轿车\",{\"1\":{\"24\":2,\"25\":2}}],[\"创建一个包含其当前内部状态的备忘录对象\",{\"1\":{\"42\":1}}],[\"创建一个\",{\"1\":{\"22\":1}}],[\"创建型模式包括工厂方法模式\",{\"1\":{\"20\":1}}],[\"创建型模式提供了创建对象的机制\",{\"1\":{\"20\":1}}],[\"创建型模式\",{\"1\":{\"20\":2}}],[\"创建型模式主要用于创建对象\",{\"1\":{\"20\":1}}],[\"创建本地分支\",{\"1\":{\"4\":2}}],[\"社会游资甚多\",{\"1\":{\"111\":1}}],[\"带来巨额的财富\",{\"1\":{\"111\":1}}],[\"概率\",{\"1\":{\"114\":1}}],[\"概念或产品\",{\"1\":{\"111\":1}}],[\"概述\",{\"2\":{\"82\":1}}],[\"吸引更多的股民加入\",{\"1\":{\"111\":1}}],[\"促使投资大众开始投入\",{\"1\":{\"111\":1}}],[\"促进团队协作\",{\"1\":{\"11\":1}}],[\"气球胀的时间比常人想像得更久\",{\"1\":{\"111\":1}}],[\"气球胀到一定地步\",{\"1\":{\"111\":1}}],[\"气球后面一定有一动人的故事\",{\"1\":{\"111\":1}}],[\"气球吹胀的初期\",{\"1\":{\"111\":1}}],[\"到了晚期的特征之一\",{\"1\":{\"111\":1}}],[\"疯\",{\"1\":{\"111\":2}}],[\"骗案层出不穷是所有\",{\"1\":{\"111\":1}}],[\"随即常常来一次亏大钱\",{\"1\":{\"112\":1}}],[\"随后便嘲笑他们的短视\",{\"1\":{\"111\":1}}],[\"随着经验的增加\",{\"1\":{\"109\":1}}],[\"随着同事类的增加\",{\"1\":{\"41\":1}}],[\"随着软件开发技术的不断发展\",{\"1\":{\"10\":1}}],[\"开心的游戏玩久些\",{\"1\":{\"113\":1}}],[\"开始还有人听听他们的警钟\",{\"1\":{\"111\":1}}],[\"开闭原则\",{\"1\":{\"22\":1}}],[\"开闭原则的基础\",{\"1\":{\"14\":1}}],[\"长期抗战\",{\"1\":{\"110\":1}}],[\"热爱你选择的行业\",{\"1\":{\"110\":1}}],[\"独立的判断能力\",{\"1\":{\"110\":1}}],[\"独立思维和自信\",{\"1\":{\"109\":1}}],[\"评价自己\",{\"1\":{\"110\":1}}],[\"诚实地面对自己\",{\"1\":{\"110\":1}}],[\"忽略对你不利的信息\",{\"1\":{\"110\":1}}],[\"机会的贪婪常使你在股票的最高点入股\",{\"1\":{\"110\":1}}],[\"赚大钱\",{\"1\":{\"110\":1}}],[\"未随大流\",{\"1\":{\"110\":1}}],[\"严格按照这个计划实行\",{\"1\":{\"110\":1}}],[\"获得炒股的基本知识\",{\"1\":{\"110\":1}}],[\"获取汽车享元\",{\"1\":{\"35\":2}}],[\"获取单例实例\",{\"1\":{\"28\":1}}],[\"获取单例实例的方法\",{\"1\":{\"28\":1}}],[\"价格的变动不是随机的\",{\"1\":{\"109\":1}}],[\"尊重自己的直觉\",{\"1\":{\"109\":1}}],[\"耐心\",{\"1\":{\"109\":1}}],[\"耐心地等待盈利的时刻\",{\"1\":{\"103\":1}}],[\"耐心地观察市场\",{\"1\":{\"101\":1}}],[\"风险控制\",{\"1\":{\"109\":1}}],[\"找一个方法\",{\"1\":{\"109\":1}}],[\"找出公司的所有资料\",{\"1\":{\"109\":1}}],[\"胜算\",{\"1\":{\"109\":1}}],[\"检查sys\",{\"1\":{\"146\":1}}],[\"检查你买卖的动机\",{\"1\":{\"109\":1}}],[\"检查的责任链\",{\"1\":{\"38\":1}}],[\"确定你对炒手生涯感兴趣\",{\"1\":{\"109\":1}}],[\"确保你已经安装了指定版本的python解释器\",{\"1\":{\"147\":1}}],[\"确保在重写方法时与超类中的版本兼容是很重要的\",{\"1\":{\"22\":1}}],[\"确保新行为与基类中的版本兼容意味着你需要保持方法的签名\",{\"1\":{\"22\":1}}],[\"所有的疯狂都有梦醒时分\",{\"1\":{\"111\":1}}],[\"所有的专业炒手都不在乎赚钱或亏钱\",{\"1\":{\"109\":1}}],[\"所见到的大多是玩股的\",{\"1\":{\"110\":1}}],[\"所以\",{\"1\":{\"110\":1}}],[\"所以很不愿意多谈\",{\"1\":{\"109\":1}}],[\"所以入场点的获胜概率应大过失败概率\",{\"1\":{\"105\":1}}],[\"所以我久赌必赢\",{\"1\":{\"104\":1}}],[\"所以成功的机会不大\",{\"1\":{\"96\":1}}],[\"所以代理会输出\",{\"1\":{\"36\":1}}],[\"所以你可在一切需要服务对象的代码中使用代理\",{\"1\":{\"36\":1}}],[\"坐着不动\",{\"1\":{\"109\":1}}],[\"专\",{\"1\":{\"111\":1}}],[\"专家\",{\"1\":{\"111\":1}}],[\"专家推荐\",{\"1\":{\"105\":1}}],[\"专心于你了解最多的行业\",{\"1\":{\"109\":1}}],[\"永远持有一部分现金\",{\"1\":{\"109\":1}}],[\"9\",{\"1\":{\"109\":2}}],[\"研究税务情况\",{\"1\":{\"109\":1}}],[\"看看有什么新的发展可能改变你的想法\",{\"1\":{\"109\":1}}],[\"看不见\",{\"1\":{\"103\":1}}],[\"定期有计划地检查你的投资\",{\"1\":{\"109\":1}}],[\"定义runnables\",{\"0\":{\"167\":1}}],[\"定义是为变量分配内存空间或者实现函数本体\",{\"1\":{\"127\":1}}],[\"定义策略接口\",{\"1\":{\"45\":1}}],[\"定义所有支持的算法的公共接口\",{\"1\":{\"45\":1}}],[\"定义状态接口\",{\"1\":{\"44\":1}}],[\"定义主题接口\",{\"1\":{\"43\":1}}],[\"定义观察者接口\",{\"1\":{\"43\":1}}],[\"定义在接收到通知时的行为\",{\"1\":{\"43\":1}}],[\"定义一个接口\",{\"1\":{\"44\":1}}],[\"定义一个接口用于与各同事对象之间的通信\",{\"1\":{\"41\":1}}],[\"定义一个更新接口\",{\"1\":{\"43\":1}}],[\"定义备忘录结构体\",{\"1\":{\"42\":1}}],[\"定义具体中介者\",{\"1\":{\"41\":1}}],[\"定义具体同事类\",{\"1\":{\"41\":2}}],[\"定义具体命令\",{\"1\":{\"39\":2}}],[\"定义同事类接口\",{\"1\":{\"41\":1}}],[\"定义中介者接口\",{\"1\":{\"41\":1}}],[\"定义创建迭代器对象的接口\",{\"1\":{\"40\":1}}],[\"定义访问和遍历元素的接口\",{\"1\":{\"40\":1}}],[\"定义调用者\",{\"1\":{\"39\":1}}],[\"定义接收者\",{\"1\":{\"39\":1}}],[\"定义命令接口\",{\"1\":{\"39\":1}}],[\"定义执行命令的接口\",{\"1\":{\"39\":1}}],[\"定义处理请求的接口\",{\"1\":{\"38\":1}}],[\"定义汽车状态结构体\",{\"1\":{\"42\":1}}],[\"定义汽车品牌枚举\",{\"1\":{\"35\":1}}],[\"定义汽车颜色枚举\",{\"1\":{\"35\":1}}],[\"定义汽车经销商结构体\",{\"1\":{\"34\":1}}],[\"定义汽车工厂结构体\",{\"1\":{\"34\":1}}],[\"定义汽车装饰函数\",{\"1\":{\"33\":1}}],[\"定义汽车装饰结构体\",{\"1\":{\"33\":1}}],[\"定义汽车结构体\",{\"1\":{\"33\":1,\"34\":1,\"35\":1,\"42\":1,\"44\":1,\"45\":1}}],[\"定义汽车类型枚举\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":1}}],[\"定义组合节点\",{\"1\":{\"32\":1}}],[\"定义组件接口\",{\"1\":{\"32\":1}}],[\"定义叶子节点\",{\"1\":{\"32\":1}}],[\"定义对象的接口\",{\"1\":{\"32\":1}}],[\"定义实现接口\",{\"1\":{\"31\":1}}],[\"定义高层接口\",{\"1\":{\"31\":1}}],[\"定义适配器结构体\",{\"1\":{\"30\":1}}],[\"定义传统燃油汽车接口\",{\"1\":{\"30\":1}}],[\"定义电动汽车接口\",{\"1\":{\"30\":1}}],[\"定义了通信速率为\",{\"1\":{\"54\":2}}],[\"定义了对每个具体元素类\",{\"1\":{\"47\":1}}],[\"定义了汽车制造过程的骨架\",{\"1\":{\"46\":1}}],[\"定义了汽车的状态接口\",{\"1\":{\"44\":1}}],[\"定义了算法的骨架\",{\"1\":{\"46\":1}}],[\"定义了\",{\"1\":{\"45\":1}}],[\"定义了在接收到通知时的行为\",{\"1\":{\"43\":1}}],[\"定义了更新方法\",{\"1\":{\"43\":1}}],[\"定义了注册\",{\"1\":{\"43\":1}}],[\"定义了遍历方法\",{\"1\":{\"40\":1}}],[\"定义了执行命令和撤销命令的接口\",{\"1\":{\"39\":1}}],[\"定义了处理请求的接口inspect\",{\"1\":{\"38\":1}}],[\"定义了一个接收访问者对象的\",{\"1\":{\"47\":1}}],[\"定义了一个算法的骨架\",{\"1\":{\"46\":1}}],[\"定义了一个通知方法\",{\"1\":{\"41\":1}}],[\"定义了一个具体的对象\",{\"1\":{\"33\":1}}],[\"定义了一个对象接口\",{\"1\":{\"33\":1}}],[\"定义了一个创建产品的接口\",{\"1\":{\"24\":1}}],[\"定义了统一的接口\",{\"1\":{\"32\":1}}],[\"定义了sedan和suv\",{\"1\":{\"31\":1}}],[\"定义了car\",{\"1\":{\"31\":1}}],[\"定义了carsystem接口\",{\"1\":{\"31\":1}}],[\"定义了androidauto和applecarplay\",{\"1\":{\"31\":1}}],[\"定义了产品的共性\",{\"1\":{\"24\":1,\"25\":1}}],[\"定义了应用程序的整体结构和行为\",{\"1\":{\"22\":1}}],[\"定义\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"越快止损越好\",{\"1\":{\"109\":1}}],[\"越小越好\",{\"1\":{\"108\":1}}],[\"学习快速干净地止损\",{\"1\":{\"109\":1}}],[\"竞争者\",{\"1\":{\"109\":1}}],[\"堂\",{\"1\":{\"109\":1}}],[\"美容师还是餐馆跑\",{\"1\":{\"109\":1}}],[\"内幕消息\",{\"1\":{\"109\":1}}],[\"内存消耗\",{\"1\":{\"27\":1,\"42\":1}}],[\"事件的改变又反过来改变想法\",{\"1\":{\"109\":1}}],[\"事件处理系统\",{\"1\":{\"43\":1}}],[\"反馈理论\",{\"1\":{\"109\":1}}],[\"反之如果大多数股民不看好股市\",{\"1\":{\"103\":1}}],[\"索罗斯认为这一理论根本就是错的\",{\"1\":{\"109\":1}}],[\"索罗斯建议投资研究越简化越好\",{\"1\":{\"109\":1}}],[\"市场是愚蠢的\",{\"1\":{\"109\":1}}],[\"市场从来不会错\",{\"1\":{\"109\":1}}],[\"离开市场\",{\"1\":{\"109\":1}}],[\"离场\",{\"1\":{\"109\":1}}],[\"他自己提出了\",{\"1\":{\"109\":1}}],[\"他自己从不在经济研究上花大量的时间\",{\"1\":{\"109\":1}}],[\"他列出下面几点作为选择公司的参考\",{\"1\":{\"109\":1}}],[\"他相信以下的六点素质是必备的\",{\"1\":{\"109\":1}}],[\"他们指出这个泡沫会破碎\",{\"1\":{\"111\":1}}],[\"他们知道利润会随之而来\",{\"1\":{\"109\":1}}],[\"他们在乎在正确时间做正确的事\",{\"1\":{\"109\":1}}],[\"他们想买进的股票要么静悄悄地\",{\"1\":{\"105\":1}}],[\"他们也知道春天是播种的时机\",{\"1\":{\"103\":1}}],[\"他们都已经脱手出场\",{\"1\":{\"103\":1}}],[\"他们有个共性\",{\"1\":{\"103\":1}}],[\"他们太聪明\",{\"1\":{\"96\":1}}],[\"跟着股市走\",{\"1\":{\"109\":1}}],[\"知道\",{\"1\":{\"109\":1}}],[\"知易行难\",{\"1\":{\"103\":1}}],[\"另寻机会\",{\"1\":{\"109\":1}}],[\"另一方面\",{\"1\":{\"122\":1}}],[\"另一方面是报复赌场\",{\"1\":{\"96\":1}}],[\"另一个是未来盈利\",{\"1\":{\"102\":1}}],[\"纸面有利润了\",{\"1\":{\"109\":1}}],[\"纸面上没有利润的话不要加码\",{\"1\":{\"109\":1}}],[\"别把痛苦带回家\",{\"1\":{\"113\":1}}],[\"别想着在股市赚钱\",{\"1\":{\"113\":1}}],[\"别进第二手\",{\"1\":{\"109\":1}}],[\"别买太多股票\",{\"1\":{\"109\":1}}],[\"别买任何股票\",{\"1\":{\"102\":1}}],[\"别希望自己每次都正确\",{\"1\":{\"109\":1}}],[\"别试着在最低点买股\",{\"1\":{\"109\":1}}],[\"别爱上任何股票\",{\"1\":{\"109\":1}}],[\"别将股市当成是赚钱的地方\",{\"1\":{\"113\":1}}],[\"别将\",{\"1\":{\"109\":1}}],[\"别跟朋友走\",{\"1\":{\"109\":1}}],[\"别让利润变成亏损\",{\"1\":{\"109\":1}}],[\"别频繁交易\",{\"1\":{\"109\":1}}],[\"忘掉你的入场价\",{\"1\":{\"109\":1}}],[\"逐渐将留意的股票增加到十至十五只\",{\"1\":{\"109\":1}}],[\"止损\",{\"1\":{\"109\":3}}],[\"时\",{\"1\":{\"122\":2}}],[\"时刻牢记\",{\"1\":{\"109\":1}}],[\"时间一久\",{\"1\":{\"103\":1}}],[\"拿了再说\",{\"1\":{\"108\":1}}],[\"遇有暴利\",{\"1\":{\"108\":1}}],[\"遇到报错\",{\"1\":{\"92\":1}}],[\"今天的最高价是11元\",{\"1\":{\"108\":1}}],[\"今信息安全服务\",{\"1\":{\"72\":1}}],[\"亏损是游戏的一部分\",{\"1\":{\"109\":1}}],[\"亏小钱\",{\"1\":{\"108\":1}}],[\"亏钱时\",{\"1\":{\"96\":1}}],[\"寻找临界点的过程便是你的学股过程\",{\"1\":{\"107\":1}}],[\"临界点\",{\"1\":{\"107\":1}}],[\"卖股票的点也是\",{\"1\":{\"107\":1}}],[\"留意市场提供的危险信号\",{\"1\":{\"106\":1}}],[\"留意每天的交易总量\",{\"1\":{\"102\":1}}],[\"训练自己的耐性\",{\"1\":{\"106\":1}}],[\"按规矩做\",{\"1\":{\"114\":1}}],[\"按这些游戏规则\",{\"1\":{\"113\":1}}],[\"按自己定好的规则买进卖出\",{\"1\":{\"106\":1}}],[\"按原来的预想\",{\"1\":{\"103\":1}}],[\"形成自己的风格模式\",{\"1\":{\"106\":1}}],[\"形成中间层次的组件\",{\"1\":{\"22\":1}}],[\"怎样找最有潜力的股票\",{\"1\":{\"106\":1}}],[\"龙头\",{\"1\":{\"106\":1}}],[\"选好\",{\"1\":{\"106\":1}}],[\"选择股票的步骤\",{\"0\":{\"106\":1}}],[\"选择临界点\",{\"1\":{\"105\":1}}],[\"选择太多\",{\"1\":{\"96\":1}}],[\"选择合适的代理模式\",{\"1\":{\"36\":1}}],[\"牛市\",{\"1\":{\"106\":1}}],[\"牛劲\",{\"1\":{\"106\":4}}],[\"哪些类别的股票\",{\"1\":{\"106\":1}}],[\"安装\",{\"0\":{\"139\":1}}],[\"安坐不\",{\"1\":{\"106\":1}}],[\"安全问题\",{\"1\":{\"27\":1}}],[\"什么是正确的心态\",{\"1\":{\"110\":1}}],[\"什么是大市的走向\",{\"1\":{\"106\":1}}],[\"什韦茨\",{\"1\":{\"9\":1}}],[\"讲白了\",{\"1\":{\"105\":1}}],[\"突破阻力线才可以认为股票的运动进入新的阶段\",{\"1\":{\"105\":1}}],[\"突破阻力线的现象并没有很大意义\",{\"1\":{\"105\":1}}],[\"突出了模板方法在实际项目中的应用\",{\"1\":{\"46\":1}}],[\"除非你撒谎\",{\"1\":{\"109\":1}}],[\"除非你能将炒股当成全时工作\",{\"1\":{\"109\":1}}],[\"除非大户真的认为该股有潜力\",{\"1\":{\"105\":1}}],[\"除了熬和交学费外\",{\"1\":{\"114\":1}}],[\"除了股票在升的理由之外\",{\"1\":{\"101\":1}}],[\"除了将原始对象的数据复制到克隆体中之外\",{\"1\":{\"27\":1}}],[\"短线操作的资金都是热钱\",{\"1\":{\"105\":1}}],[\"短帧结构\",{\"1\":{\"55\":1}}],[\"作为买的理由\",{\"1\":{\"105\":1}}],[\"作为买入的理由\",{\"1\":{\"105\":1}}],[\"好的交易方法应毫不费力\",{\"1\":{\"109\":1}}],[\"好消息\",{\"1\":{\"105\":1}}],[\"好莱坞原则是一种设计原则\",{\"1\":{\"22\":1}}],[\"好莱坞原则\",{\"1\":{\"22\":2}}],[\"绝不要在跌势时入市\",{\"1\":{\"105\":1}}],[\"准备开始升势的时候买入\",{\"1\":{\"105\":1}}],[\"准备玩全世界最刺激的游戏并要成为专家时\",{\"1\":{\"96\":1}}],[\"办\",{\"1\":{\"105\":1}}],[\"切记照\",{\"1\":{\"105\":1}}],[\"切换到启动状态\",{\"1\":{\"44\":1}}],[\"切换到停止状态\",{\"1\":{\"44\":2}}],[\"切换到行驶状态\",{\"1\":{\"44\":1}}],[\"搞清楚你最多愿亏多少钱\",{\"1\":{\"105\":1}}],[\"先定好止损点\",{\"1\":{\"105\":1}}],[\"先搞清游戏的规则\",{\"1\":{\"96\":1}}],[\"第八\",{\"1\":{\"105\":1}}],[\"第七\",{\"1\":{\"105\":1}}],[\"第六\",{\"1\":{\"105\":1,\"109\":1}}],[\"第五\",{\"1\":{\"105\":1,\"109\":1}}],[\"第四\",{\"1\":{\"105\":1,\"109\":1}}],[\"第三点怎么办\",{\"1\":{\"106\":1}}],[\"第三\",{\"1\":{\"105\":1,\"106\":1,\"109\":1,\"110\":1}}],[\"第三种是can收发器也集成到微控制器中\",{\"1\":{\"57\":1}}],[\"第二\",{\"1\":{\"105\":1,\"106\":1,\"109\":2,\"110\":1}}],[\"第一损失往往是代价最小的损失\",{\"1\":{\"113\":1}}],[\"第一次入场后\",{\"1\":{\"109\":1}}],[\"第一\",{\"1\":{\"105\":1,\"106\":1,\"109\":2,\"110\":1}}],[\"阻力线和支撑线的操作\",{\"1\":{\"104\":1}}],[\"假如这是一个正常的升势\",{\"1\":{\"104\":1}}],[\"假设一个字节等于\",{\"1\":{\"134\":1}}],[\"假设我们要设计一个汽车制造的程序\",{\"1\":{\"46\":1}}],[\"假设我们要设计一个汽车应用程序\",{\"1\":{\"31\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1}}],[\"假设我们正在设计一个图形界面库\",{\"1\":{\"22\":1}}],[\"假设你正在开发一个web应用程序\",{\"1\":{\"22\":1}}],[\"假设有一个动物园程序\",{\"1\":{\"22\":1}}],[\"操作技巧\",{\"1\":{\"104\":1}}],[\"操作系统\",{\"1\":{\"72\":1}}],[\"说到底\",{\"1\":{\"104\":1}}],[\"说的全面些\",{\"1\":{\"96\":1}}],[\"技术分析及大市走向\",{\"1\":{\"104\":1}}],[\"技术分析是我买进卖出的主要参考\",{\"1\":{\"102\":1}}],[\"买什么股票有同样的分量\",{\"1\":{\"105\":1}}],[\"买股的时机固然重要\",{\"1\":{\"105\":1}}],[\"买股票的依据主要是三点\",{\"1\":{\"104\":1}}],[\"买入的要点归纳\",{\"0\":{\"105\":1}}],[\"买点的最最重要点是选择止损点\",{\"1\":{\"104\":1}}],[\"之说的\",{\"1\":{\"103\":1}}],[\"之间传输数据的线\",{\"1\":{\"54\":1}}],[\"之间的交互\",{\"1\":{\"41\":1}}],[\"合理化\",{\"1\":{\"103\":1}}],[\"合群\",{\"1\":{\"103\":1}}],[\"预想在什么情况下今天的情形会停滞甚或产生逆转\",{\"1\":{\"103\":1}}],[\"往往不是没有耐心\",{\"1\":{\"103\":1}}],[\"苦工\",{\"1\":{\"103\":1}}],[\"何时卖股票\",{\"0\":{\"107\":1}}],[\"何为大多数股民看好大市或大多数股民不看好大市是很难计量的\",{\"1\":{\"103\":1}}],[\"何以一般股民败多胜少\",{\"1\":{\"96\":1}}],[\"低点出市\",{\"1\":{\"103\":1}}],[\"钱亏掉不可怕\",{\"1\":{\"103\":1}}],[\"再加码\",{\"1\":{\"109\":1}}],[\"再忍一忍\",{\"1\":{\"103\":1}}],[\"再忍下去的毅力\",{\"1\":{\"103\":1}}],[\"再次改变汽车状态\",{\"1\":{\"43\":1}}],[\"再次模拟请求\",{\"1\":{\"36\":1}}],[\"缺少锲而不舍的精神\",{\"1\":{\"103\":1}}],[\"缺点是可能会增加系统的复杂度和降低系统的性能\",{\"1\":{\"34\":1}}],[\"缺点是增加了代码的复杂度和降低了代码的性能\",{\"1\":{\"30\":1}}],[\"缺点是增加了系统的复杂度和可能会导致类的数量过多\",{\"1\":{\"24\":1}}],[\"缺点是违反单一职责原则\",{\"1\":{\"28\":1}}],[\"缺点是内存消耗\",{\"1\":{\"27\":1}}],[\"缺点是复杂性和性能问题\",{\"1\":{\"26\":1}}],[\"缺点\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"受过良好教育但成日感叹怀才不遇的人\",{\"1\":{\"103\":1}}],[\"受干扰概率低\",{\"1\":{\"55\":1}}],[\"白日梦不是欲望是梦\",{\"1\":{\"103\":1}}],[\"欲望必须由努力做基础\",{\"1\":{\"103\":1}}],[\"会错的只有人自己\",{\"1\":{\"103\":1}}],[\"会导致类的数量增加\",{\"1\":{\"45\":1}}],[\"华尔街有个说法\",{\"1\":{\"113\":1}}],[\"华尔街有过调查\",{\"1\":{\"101\":1}}],[\"华尔街家训\",{\"0\":{\"109\":1}}],[\"华尔街曾经对一般的股民做过调查\",{\"1\":{\"103\":1}}],[\"华尔街将这条线称为\",{\"1\":{\"103\":1}}],[\"完全决定于你自己的经验\",{\"1\":{\"103\":1}}],[\"完成对具体元素的操作\",{\"1\":{\"47\":1}}],[\"完成了制造过程中的具体步骤\",{\"1\":{\"46\":1}}],[\"完成算法中特定步骤的具体实现\",{\"1\":{\"46\":1}}],[\"至于你怎么知道有60\",{\"1\":{\"103\":1}}],[\"只是利用了指针运算的语法\",{\"1\":{\"135\":1}}],[\"只要你\",{\"1\":{\"164\":1}}],[\"只要你自己喜欢\",{\"1\":{\"112\":1}}],[\"只要条件允许\",{\"1\":{\"108\":1}}],[\"只要股票运动正常\",{\"1\":{\"103\":1}}],[\"只有在交易量增加的前提下\",{\"1\":{\"105\":1}}],[\"只需要修改外观类中的汽车工厂对象\",{\"1\":{\"34\":1}}],[\"只需要创建新的生成器类即可\",{\"1\":{\"26\":1}}],[\"只需要创建新的具体工厂类即可\",{\"1\":{\"25\":2}}],[\"只需要通过生成器类提供的方法来获取产品即可\",{\"1\":{\"26\":1}}],[\"只需要通过抽象工厂类提供的方法来获取产品即可\",{\"1\":{\"25\":2}}],[\"只需要在新的工厂类中实现createshape方法\",{\"1\":{\"24\":1}}],[\"只需要调用抽象工厂函数即可创建所需类型的汽车对象\",{\"1\":{\"24\":1}}],[\"摸不着的股票使一般人的判断力走了样\",{\"1\":{\"103\":1}}],[\"把钱存银行不是赌\",{\"1\":{\"112\":1}}],[\"把炒股当成业余消遣\",{\"1\":{\"110\":1}}],[\"把\",{\"1\":{\"103\":1}}],[\"把图2\",{\"1\":{\"102\":1}}],[\"追求卓越\",{\"1\":{\"103\":1}}],[\"败而不倒\",{\"1\":{\"103\":1}}],[\"么投机的原理是什么呢\",{\"1\":{\"103\":1}}],[\"互联网公司属于信息社会的产业\",{\"1\":{\"102\":1}}],[\"综合指数有时会被几只大股票糊弄\",{\"1\":{\"102\":1}}],[\"综合看图\",{\"0\":{\"102\":1}}],[\"逆大潮流而动\",{\"1\":{\"102\":1}}],[\"判断大市走向是极其重要的\",{\"1\":{\"102\":1}}],[\"收市低收盘\",{\"1\":{\"102\":1}}],[\"马克思的政治经济学主要目的便是解决不断重复的资本广义经济周期对社会负面的影响\",{\"1\":{\"102\":1}}],[\"道氏理论特点指出这一点\",{\"1\":{\"102\":1}}],[\"便是好的买入点\",{\"1\":{\"104\":1}}],[\"便是不正常运动\",{\"1\":{\"102\":1}}],[\"便必须按兵不动\",{\"1\":{\"103\":1}}],[\"便反调不应该跌到阻力线之下\",{\"1\":{\"102\":1}}],[\"便于扩展\",{\"1\":{\"27\":1,\"32\":1}}],[\"平均线\",{\"1\":{\"101\":1}}],[\"平行继承体系\",{\"1\":{\"22\":1}}],[\"双肩图和头肩图\",{\"1\":{\"101\":1}}],[\"双绞线\",{\"1\":{\"55\":1}}],[\"支撑线和阻力线\",{\"1\":{\"101\":1,\"102\":1}}],[\"支持基于敏捷的开发过程\",{\"1\":{\"71\":1}}],[\"支持功能安全和信息安全\",{\"1\":{\"71\":1}}],[\"支持多任务并行处理\",{\"1\":{\"71\":1}}],[\"支持多种遍历方式\",{\"1\":{\"40\":1}}],[\"支持采用c++作为应用软件的编程语言\",{\"1\":{\"71\":1}}],[\"支持撤销操作\",{\"1\":{\"42\":1}}],[\"支持撤销和重做\",{\"1\":{\"39\":1}}],[\"支持不同的遍历方式\",{\"1\":{\"40\":1}}],[\"支持拓展\",{\"1\":{\"14\":1}}],[\"记住\",{\"1\":{\"109\":1}}],[\"记住这些要点及点点照办\",{\"1\":{\"105\":1}}],[\"记住你不可能每次正确\",{\"1\":{\"105\":1}}],[\"记住如果这是升势开始的话\",{\"1\":{\"102\":1}}],[\"记住股民买卖股票的真正原因\",{\"1\":{\"101\":1}}],[\"记录日志以及支持撤销和重做操作的场景\",{\"1\":{\"39\":1}}],[\"记录日志以及撤销操作\",{\"1\":{\"39\":1}}],[\"记录日志和事务操作\",{\"1\":{\"39\":1}}],[\"记录日志\",{\"1\":{\"36\":1}}],[\"跌时跌到惨不忍睹的原因了吧\",{\"1\":{\"101\":1}}],[\"现在\",{\"1\":{\"147\":1}}],[\"现在你能体会到为什么股票升时常常升得离谱\",{\"1\":{\"101\":1}}],[\"现金值\",{\"1\":{\"102\":1}}],[\"现金值法\",{\"1\":{\"102\":1}}],[\"现今流行的企业评估标尺如本利比\",{\"1\":{\"102\":1}}],[\"现代汽车越来越多地采用电子装置控制\",{\"1\":{\"53\":1}}],[\"要生成代码\",{\"1\":{\"169\":1}}],[\"要完全定义端口接口\",{\"1\":{\"165\":1}}],[\"要有自知之明\",{\"1\":{\"109\":1}}],[\"要有应用知识的毅力\",{\"1\":{\"103\":1}}],[\"要在投资领域成功\",{\"1\":{\"109\":1}}],[\"要甘于做孤独者\",{\"1\":{\"103\":1}}],[\"要么想法引起大众的恐慌性抛售\",{\"1\":{\"105\":1}}],[\"要么下一点\",{\"1\":{\"103\":1}}],[\"要么上一下\",{\"1\":{\"103\":1}}],[\"要得到股票的现金值需要2个假设\",{\"1\":{\"102\":1}}],[\"要确定大市的走向\",{\"1\":{\"102\":1}}],[\"要想学习养成对股票运动的感觉\",{\"1\":{\"101\":1}}],[\"要往上推\",{\"1\":{\"101\":1}}],[\"升\",{\"1\":{\"101\":2}}],[\"滚\",{\"1\":{\"101\":1}}],[\"影响投资者决定的最重要因素是对未来的预期\",{\"1\":{\"101\":1}}],[\"影响股票的三个因素\",{\"0\":{\"100\":1}}],[\"波谷也较上一波谷为低\",{\"1\":{\"101\":1}}],[\"典型的跌势图\",{\"1\":{\"101\":1}}],[\"交易量通常增大\",{\"1\":{\"102\":1}}],[\"交易量没有特别之处\",{\"1\":{\"101\":1}}],[\"交易量减少\",{\"1\":{\"101\":1}}],[\"交易量增加\",{\"1\":{\"101\":1}}],[\"请注意\",{\"1\":{\"135\":1}}],[\"请注意交易量的变化\",{\"1\":{\"101\":1}}],[\"请读者自己思考一下其中的原由\",{\"1\":{\"105\":1}}],[\"请读者切切牢记\",{\"1\":{\"104\":1}}],[\"请求的发送者和接收者需要解耦\",{\"1\":{\"39\":1}}],[\"公司回购自己的股票\",{\"1\":{\"100\":1}}],[\"品牌的价值\",{\"1\":{\"99\":1}}],[\"品牌等\",{\"1\":{\"35\":1}}],[\"固定资产值等等是用来评估工业社会企业的\",{\"1\":{\"102\":1}}],[\"固定资产\",{\"1\":{\"99\":1}}],[\"盈利的增长\",{\"1\":{\"100\":1}}],[\"盈利\",{\"1\":{\"99\":1}}],[\"营业收入\",{\"1\":{\"99\":1}}],[\"政府的产业政策\",{\"1\":{\"98\":1}}],[\"政治环境\",{\"1\":{\"98\":1}}],[\"80\",{\"1\":{\"103\":1}}],[\"8\",{\"1\":{\"98\":1,\"109\":2,\"134\":1,\"135\":5}}],[\"7版本\",{\"1\":{\"147\":1}}],[\"75元买进股票\",{\"1\":{\"108\":1}}],[\"7\",{\"0\":{\"169\":1},\"1\":{\"98\":1,\"109\":2}}],[\"6\",{\"0\":{\"168\":1},\"1\":{\"98\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1}}],[\"经济史的演绎从不基于真实的剧本\",{\"1\":{\"111\":1}}],[\"经济史是一部基于假象和谎言的连续剧\",{\"1\":{\"111\":1}}],[\"经济周期\",{\"1\":{\"98\":1}}],[\"经济模式\",{\"1\":{\"45\":1}}],[\"5\",{\"0\":{\"167\":1},\"1\":{\"98\":1,\"99\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"118\":1}}],[\"50天平均线来衡量中期走势\",{\"1\":{\"101\":1}}],[\"50\",{\"1\":{\"30\":1,\"42\":1,\"43\":1}}],[\"银根松紧\",{\"1\":{\"98\":1}}],[\"汇率\",{\"1\":{\"98\":1}}],[\"税收\",{\"1\":{\"98\":1}}],[\"利率\",{\"1\":{\"98\":1}}],[\"大钱只存在大势之内\",{\"1\":{\"109\":1}}],[\"大钱不存在于股票的日常小波动\",{\"1\":{\"109\":1}}],[\"大户的花招其实明显的很\",{\"1\":{\"105\":1}}],[\"大多数人注重于今天发生的一切并假设今天发生的一切会不断延续\",{\"1\":{\"103\":1}}],[\"大市不好时\",{\"1\":{\"102\":1}}],[\"大的政治动乱和经济震荡当然例外\",{\"1\":{\"99\":1}}],[\"大环境的变化是谈天的好材料\",{\"1\":{\"99\":1}}],[\"大环境\",{\"0\":{\"98\":1}}],[\"大话设计模式\",{\"1\":{\"48\":1}}],[\"环境\",{\"0\":{\"97\":1}}],[\"报错\",{\"0\":{\"118\":1},\"2\":{\"120\":1}}],[\"报复赌场让他们亏钱\",{\"1\":{\"96\":1}}],[\"报文可以被所有节点同时接收\",{\"1\":{\"55\":1}}],[\"报文标识符在网络中是唯一的\",{\"1\":{\"55\":1}}],[\"句话\",{\"1\":{\"96\":1}}],[\"想有这样的判断力\",{\"1\":{\"114\":1}}],[\"想在股市谋生\",{\"1\":{\"114\":1}}],[\"想法改变了事件\",{\"1\":{\"109\":1}}],[\"想像你的对手是谁\",{\"1\":{\"105\":1}}],[\"想\",{\"1\":{\"96\":1}}],[\"虚拟环境可以使用其二进制目录\",{\"1\":{\"146\":1}}],[\"虚拟代理\",{\"1\":{\"36\":1}}],[\"虚荣心及权力的幻\",{\"1\":{\"96\":1}}],[\"股价很高了\",{\"1\":{\"109\":1}}],[\"股价很低了\",{\"1\":{\"109\":1}}],[\"股价却不升\",{\"1\":{\"108\":1}}],[\"股价慢慢地一步步升高\",{\"1\":{\"105\":1}}],[\"股\",{\"1\":{\"106\":1}}],[\"股势\",{\"1\":{\"103\":1}}],[\"股票将节节升高\",{\"1\":{\"111\":1}}],[\"股票从来就没有太高了不能买或太低了不能卖这回事\",{\"1\":{\"109\":1}}],[\"股票从来不是恒定不动的\",{\"1\":{\"103\":1}}],[\"股票开始上升\",{\"1\":{\"108\":1}}],[\"股票已升了一大截的情况下\",{\"1\":{\"105\":1}}],[\"股票已跌了很低了\",{\"1\":{\"105\":1}}],[\"股票大市的重要性的\",{\"1\":{\"102\":1}}],[\"股票应往下跌\",{\"1\":{\"102\":1}}],[\"股票应该继续上升\",{\"1\":{\"102\":1}}],[\"股票短期的运动方向我注重股价及交易量\",{\"1\":{\"101\":1}}],[\"股票的升势还在继续\",{\"1\":{\"109\":1}}],[\"股票的运动有点像推石球上山\",{\"1\":{\"101\":1}}],[\"股票的走势及走势线\",{\"0\":{\"101\":1}}],[\"股票的迷惑性不在于股票所基于的价值\",{\"1\":{\"96\":1}}],[\"股市从来都不错\",{\"1\":{\"103\":1}}],[\"股市操纵可能改变每天的或短期的波动\",{\"1\":{\"102\":1}}],[\"股市没有即定的运行准则\",{\"1\":{\"96\":1}}],[\"股市这一恒久的赌局却要求你每时每刻都要做理性的决定且为决定的结果负全部的责任\",{\"1\":{\"96\":1}}],[\"贪\",{\"1\":{\"96\":1}}],[\"赶潮跟风\",{\"1\":{\"96\":1}}],[\"自我督促\",{\"1\":{\"110\":1}}],[\"自律\",{\"1\":{\"109\":1}}],[\"自以为是\",{\"1\":{\"96\":1}}],[\"自1994年\",{\"1\":{\"10\":1}}],[\"急着发财\",{\"1\":{\"96\":1}}],[\"讨厌风险\",{\"1\":{\"96\":1}}],[\"就算进价较你第一次进价为低也没有关系\",{\"1\":{\"109\":1}}],[\"就是这些永远不变的人性\",{\"1\":{\"96\":1}}],[\"就可以创建新的产品对象\",{\"1\":{\"24\":1}}],[\"人性使然\",{\"1\":{\"96\":1}}],[\"那还不算我业余炒股的经验及金融硕士的知识背景\",{\"1\":{\"110\":1}}],[\"那就是\",{\"1\":{\"96\":1}}],[\"那么股市的继续下跌区间也已不大\",{\"1\":{\"103\":1}}],[\"那么使用享元模式可以提高程序的性能\",{\"1\":{\"35\":1}}],[\"那么使用享元模式可以减少内存的占用\",{\"1\":{\"35\":2}}],[\"那么使用享元模式可能会导致性能下降\",{\"1\":{\"35\":1}}],[\"那么可以扩大战果\",{\"1\":{\"109\":1}}],[\"那么可以使用原型模式来减少对象的创建和销毁次数\",{\"1\":{\"27\":1}}],[\"那么可以使用原型模式来避免重复创建对象的开销\",{\"1\":{\"27\":1}}],[\"那么可以使用原型模式来提高创建对象的效率\",{\"1\":{\"27\":1}}],[\"那么可能会导致工厂类和产品类的数量过多\",{\"1\":{\"24\":1}}],[\"那么在克隆原型对象时\",{\"1\":{\"27\":2}}],[\"那么\",{\"1\":{\"22\":1}}],[\"小小做\",{\"1\":{\"114\":1}}],[\"小心交易量猛增\",{\"1\":{\"108\":1}}],[\"小结一下何时及怎样卖股票\",{\"0\":{\"108\":1}}],[\"小环境\",{\"0\":{\"99\":1}}],[\"小偷的本事不在偷\",{\"1\":{\"96\":1}}],[\"小白教程\",{\"1\":{\"3\":1}}],[\"面对人为操纵的赌局\",{\"1\":{\"96\":1}}],[\"面向接口进行开发\",{\"1\":{\"22\":2}}],[\"玩游戏之前\",{\"1\":{\"96\":1}}],[\"朋友\",{\"1\":{\"96\":1}}],[\"我每次赚了大钱\",{\"1\":{\"112\":1}}],[\"我每多进一手都一定较上一手的价格更高\",{\"1\":{\"109\":1}}],[\"我也用了近六年的时间\",{\"1\":{\"110\":1}}],[\"我只在升势的时候买股票\",{\"1\":{\"109\":1}}],[\"我赚到大钱的诀窍不在于我怎么思考\",{\"1\":{\"109\":1}}],[\"我对所有的炒股规则都抱有怀疑\",{\"1\":{\"109\":1}}],[\"我便以10元作为止损点\",{\"1\":{\"108\":1}}],[\"我自己的极限是二十只股票\",{\"1\":{\"109\":1}}],[\"我自己的经验\",{\"1\":{\"104\":1}}],[\"我自己喜欢把止损点定在入市当天的最低点\",{\"1\":{\"108\":1}}],[\"我自己习惯用200天平均线来衡量股票的长期走势\",{\"1\":{\"101\":1}}],[\"我差不多就等于在开赌场\",{\"1\":{\"104\":1}}],[\"我是坚信\",{\"1\":{\"103\":1}}],[\"我以下用数字来描述一遍\",{\"1\":{\"103\":1}}],[\"我通常不买股价在200天平均线下的股票\",{\"1\":{\"101\":1}}],[\"我慢慢感悟这些聪明人失败的原因大约有两个\",{\"1\":{\"96\":1}}],[\"我要给你这样的忠告\",{\"1\":{\"96\":1}}],[\"我希望你能在这本书中找到解决这些问题的答案\",{\"1\":{\"96\":1}}],[\"我们创建一个主文件main\",{\"1\":{\"129\":1}}],[\"我们创建一个源文件myclass\",{\"1\":{\"129\":1}}],[\"我们创建一个头文件myclass\",{\"1\":{\"129\":1}}],[\"我们创建了一个realcar对象\",{\"1\":{\"36\":1}}],[\"我们创建了一个汽车经销商对象dealer\",{\"1\":{\"34\":1}}],[\"我们创建了一个传统燃油汽车对象gasolinecar\",{\"1\":{\"30\":1}}],[\"我们创建了四个类来表示不同类型的控件和主题样式组合\",{\"1\":{\"22\":1}}],[\"我们的管理将尽量使损失降至最低\",{\"1\":{\"109\":1}}],[\"我们的投资将基于股票的价值而不是股票是否热门\",{\"1\":{\"109\":1}}],[\"我们生活在从工业社会转型到信息社会的关口\",{\"1\":{\"102\":1}}],[\"我们就有了最常见的买入理想点\",{\"1\":{\"102\":1}}],[\"我们展示了如何通过访问者模式来访问不同类型的汽车并执行特定的操作\",{\"1\":{\"47\":1}}],[\"我们可以使用模板方法模式来实现这一设计\",{\"1\":{\"46\":1}}],[\"我们可以将汽车和引擎的关系作为依赖倒置原则的例子\",{\"1\":{\"22\":1}}],[\"我们再次模拟请求\",{\"1\":{\"36\":1}}],[\"我们模拟了一个请求\",{\"1\":{\"36\":1}}],[\"我们在main函数中创建了一个享元工厂\",{\"1\":{\"35\":1}}],[\"我们实现了享元工厂\",{\"1\":{\"35\":1}}],[\"我们通过调用汽车工厂对象的createcar函数来创建汽车对象\",{\"1\":{\"34\":1}}],[\"我们通过适配器对象调用充电方法charge\",{\"1\":{\"30\":1}}],[\"我们定义了汽车颜色和品牌的枚举类型\",{\"1\":{\"35\":1}}],[\"我们定义了两个装饰函数decoratewithgps和decoratewithsunroof\",{\"1\":{\"33\":1}}],[\"我们定义了一个car接口\",{\"1\":{\"36\":1}}],[\"我们定义了一个car结构体来表示汽车的属性\",{\"1\":{\"28\":1}}],[\"我们定义了一个decorator结构体\",{\"1\":{\"33\":1}}],[\"我们定义了一个适配器结构体adapter\",{\"1\":{\"30\":1}}],[\"我们定义了一个传统燃油汽车接口gasolinecarinterface\",{\"1\":{\"30\":1}}],[\"我们定义了一个电动汽车接口electriccarinterface\",{\"1\":{\"30\":1}}],[\"我们定义了一个singleton结构体来表示单例类\",{\"1\":{\"28\":1}}],[\"我们定义了一个具体生成器concretebuilder\",{\"1\":{\"26\":1}}],[\"我们定义了一个生成器接口builder\",{\"1\":{\"26\":1}}],[\"我们定义了一个抽象工厂函数createcar\",{\"1\":{\"24\":1,\"25\":1}}],[\"我们定义了一个汽车工厂结构体carfactory\",{\"1\":{\"34\":1}}],[\"我们定义了一个汽车结构体car\",{\"1\":{\"24\":1,\"26\":1,\"30\":1}}],[\"我们定义了一个汽车类型枚举cartype\",{\"1\":{\"24\":1,\"30\":1}}],[\"我们首先创建了一个carproxy对象\",{\"1\":{\"36\":1}}],[\"我们首先创建了一个具体生成器和一个生成器实例\",{\"1\":{\"26\":1}}],[\"我们首先检查工厂中是否已经存在具有相同颜色和品牌的汽车享元对象\",{\"1\":{\"35\":1}}],[\"我们首先定义了一个car结构体\",{\"1\":{\"33\":1}}],[\"我们调用了传统燃油汽车结构体的加油方法refuel\",{\"1\":{\"30\":1}}],[\"我们调用getsingleton方法获取单例实例\",{\"1\":{\"28\":1}}],[\"我们将传统燃油汽车结构体的指针赋值给适配器结构体中的gasolinecar指针\",{\"1\":{\"30\":1}}],[\"我们将汽车的创建过程封装在抽象工厂函数中\",{\"1\":{\"24\":1}}],[\"我们还定义了一个汽车经销商结构体cardealer\",{\"1\":{\"34\":1}}],[\"我们还定义了一个传统燃油汽车结构体gasolinecar\",{\"1\":{\"30\":1}}],[\"我们还定义了一个电动汽车结构体electriccar\",{\"1\":{\"30\":1}}],[\"我们还定义了一个主管director\",{\"1\":{\"26\":1}}],[\"我们释放了汽车经销商对象\",{\"1\":{\"34\":1}}],[\"我们释放了所有的内存\",{\"1\":{\"26\":1}}],[\"我们释放单例实例所占用的内存\",{\"1\":{\"28\":1}}],[\"我们使用extern关键字在main\",{\"1\":{\"129\":1}}],[\"我们使用策略模式来实现这一点\",{\"1\":{\"45\":1}}],[\"我们使用状态模式来实现这一点\",{\"1\":{\"44\":1}}],[\"我们使用观察者模式来实现这一点\",{\"1\":{\"43\":1}}],[\"我们使用备忘录模式来实现这一点\",{\"1\":{\"42\":1}}],[\"我们使用中介者模式来实现这一点\",{\"1\":{\"41\":1}}],[\"我们使用迭代器模式来遍历这些汽车对象\",{\"1\":{\"40\":1}}],[\"我们使用命令模式来实现这一点\",{\"1\":{\"39\":1}}],[\"我们使用责任链模式来实现这一点\",{\"1\":{\"38\":1}}],[\"我们使用decorate函数调用了装饰对象的装饰函数\",{\"1\":{\"33\":1}}],[\"我们使用createcar函数创建了一个汽车对象\",{\"1\":{\"33\":1}}],[\"我们使用createcar函数创建了三种不同类型的汽车\",{\"1\":{\"24\":1,\"25\":1}}],[\"我们使用组合模式来实现这一点\",{\"1\":{\"32\":1}}],[\"我们使用桥接模式来实现这一点\",{\"1\":{\"31\":1}}],[\"我们使用静态变量instance来存储单例实例\",{\"1\":{\"28\":1}}],[\"我们使用主管的manufacturecar方法创建了一辆汽车\",{\"1\":{\"26\":1}}],[\"我们使用free函数释放了创建的汽车对象所占用的内存\",{\"1\":{\"24\":1,\"25\":1}}],[\"我们使用switch语句根据汽车类型创建具体的汽车对象\",{\"1\":{\"24\":1,\"25\":1}}],[\"我们分别实现了创建轿车\",{\"1\":{\"24\":1,\"25\":1}}],[\"我们希望能够创建不同类型的控件\",{\"1\":{\"22\":1}}],[\"我们需要确保新的\",{\"1\":{\"22\":1}}],[\"我们只需要创建一个新的引擎实现\",{\"1\":{\"22\":1}}],[\"下注的数额比你有80\",{\"1\":{\"103\":1}}],[\"下调阶段\",{\"1\":{\"101\":1}}],[\"下次要怎么做才能防止亏钱的再次发生\",{\"1\":{\"96\":1}}],[\"下面是一个详细的例子\",{\"1\":{\"129\":1}}],[\"下面是一个使用装饰模式的示例代码\",{\"1\":{\"33\":1}}],[\"下面是一个简单的junit测试用例的示例\",{\"1\":{\"22\":1}}],[\"下面是一个简单的c语言代码示例\",{\"1\":{\"22\":1}}],[\"读书笔记\",{\"0\":{\"95\":1},\"1\":{\"95\":1},\"2\":{\"116\":1}}],[\"问题解决\",{\"1\":{\"92\":1}}],[\"案例\",{\"0\":{\"92\":1,\"123\":1,\"129\":1}}],[\"替换为你本地代理的端口\",{\"1\":{\"90\":1}}],[\"余下的工作就是\",{\"1\":{\"106\":1}}],[\"余数计算\",{\"2\":{\"86\":1}}],[\"余法运算公式\",{\"0\":{\"84\":1}}],[\"年中组织全体工作组会议\",{\"1\":{\"79\":1}}],[\"年份和类型的方法\",{\"1\":{\"26\":1}}],[\"年份和类型等信息\",{\"1\":{\"26\":1}}],[\"算力需求增加\",{\"1\":{\"76\":1}}],[\"算法\",{\"2\":{\"85\":1}}],[\"算法经常变化并且需要增加新的算法\",{\"1\":{\"45\":1}}],[\"算法多变且易于扩展\",{\"1\":{\"45\":1}}],[\"算法的封装\",{\"1\":{\"45\":1}}],[\"算法的变化不会影响使用算法的客户\",{\"1\":{\"45\":2}}],[\"算法像菜谱\",{\"1\":{\"19\":1}}],[\"runnables\",{\"1\":{\"162\":1,\"165\":1}}],[\"rbp\",{\"1\":{\"135\":4}}],[\"ram\",{\"1\":{\"76\":1}}],[\"rom\",{\"1\":{\"76\":1}}],[\"requests\",{\"1\":{\"140\":1}}],[\"requirements\",{\"1\":{\"140\":6,\"141\":2}}],[\"receive\",{\"1\":{\"165\":2}}],[\"receiver\",{\"1\":{\"39\":2,\"165\":2}}],[\"recessive\",{\"1\":{\"56\":1}}],[\"releasestates\",{\"1\":{\"44\":2}}],[\"registerobserver\",{\"1\":{\"43\":6}}],[\"restorefrommemento\",{\"1\":{\"42\":2}}],[\"responsibility\",{\"0\":{\"38\":1}}],[\"result\",{\"1\":{\"22\":2}}],[\"real\",{\"1\":{\"36\":4}}],[\"realcar结构体实现了car接口\",{\"1\":{\"36\":1}}],[\"realcardrive\",{\"1\":{\"36\":2}}],[\"realcar\",{\"1\":{\"36\":7}}],[\"realloc\",{\"1\":{\"32\":1}}],[\"red\",{\"1\":{\"35\":2}}],[\"removing\",{\"1\":{\"140\":1}}],[\"removeobserver\",{\"1\":{\"43\":5}}],[\"remove\",{\"1\":{\"32\":5}}],[\"remote\",{\"1\":{\"4\":1}}],[\"reference\",{\"0\":{\"156\":1}}],[\"reflexivity\",{\"1\":{\"109\":1}}],[\"refinedabstraction\",{\"1\":{\"31\":2}}],[\"refueling\",{\"1\":{\"30\":1}}],[\"refuel\",{\"1\":{\"30\":3}}],[\"return\",{\"1\":{\"22\":3,\"24\":8,\"25\":8,\"26\":4,\"27\":3,\"28\":2,\"30\":1,\"31\":6,\"32\":6,\"33\":3,\"34\":4,\"35\":4,\"36\":1,\"38\":4,\"39\":3,\"40\":6,\"41\":4,\"42\":2,\"43\":4,\"44\":5,\"45\":5,\"46\":1,\"47\":1,\"129\":1,\"134\":1}}],[\"与\",{\"0\":{\"76\":1}}],[\"文件模板等\",{\"1\":{\"74\":1}}],[\"文本框\",{\"1\":{\"22\":1}}],[\"元数据的一个原子数据单元\",{\"0\":{\"165\":1}}],[\"元模型\",{\"1\":{\"74\":1}}],[\"元素\",{\"1\":{\"47\":1}}],[\"硬件1\",{\"1\":{\"72\":1}}],[\"功能安全服务\",{\"1\":{\"72\":1}}],[\"故障诊断及诊断服务\",{\"1\":{\"72\":1}}],[\"尽可能重用已有标准\",{\"1\":{\"71\":1}}],[\"才能有唤醒功能\",{\"1\":{\"62\":1}}],[\"上电调用init可以直接切换到任意一个模式\",{\"1\":{\"62\":1}}],[\"上下文必须知道所有的策略\",{\"1\":{\"45\":1}}],[\"上下文需要了解策略\",{\"1\":{\"45\":1}}],[\"上下文\",{\"1\":{\"44\":2,\"45\":2}}],[\"目标是为适用于大多数当前和未来can收发器设备定义接口和行为\",{\"1\":{\"61\":1}}],[\"目标接口\",{\"1\":{\"30\":1}}],[\"配置方法\",{\"0\":{\"147\":1}}],[\"配置文件在仓库下的\",{\"1\":{\"91\":1}}],[\"配置文件在用户目录中\",{\"1\":{\"91\":1}}],[\"配置文件在程序的配置目录中\",{\"1\":{\"91\":1}}],[\"配置can的接收发送邮箱以及使用的filter\",{\"1\":{\"60\":1}}],[\"配置mcu的can外设操作功能以及can的filter\",{\"1\":{\"60\":1}}],[\"配置一些api的使能函数周期等\",{\"1\":{\"60\":1}}],[\"数据元素\",{\"0\":{\"165\":1}}],[\"数据映射\",{\"1\":{\"162\":1}}],[\"数据在内的软件组件类型\",{\"1\":{\"160\":1}}],[\"数据在mcu\",{\"1\":{\"59\":1}}],[\"数据库连接池等\",{\"1\":{\"28\":1}}],[\"隐性电平则为逻辑1\",{\"1\":{\"56\":1}}],[\"信号表现为电压形式\",{\"1\":{\"56\":1}}],[\"根据外部电路配置trcv的通道\",{\"1\":{\"63\":1}}],[\"根据需要可进行相关性报文过滤\",{\"1\":{\"55\":1}}],[\"根据依赖倒置原则\",{\"1\":{\"22\":1}}],[\"广播发送报文\",{\"1\":{\"55\":1}}],[\"广播通信\",{\"1\":{\"43\":1}}],[\"某些特定的应用对标识符的分配进行了标准化\",{\"1\":{\"55\":1}}],[\"标识符描述了数据的含义\",{\"1\":{\"55\":1}}],[\"区分\",{\"1\":{\"55\":1}}],[\"非破坏性的基于优先级的总线仲裁\",{\"1\":{\"55\":1}}],[\"各节点平等\",{\"1\":{\"55\":1}}],[\"各同事类只知道中介者\",{\"1\":{\"41\":1}}],[\"光纤\",{\"1\":{\"55\":1}}],[\"距离最远可达10km\",{\"1\":{\"55\":1}}],[\"属于开环总线\",{\"1\":{\"54\":1}}],[\"属于闭环总线\",{\"1\":{\"54\":1}}],[\"≤\",{\"1\":{\"54\":1}}],[\"总之\",{\"1\":{\"128\":1}}],[\"总线上节点的数量可以动态改变\",{\"1\":{\"55\":1}}],[\"总线长度可达1000米\",{\"1\":{\"54\":1}}],[\"总线长度\",{\"1\":{\"54\":1}}],[\"总结\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"传输时间短\",{\"1\":{\"55\":1}}],[\"传输速率最高可达1mbps\",{\"1\":{\"55\":1}}],[\"传输速率为40kbps时\",{\"1\":{\"54\":1}}],[\"传输速率可达1mbps\",{\"1\":{\"54\":1}}],[\"传统燃油汽车结构体\",{\"1\":{\"30\":1}}],[\"~1mbps\",{\"1\":{\"54\":1}}],[\"kbps\",{\"1\":{\"54\":2}}],[\"国际标准化的串行通信协议\",{\"1\":{\"54\":1}}],[\"国外已有许多大公司的产品采用了这一技术\",{\"1\":{\"53\":1}}],[\"电子控制单元\",{\"1\":{\"54\":1}}],[\"电动汽车结构体\",{\"1\":{\"30\":1}}],[\"采用面向服务的架构\",{\"1\":{\"71\":1}}],[\"采用双线差分信号\",{\"1\":{\"55\":1}}],[\"采用can总线上述问题便得到很好地解决\",{\"1\":{\"53\":1}}],[\"采用硬接信号线的方式不但烦琐\",{\"1\":{\"53\":1}}],[\"昂贵\",{\"1\":{\"53\":1}}],[\"等\",{\"1\":{\"53\":1}}],[\"等到真正需要时再创建真实对象\",{\"1\":{\"36\":1}}],[\"及复杂的抗锁定刹车系统\",{\"1\":{\"53\":1}}],[\"及独\",{\"1\":{\"53\":1}}],[\"刹车控制\",{\"1\":{\"53\":1}}],[\"加速\",{\"1\":{\"53\":1}}],[\"加速等\",{\"1\":{\"39\":1}}],[\"注意危险信号\",{\"1\":{\"108\":1}}],[\"注油控制\",{\"1\":{\"53\":1}}],[\"注册观察者\",{\"1\":{\"43\":1}}],[\"特别在这些好消息公布之前\",{\"1\":{\"105\":1}}],[\"特别是在增加新元素类型时需要谨慎设计\",{\"1\":{\"47\":1}}],[\"特别是在创建复杂对象时\",{\"1\":{\"27\":1}}],[\"特别是有多个变种的算法时\",{\"1\":{\"46\":1}}],[\"特别是涉及到对象的深拷贝\",{\"1\":{\"42\":1}}],[\"特的设计\",{\"1\":{\"53\":1}}],[\"即选择正确或选择赚钱\",{\"1\":{\"96\":1}}],[\"即控制器局域网络\",{\"1\":{\"53\":1}}],[\"即将抽象和实现用组合的方式桥接在一起\",{\"1\":{\"31\":1}}],[\"集成及相关调试策略\",{\"1\":{\"51\":1,\"83\":1}}],[\"集中相关操作\",{\"1\":{\"47\":1}}],[\"集中控制\",{\"1\":{\"41\":1}}],[\"协议\",{\"2\":{\"68\":1,\"86\":1}}],[\"协议本身对节点的数量没有限制\",{\"1\":{\"55\":1}}],[\"协议栈原理\",{\"1\":{\"51\":1,\"83\":1}}],[\"协调同事类之间的交互\",{\"1\":{\"41\":1}}],[\"协调各同事对象之间的交互\",{\"1\":{\"41\":1}}],[\"改变的能力\",{\"1\":{\"110\":1}}],[\"改变汽车状态\",{\"1\":{\"42\":1,\"43\":1}}],[\"改善既有代码的设计\",{\"1\":{\"48\":1}}],[\"重构\",{\"1\":{\"48\":1}}],[\"重构与模式\",{\"1\":{\"48\":1}}],[\"敏捷软件开发\",{\"1\":{\"48\":1}}],[\"破坏封装\",{\"1\":{\"47\":1}}],[\"卡车\",{\"1\":{\"47\":1}}],[\"前提\",{\"0\":{\"127\":1}}],[\"前者你会看到交易量增加\",{\"1\":{\"105\":1}}],[\"前置声明\",{\"1\":{\"47\":1}}],[\"前向声明\",{\"1\":{\"44\":1}}],[\"访问者模式通过将数据结构与数据操作分离\",{\"1\":{\"47\":1}}],[\"访问者模式可以帮助我们避免在每个元素类中增加新操作\",{\"1\":{\"47\":1}}],[\"访问者模式是一个比较好的选择\",{\"1\":{\"47\":1}}],[\"访问者模式是一种行为型设计模式\",{\"1\":{\"47\":1}}],[\"访问者模式要求访问者对象访问元素的内部状态\",{\"1\":{\"47\":1}}],[\"访问者模式将数据结构与操作分离\",{\"1\":{\"47\":1}}],[\"访问者模式的结构包括以下几个主要组成部分\",{\"1\":{\"47\":1}}],[\"访问者模式的核心思想是将数据结构与数据操作分离\",{\"1\":{\"47\":1}}],[\"访问者模式\",{\"0\":{\"47\":1}}],[\"访问控制和缓存等\",{\"1\":{\"36\":1}}],[\"限制子类的灵活性\",{\"1\":{\"46\":1}}],[\"复杂度增加\",{\"1\":{\"46\":1}}],[\"复杂性增加\",{\"1\":{\"40\":1,\"43\":1}}],[\"复杂性\",{\"1\":{\"26\":1}}],[\"延迟到具体子类实现\",{\"1\":{\"46\":1}}],[\"延迟初始化\",{\"1\":{\"36\":2}}],[\"普通模式\",{\"1\":{\"45\":3}}],[\"策略数目增加\",{\"1\":{\"45\":1}}],[\"策略接口\",{\"1\":{\"45\":2}}],[\"策略模式可以用于实现不同的驾驶模式\",{\"1\":{\"45\":1}}],[\"策略模式通过定义一系列算法\",{\"1\":{\"45\":1}}],[\"策略模式将算法的实现和使用分离\",{\"1\":{\"45\":1}}],[\"策略模式主要包括以下几个部分\",{\"1\":{\"45\":1}}],[\"策略模式使得算法可以独立于使用它的客户而变化\",{\"1\":{\"45\":1}}],[\"策略模式是一种行为型设计模式\",{\"1\":{\"45\":1}}],[\"策略模式\",{\"0\":{\"45\":1},\"1\":{\"20\":1}}],[\"初始没有策略\",{\"1\":{\"45\":1}}],[\"初始状态为停止\",{\"1\":{\"44\":1}}],[\"初始化全局状态\",{\"1\":{\"44\":1}}],[\"初始化生成器接口\",{\"1\":{\"26\":1}}],[\"全局变量\",{\"1\":{\"128\":1}}],[\"全局状态实例\",{\"1\":{\"44\":1}}],[\"全局访问点\",{\"1\":{\"28\":2}}],[\"启动\",{\"1\":{\"44\":1}}],[\"启动状态\",{\"1\":{\"44\":1}}],[\"启动引擎\",{\"1\":{\"41\":1}}],[\"启动引擎命令\",{\"1\":{\"39\":1}}],[\"行驶状态\",{\"1\":{\"44\":1}}],[\"行驶\",{\"1\":{\"44\":2}}],[\"行为型模式包括责任链模式\",{\"1\":{\"20\":1}}],[\"行为型模式负责对象间的高效沟通和职责委派\",{\"1\":{\"20\":1}}],[\"行为型模式\",{\"1\":{\"20\":1}}],[\"行为型模式主要用于协调对象之间的交互\",{\"1\":{\"20\":1}}],[\"行为模式\",{\"1\":{\"20\":1}}],[\"每一个更高的波浪都带动更多的贪婪心理\",{\"1\":{\"111\":1}}],[\"每一个类实现一个与上下文的一个状态相关的行为\",{\"1\":{\"44\":1}}],[\"每次买卖都要有50\",{\"1\":{\"114\":1}}],[\"每次入场时我的获胜概率都超过50\",{\"1\":{\"104\":1}}],[\"每次上冲的强度通常较上一次更为猛烈\",{\"1\":{\"103\":1}}],[\"每年12月份组织标准发布会\",{\"1\":{\"79\":1}}],[\"每年11月份集中发布fo\",{\"1\":{\"79\":1}}],[\"每年上半年举办开放大会aoc\",{\"1\":{\"79\":1}}],[\"每个方法对应一个具体元素类\",{\"1\":{\"47\":1}}],[\"每个具体状态都需要定义一个类\",{\"1\":{\"44\":1}}],[\"每个具体命令都需要一个对应的类\",{\"1\":{\"39\":1}}],[\"每个状态类只负责与其状态相关的行为\",{\"1\":{\"44\":1}}],[\"每个装饰类只负责一个特定的功能\",{\"1\":{\"33\":4}}],[\"状态切换频繁\",{\"1\":{\"44\":1}}],[\"状态切换的管理\",{\"1\":{\"44\":1}}],[\"状态切换清晰\",{\"1\":{\"44\":1}}],[\"状态接口\",{\"1\":{\"44\":2}}],[\"状态变化通知\",{\"1\":{\"43\":1}}],[\"状态模式可以用于表示汽车的不同状态\",{\"1\":{\"44\":1}}],[\"状态模式通过将状态相关的行为封装到独立的状态类中\",{\"1\":{\"44\":1}}],[\"状态模式将状态相关的行为封装在独立的状态类中\",{\"1\":{\"44\":1}}],[\"状态模式将状态的相关行为封装到独立的状态类中\",{\"1\":{\"44\":1}}],[\"状态模式主要包括以下几个部分\",{\"1\":{\"44\":1}}],[\"状态模式是一种行为型设计模式\",{\"1\":{\"44\":1}}],[\"状态模式\",{\"0\":{\"44\":1},\"1\":{\"20\":1}}],[\"关键字extern用于声明一个变量或函数\",{\"1\":{\"128\":1}}],[\"关闭原则\",{\"1\":{\"43\":1,\"45\":1}}],[\"关系\",{\"1\":{\"22\":2}}],[\"易于扩展\",{\"1\":{\"43\":1,\"44\":1,\"45\":1}}],[\"易于维护\",{\"1\":{\"35\":2}}],[\"移除一个观察者\",{\"1\":{\"43\":1}}],[\"移除和通知观察者的方法\",{\"1\":{\"43\":2}}],[\"仪表盘\",{\"1\":{\"43\":1}}],[\"up\",{\"1\":{\"140\":1}}],[\"updatenavigation\",{\"1\":{\"43\":2}}],[\"updatedashboard\",{\"1\":{\"43\":2}}],[\"update\",{\"1\":{\"43\":6}}],[\"user\",{\"0\":{\"184\":1}}],[\"used\",{\"1\":{\"164\":2}}],[\"use\",{\"1\":{\"140\":5,\"165\":1}}],[\"usage\",{\"1\":{\"140\":1}}],[\"unset\",{\"1\":{\"90\":2}}],[\"undocommand\",{\"1\":{\"39\":3}}],[\"undostopengine\",{\"1\":{\"39\":2}}],[\"undostartengine\",{\"1\":{\"39\":2}}],[\"undo\",{\"1\":{\"39\":3}}],[\"unknown\",{\"1\":{\"38\":1}}],[\"untitled\",{\"1\":{\"14\":1}}],[\"维护当前状态并委托状态处理具体行为\",{\"1\":{\"44\":1}}],[\"维护一个策略对象的引用\",{\"1\":{\"45\":2}}],[\"维护一个当前状态\",{\"1\":{\"44\":1}}],[\"维护一个观察者列表\",{\"1\":{\"43\":1}}],[\"维护主题的状态\",{\"1\":{\"43\":1}}],[\"观察者接收通知的顺序可能是不确定的\",{\"1\":{\"43\":1}}],[\"观察者接口\",{\"1\":{\"43\":1}}],[\"观察者\",{\"1\":{\"43\":1}}],[\"观察者模式可以用于监控汽车状态的变化\",{\"1\":{\"43\":1}}],[\"观察者模式通过定义一对多的依赖关系\",{\"1\":{\"43\":1}}],[\"观察者模式使得主题和观察者之间的依赖关系减少\",{\"1\":{\"43\":1}}],[\"观察者模式主要包括以下几个部分\",{\"1\":{\"43\":1}}],[\"观察者模式是一种行为型设计模式\",{\"1\":{\"43\":1}}],[\"观察者模式\",{\"0\":{\"43\":1},\"1\":{\"20\":1}}],[\"订阅模式\",{\"1\":{\"43\":1}}],[\"恢复到之前的状态\",{\"1\":{\"42\":1}}],[\"历史记录等\",{\"1\":{\"42\":1}}],[\"性能开销\",{\"1\":{\"42\":1}}],[\"性能问题\",{\"1\":{\"26\":1,\"38\":1,\"41\":1}}],[\"存储在相对于\",{\"1\":{\"135\":2}}],[\"存储\",{\"1\":{\"72\":1}}],[\"存储汽车的状态\",{\"1\":{\"42\":1}}],[\"存储发起人的内部状态\",{\"1\":{\"42\":1}}],[\"速度和燃油量\",{\"1\":{\"42\":1,\"43\":1}}],[\"燃油量\",{\"1\":{\"42\":1,\"43\":1}}],[\"备忘录一般是不可变的\",{\"1\":{\"42\":1}}],[\"备忘录\",{\"1\":{\"42\":2}}],[\"备忘录模式可以用于保存和恢复汽车的状态\",{\"1\":{\"42\":1}}],[\"备忘录模式可以用于实现撤销操作\",{\"1\":{\"42\":1}}],[\"备忘录模式可以方便地实现撤销操作\",{\"1\":{\"42\":1}}],[\"备忘录模式通过封装对象的状态\",{\"1\":{\"42\":2}}],[\"备忘录模式主要包括以下几个部分\",{\"1\":{\"42\":1}}],[\"备忘录模式将对象的状态保存到一个备忘录对象中\",{\"1\":{\"42\":1}}],[\"备忘录模式是一种行为型设计模式\",{\"1\":{\"42\":1}}],[\"备忘录模式\",{\"0\":{\"42\":1},\"1\":{\"20\":1}}],[\"发财的希望\",{\"1\":{\"111\":1}}],[\"发现压力的根源\",{\"1\":{\"109\":1}}],[\"发现global级别配置了代理地址\",{\"1\":{\"92\":1}}],[\"发送不同功能的pdu以及控制can收发器进行工作的transceiver\",{\"1\":{\"58\":1}}],[\"发布系统\",{\"1\":{\"43\":1}}],[\"发生变化时\",{\"1\":{\"43\":1}}],[\"发起人\",{\"1\":{\"42\":2}}],[\"发动机\",{\"1\":{\"32\":1}}],[\"捕获和恢复对象的内部状态\",{\"1\":{\"42\":1}}],[\"同样\",{\"1\":{\"102\":1}}],[\"同轴电缆\",{\"1\":{\"55\":1}}],[\"同事类\",{\"1\":{\"41\":2}}],[\"同时避免了重复定义的问题\",{\"1\":{\"128\":1}}],[\"同时适用于cp和ap两种系统\",{\"1\":{\"74\":1}}],[\"同时保持算法的整体结构不变\",{\"1\":{\"46\":1}}],[\"同时保持结构的灵活性和高效\",{\"1\":{\"20\":1}}],[\"同时又不改变其结构\",{\"1\":{\"33\":1}}],[\"希望\",{\"1\":{\"110\":2}}],[\"希望集中控制交互逻辑\",{\"1\":{\"41\":1}}],[\"希望分离遍历算法和集合对象\",{\"1\":{\"40\":1}}],[\"希望客户端可以统一处理单个对象和组合对象\",{\"1\":{\"32\":1}}],[\"后面跟着虚拟环境的名称和python解释器的路径\",{\"1\":{\"147\":1}}],[\"后\",{\"1\":{\"109\":1}}],[\"后者便是搞一些大家公认的好卖点\",{\"1\":{\"105\":1}}],[\"后序遍历\",{\"1\":{\"40\":1}}],[\"后会将请求传递给服务对象\",{\"1\":{\"36\":1}}],[\"额外的开销\",{\"1\":{\"40\":1}}],[\"统一接口\",{\"1\":{\"40\":1}}],[\"没有什么比轻松和快速来钱更能吸引普通民众\",{\"1\":{\"111\":1}}],[\"没有显式定义\",{\"1\":{\"40\":1}}],[\"没有子节点的功能\",{\"1\":{\"32\":1}}],[\"没有子节点\",{\"1\":{\"32\":1}}],[\"向汽车集合中添加汽车\",{\"1\":{\"40\":1}}],[\"向链上的具体处理者对象提交请求\",{\"1\":{\"38\":1}}],[\"管理一系列的汽车对象\",{\"1\":{\"40\":1}}],[\"管理复杂性\",{\"1\":{\"32\":1}}],[\"聚合接口\",{\"1\":{\"40\":2}}],[\"迭代器方法实现\",{\"1\":{\"40\":1}}],[\"迭代器接口\",{\"1\":{\"40\":3}}],[\"迭代器模式可以用于遍历汽车集合对象\",{\"1\":{\"40\":1}}],[\"迭代器模式通过定义统一的遍历接口\",{\"1\":{\"40\":1}}],[\"迭代器模式主要包括以下几个部分\",{\"1\":{\"40\":1}}],[\"迭代器模式将遍历聚合对象的责任从聚合对象本身转移到了迭代器对象\",{\"1\":{\"40\":1}}],[\"迭代器模式是一种行为型设计模式\",{\"1\":{\"40\":1}}],[\"迭代器模式\",{\"0\":{\"40\":1},\"1\":{\"20\":1,\"39\":1}}],[\"解除压力\",{\"1\":{\"109\":1}}],[\"解决方案\",{\"2\":{\"82\":1}}],[\"解耦\",{\"1\":{\"43\":1}}],[\"解耦请求发送者和接收者\",{\"1\":{\"39\":1}}],[\"解释问题并说明模式会如何提供解决方案\",{\"1\":{\"18\":1}}],[\"执行实际操作的对象\",{\"1\":{\"39\":1}}],[\"执行具体操作的类\",{\"1\":{\"39\":1}}],[\"例子中为main函数\",{\"1\":{\"39\":1}}],[\"例子中为car\",{\"1\":{\"39\":1}}],[\"例子中invoker负责调用命令的执行和撤销操作\",{\"1\":{\"39\":1}}],[\"例子中包括启动引擎命令和停止引擎命令\",{\"1\":{\"39\":1}}],[\"例如增加系统复杂度\",{\"1\":{\"36\":1}}],[\"例如增加了系统的复杂性\",{\"1\":{\"35\":1}}],[\"例如限制对真实对象的访问权限\",{\"1\":{\"36\":1}}],[\"例如创建一个大型对象时\",{\"1\":{\"36\":1}}],[\"例如通过网络连接访问远程服务器上的对象\",{\"1\":{\"36\":1}}],[\"例如通过网络连接访问远程对象\",{\"1\":{\"36\":1}}],[\"例如检查权限\",{\"1\":{\"36\":1}}],[\"例如延迟初始化\",{\"1\":{\"36\":1}}],[\"例如汽车的颜色\",{\"1\":{\"35\":1}}],[\"例如文本编辑器中的字符\",{\"1\":{\"35\":1}}],[\"例如文件系统\",{\"1\":{\"28\":1}}],[\"例如线程安全问题\",{\"1\":{\"35\":1}}],[\"例如线程池\",{\"1\":{\"28\":1}}],[\"例如序列号生成器\",{\"1\":{\"28\":1}}],[\"例如日志记录器\",{\"1\":{\"28\":1}}],[\"例如\",{\"1\":{\"27\":1,\"34\":1,\"147\":3}}],[\"例如克隆关联对象和梳理递归依赖等等\",{\"1\":{\"27\":1}}],[\"撤销停止引擎命令\",{\"1\":{\"39\":1}}],[\"撤销命令\",{\"1\":{\"39\":1}}],[\"停止状态\",{\"1\":{\"44\":1}}],[\"停止\",{\"1\":{\"44\":2}}],[\"停止引擎等\",{\"1\":{\"39\":1}}],[\"停止引擎命令\",{\"1\":{\"39\":1}}],[\"停止发动机\",{\"1\":{\"39\":1}}],[\"持有命令对象并通过命令对象来执行请求\",{\"1\":{\"39\":2}}],[\"绑定接收者对象\",{\"1\":{\"39\":1}}],[\"命令对象可以支持请求的排队\",{\"1\":{\"39\":1}}],[\"命令对象可以实现撤销和重做操作\",{\"1\":{\"39\":1}}],[\"命令的组合\",{\"1\":{\"39\":1}}],[\"命令接口\",{\"1\":{\"39\":2}}],[\"命令模式可以用于控制汽车的各种操作\",{\"1\":{\"39\":1}}],[\"命令模式可以很方便地实现操作的撤销和重做功能\",{\"1\":{\"39\":1}}],[\"命令模式通过将请求封装成对象\",{\"1\":{\"39\":1}}],[\"命令模式将请求封装成对象\",{\"1\":{\"39\":1}}],[\"命令模式主要包括以下几个部分\",{\"1\":{\"39\":1}}],[\"命令模式是一种行为型设计模式\",{\"1\":{\"39\":1}}],[\"命令模式\",{\"0\":{\"39\":1},\"1\":{\"20\":1,\"38\":1}}],[\"调试困难\",{\"1\":{\"38\":1}}],[\"调用对象的方法\",{\"1\":{\"129\":1}}],[\"调用者\",{\"1\":{\"39\":2}}],[\"调用接收者的相应操作\",{\"1\":{\"39\":1}}],[\"调用汽车装饰函数\",{\"1\":{\"33\":1}}],[\"调用汽车的操作\",{\"1\":{\"32\":1}}],[\"调用\",{\"1\":{\"22\":1}}],[\"制定切实可行的炒股计划\",{\"1\":{\"110\":1}}],[\"制造豪华型汽车\",{\"1\":{\"46\":1}}],[\"制造经济型汽车\",{\"1\":{\"46\":1}}],[\"制造经济型汽车和制造豪华型汽车\",{\"1\":{\"46\":1}}],[\"制造汽车\",{\"1\":{\"26\":2}}],[\"制动系统检查器\",{\"1\":{\"38\":1}}],[\"制动系统\",{\"1\":{\"38\":1}}],[\"车轮检查器\",{\"1\":{\"38\":1}}],[\"车轮\",{\"1\":{\"38\":1}}],[\"处理它所负责的请求\",{\"1\":{\"38\":1}}],[\"责任链模式可以用于不同的汽车零部件检查\",{\"1\":{\"38\":1}}],[\"责任链模式通过将请求沿着处理者链传递\",{\"1\":{\"38\":1}}],[\"责任链模式主要包括以下几个部分\",{\"1\":{\"38\":1}}],[\"责任链模式是一种行为设计模式\",{\"1\":{\"38\":1}}],[\"责任链模式\",{\"0\":{\"38\":1}}],[\"智能引用\",{\"1\":{\"36\":1}}],[\"远程代理\",{\"1\":{\"36\":1}}],[\"保本第一\",{\"1\":{\"108\":1}}],[\"保本\",{\"1\":{\"103\":1}}],[\"保存多个备忘录会占用较多内存\",{\"1\":{\"42\":1}}],[\"保持了对象的封装性\",{\"1\":{\"42\":1}}],[\"保护代理\",{\"1\":{\"36\":1}}],[\"保护真实对象\",{\"1\":{\"36\":2}}],[\"保证唯一性\",{\"1\":{\"28\":1}}],[\"缓存结果等\",{\"1\":{\"36\":1}}],[\"控制器硬件可以理解为身体\",{\"1\":{\"72\":1}}],[\"控制系统而设计的\",{\"1\":{\"53\":1}}],[\"控制子类扩展\",{\"1\":{\"46\":1}}],[\"控制流程\",{\"1\":{\"46\":1}}],[\"控制请求访问\",{\"1\":{\"36\":1}}],[\"控件类型和主题样式\",{\"1\":{\"22\":1}}],[\"输出\",{\"1\":{\"36\":1}}],[\"输出汽车信息\",{\"1\":{\"26\":1}}],[\"由于数组索引是从零开始的\",{\"1\":{\"134\":1}}],[\"由于\",{\"1\":{\"133\":1}}],[\"由于我自己以中短期炒作为主\",{\"1\":{\"102\":1}}],[\"由于我们还没有创建真实汽车对象\",{\"1\":{\"36\":1}}],[\"由于这些控制需检测及交换大量数据\",{\"1\":{\"53\":1}}],[\"由于其高性能\",{\"1\":{\"53\":1}}],[\"由于引入了迭代器对象\",{\"1\":{\"40\":1}}],[\"由于请求是在责任链中传递的\",{\"1\":{\"38\":1}}],[\"由于使用了通用的组件接口\",{\"1\":{\"32\":1}}],[\"此时我才觉得舒服\",{\"1\":{\"109\":1}}],[\"此时代理会将请求转发给真实汽车对象\",{\"1\":{\"36\":1}}],[\"此时代理会检查真实汽车是否可用\",{\"1\":{\"36\":1}}],[\"此时本地git仓库已初始化\",{\"1\":{\"4\":1}}],[\"能提供快速的增长\",{\"1\":{\"111\":1}}],[\"能通过同一接口与服务或代理进行交互\",{\"1\":{\"36\":1}}],[\"能够提升已有代码的灵活性和可复用性\",{\"1\":{\"20\":1}}],[\"服务实现\",{\"1\":{\"36\":1}}],[\"服务\",{\"1\":{\"36\":1}}],[\"服务接口\",{\"1\":{\"36\":2}}],[\"代表智慧\",{\"1\":{\"111\":1}}],[\"代表真实的汽车\",{\"1\":{\"36\":1}}],[\"代码分析\",{\"0\":{\"135\":1}}],[\"代码整洁之道\",{\"1\":{\"48\":1}}],[\"代码复用\",{\"1\":{\"22\":1,\"46\":1}}],[\"代理可以实现远程访问\",{\"1\":{\"36\":1}}],[\"代理可以保护真实对象\",{\"1\":{\"36\":1}}],[\"代理可以延迟创建真实对象\",{\"1\":{\"36\":1}}],[\"代理可以控制对真实对象的访问\",{\"1\":{\"36\":1}}],[\"代理会对其服务对象的整个生命周期进行管理\",{\"1\":{\"36\":1}}],[\"代理完成其任务\",{\"1\":{\"36\":1}}],[\"代理\",{\"1\":{\"36\":2}}],[\"代理必须遵循该接口才能伪装成服务对象\",{\"1\":{\"36\":1}}],[\"代理控制着对于原对象的访问\",{\"1\":{\"36\":1}}],[\"代理模式也有一些缺点\",{\"1\":{\"36\":1}}],[\"代理模式是一种非常有用的设计模式\",{\"1\":{\"36\":1}}],[\"代理模式是一种结构型设计模式\",{\"1\":{\"36\":1}}],[\"代理模式可能会导致代码冗余\",{\"1\":{\"36\":1}}],[\"代理模式可能会降低系统的性能\",{\"1\":{\"36\":1}}],[\"代理模式需要引入额外的代理对象\",{\"1\":{\"36\":1}}],[\"代理模式\",{\"0\":{\"36\":1}}],[\"图形编辑器中的图形等\",{\"1\":{\"35\":1}}],[\"系统中存在大量相似的对象\",{\"1\":{\"35\":1}}],[\"增强可扩展性\",{\"1\":{\"38\":1}}],[\"增强代码的可维护性\",{\"1\":{\"35\":1}}],[\"增加新元素困难\",{\"1\":{\"47\":1}}],[\"增加新操作\",{\"1\":{\"47\":1}}],[\"增加系统的复杂性\",{\"1\":{\"45\":1}}],[\"增加系统复杂性\",{\"1\":{\"39\":1}}],[\"增加系统复杂度\",{\"1\":{\"36\":1}}],[\"增加复杂性\",{\"1\":{\"31\":1}}],[\"增加了类的数量\",{\"1\":{\"40\":1}}],[\"增加了系统的灵活性\",{\"1\":{\"38\":1}}],[\"增加了系统的复杂性\",{\"1\":{\"31\":1,\"33\":2,\"35\":2,\"39\":1}}],[\"增加了系统的复杂度\",{\"1\":{\"24\":2,\"36\":1}}],[\"增加了代码的复杂度\",{\"1\":{\"30\":1}}],[\"增加已有代码的灵活性和可复用性\",{\"1\":{\"20\":1}}],[\"减少了内存的占用\",{\"1\":{\"35\":1}}],[\"减少内存占用\",{\"1\":{\"35\":1}}],[\"减少代码的重复编写\",{\"1\":{\"17\":1}}],[\"否则你无法从股市长久赚到钱\",{\"1\":{\"114\":1}}],[\"否则你就不应留在手里\",{\"1\":{\"103\":1}}],[\"否则气球吹不起来\",{\"1\":{\"111\":1}}],[\"否则别冒险\",{\"1\":{\"109\":1}}],[\"否则即刻止损离场\",{\"1\":{\"109\":1}}],[\"否则这里讲的一切都是空的\",{\"1\":{\"104\":1}}],[\"否则只是白日梦\",{\"1\":{\"103\":1}}],[\"否则的话\",{\"1\":{\"102\":1}}],[\"否则便是不正常运动\",{\"1\":{\"102\":1}}],[\"否则创建一个新的汽车享元对象并添加到工厂中\",{\"1\":{\"35\":1}}],[\"否则可能会导致引用的对象被多个克隆对象共享\",{\"1\":{\"27\":1}}],[\"享元工厂结构体\",{\"1\":{\"35\":1}}],[\"享元工厂\",{\"1\":{\"35\":1}}],[\"享元\",{\"1\":{\"35\":1}}],[\"享元模式也有一些缺点\",{\"1\":{\"35\":1}}],[\"享元模式是一种通过共享对象来减少内存占用和提高性能的设计模式\",{\"1\":{\"35\":1}}],[\"享元模式是一种结构型设计模式\",{\"1\":{\"35\":1}}],[\"享元模式\",{\"0\":{\"35\":1}}],[\"享元模式和代理模式\",{\"1\":{\"20\":1}}],[\"让你能够提供对象的替代品或其占位符\",{\"1\":{\"36\":1}}],[\"让你能在有限的内存容量中载入更多对象\",{\"1\":{\"35\":1}}],[\"让我们以junit为例来解释这个原则\",{\"1\":{\"22\":1}}],[\"让我们看一个简化的示例\",{\"1\":{\"22\":1}}],[\"让我们通过一个简单的代码示例来说明这个概念\",{\"1\":{\"22\":1}}],[\"释放全局状态\",{\"1\":{\"44\":1}}],[\"释放汽车经销商对象\",{\"1\":{\"34\":1}}],[\"释放内存\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"33\":1,\"35\":1}}],[\"销售汽车\",{\"1\":{\"34\":2}}],[\"子系统类通常包含一些与子系统相关的业务逻辑\",{\"1\":{\"34\":1}}],[\"子系统类是外观模式的组成部分\",{\"1\":{\"34\":1}}],[\"子系统类\",{\"1\":{\"34\":1}}],[\"子类可以通过覆盖抽象方法来改变算法的某些步骤\",{\"1\":{\"46\":1}}],[\"子类对象可以被当作其超类对象使用\",{\"1\":{\"22\":1}}],[\"子类应该能够完全替代父类\",{\"1\":{\"22\":1}}],[\"子类继承父类的目的是对父类的拓展\",{\"1\":{\"14\":1}}],[\"子类必须实现该接口\",{\"1\":{\"14\":1}}],[\"外观类通常包含一些与子系统相关的业务逻辑\",{\"1\":{\"34\":1}}],[\"外观类是外观模式的核心\",{\"1\":{\"34\":1}}],[\"外观类\",{\"1\":{\"34\":1}}],[\"外观模式适用于当需要为一个复杂的子系统提供一个简单的接口\",{\"1\":{\"34\":1}}],[\"外观模式的优点是简化了客户端的代码\",{\"1\":{\"34\":1}}],[\"外观模式可以将子系统中的具体实现类隐藏起来\",{\"1\":{\"34\":1}}],[\"外观模式可以为一个复杂的子系统提供一个简单的接口\",{\"1\":{\"34\":1}}],[\"外观模式可以根据客户端的需求\",{\"1\":{\"34\":2}}],[\"外观模式将子系统中的具体实现类隐藏起来\",{\"1\":{\"34\":2}}],[\"外观模式为子系统中的一组接口提供了一个统一的高层接口\",{\"1\":{\"34\":2}}],[\"外观模式是一种结构型设计模式\",{\"1\":{\"34\":2}}],[\"外观模式\",{\"0\":{\"34\":1},\"1\":{\"20\":1}}],[\"简而言之\",{\"1\":{\"122\":1}}],[\"简单到普通民众能\",{\"1\":{\"111\":1}}],[\"简化了消息的传递\",{\"1\":{\"43\":1}}],[\"简化了状态管理\",{\"1\":{\"42\":2}}],[\"简化了客户端的代码\",{\"1\":{\"34\":1}}],[\"简化状态管理\",{\"1\":{\"42\":1}}],[\"简化对象交互\",{\"1\":{\"41\":1}}],[\"简化代码\",{\"1\":{\"33\":1}}],[\"简洁的设计思路\",{\"1\":{\"17\":1}}],[\"符合单一职责原则\",{\"1\":{\"44\":1}}],[\"符合开放\",{\"1\":{\"43\":1,\"45\":1}}],[\"符合开闭原则\",{\"1\":{\"33\":2,\"47\":1}}],[\"符号表示\",{\"0\":{\"13\":1}}],[\"遵循开闭原则\",{\"1\":{\"33\":1}}],[\"动\",{\"1\":{\"106\":1}}],[\"动态切换\",{\"1\":{\"45\":1}}],[\"动态地选择不同的子系统实现类\",{\"1\":{\"34\":2}}],[\"动态地给对象添加新的功能\",{\"1\":{\"33\":3}}],[\"动态扩展\",{\"1\":{\"33\":1}}],[\"动机\",{\"1\":{\"18\":1}}],[\"为runnable配置触发器\",{\"0\":{\"168\":1}}],[\"为autosar\",{\"1\":{\"160\":1}}],[\"为自己立些规矩\",{\"1\":{\"114\":1}}],[\"为汽车添加了gps和天窗功能\",{\"1\":{\"33\":1}}],[\"为了使传统燃油汽车能够使用电动汽车的充电接口\",{\"1\":{\"30\":1}}],[\"为了使用生成器模式创建汽车\",{\"1\":{\"26\":1}}],[\"为了避免这种情况\",{\"1\":{\"22\":1}}],[\"宝马\",{\"1\":{\"33\":1}}],[\"演示了如何使用装饰模式来为一个汽车添加不同的功能\",{\"1\":{\"33\":1}}],[\"起到给component添加职责的功能\",{\"1\":{\"33\":1}}],[\"从效率的角度来看\",{\"1\":{\"122\":1}}],[\"从什么都不懂到有信心不断地从股市赚到钱\",{\"1\":{\"110\":1}}],[\"从小开始\",{\"1\":{\"109\":1}}],[\"从心理上它们最容易解释\",{\"1\":{\"104\":1}}],[\"从cp到ap\",{\"1\":{\"76\":1}}],[\"从备忘录恢复状态\",{\"1\":{\"42\":2}}],[\"从外类来扩展component类的功能\",{\"1\":{\"33\":1}}],[\"从而可获取type的字节大小\",{\"1\":{\"135\":1}}],[\"从而实现低耦合\",{\"1\":{\"43\":1}}],[\"从而实现松散耦合\",{\"1\":{\"41\":1}}],[\"从而实现不同的产品创建过程\",{\"1\":{\"26\":1}}],[\"从而支持宏命令\",{\"1\":{\"39\":1}}],[\"从而使得不同的子类可以在不改变算法结构的情况下重新定义算法的某些步骤\",{\"1\":{\"46\":1}}],[\"从而使你可以用不同的请求对客户进行参数化\",{\"1\":{\"39\":1}}],[\"从而使代码难以维护和理解\",{\"1\":{\"22\":1}}],[\"从而避免请求的发送者和接收者之间的耦合关系\",{\"1\":{\"38\":1}}],[\"从而避免了重复创建对象的开销\",{\"1\":{\"27\":1}}],[\"从而减少了客户端的代码量\",{\"1\":{\"34\":1}}],[\"从而简化了代码的结构\",{\"1\":{\"33\":3}}],[\"从而降低了系统的性能\",{\"1\":{\"33\":1}}],[\"从而降低了代码的性能\",{\"1\":{\"30\":1}}],[\"从而降低软件维护的成本和风险\",{\"1\":{\"11\":1}}],[\"从而降低软件开发的成本和风险\",{\"1\":{\"11\":1}}],[\"从而增加了系统的开销\",{\"1\":{\"34\":1}}],[\"从而增加了系统的维护成本\",{\"1\":{\"24\":1}}],[\"从而增加了代码的复杂度\",{\"1\":{\"30\":1}}],[\"从而引发问题\",{\"1\":{\"27\":1}}],[\"从而提高安全性\",{\"1\":{\"36\":1}}],[\"从而提高性能\",{\"1\":{\"36\":1}}],[\"从而提高了代码的可维护性\",{\"1\":{\"33\":1}}],[\"从而提高了代码的可扩展性\",{\"1\":{\"30\":1}}],[\"从而提高了代码的灵活性\",{\"1\":{\"30\":1}}],[\"从而提高了代码的复用性\",{\"1\":{\"30\":1}}],[\"从而提高了系统的可维护性\",{\"1\":{\"34\":3}}],[\"从而提高了系统的灵活性\",{\"1\":{\"25\":2,\"34\":2}}],[\"从而提高了系统的封装性和安全性\",{\"1\":{\"24\":1}}],[\"从而提高团队的整体素质和竞争力\",{\"1\":{\"11\":1}}],[\"从而提高软件开发的效率\",{\"1\":{\"11\":1}}],[\"装饰抽象类\",{\"1\":{\"33\":1}}],[\"装饰\",{\"1\":{\"33\":1}}],[\"装饰模式遵循开闭原则\",{\"1\":{\"33\":1}}],[\"装饰模式是一种非常有用的设计模式\",{\"1\":{\"33\":1}}],[\"装饰模式需要创建多个装饰类\",{\"1\":{\"33\":2}}],[\"装饰模式将功能分解为多个独立的装饰类\",{\"1\":{\"33\":1}}],[\"装饰模式可以将复杂的功能分解为多个简单的装饰类\",{\"1\":{\"33\":3}}],[\"装饰模式可以在不修改原有代码的情况下\",{\"1\":{\"33\":2}}],[\"装饰模式可以在不改变原有对象结构的情况下\",{\"1\":{\"33\":2}}],[\"装饰模式的主要角色包括\",{\"1\":{\"33\":1}}],[\"装饰模式\",{\"0\":{\"33\":1},\"1\":{\"20\":1,\"33\":1}}],[\"也别将\",{\"1\":{\"109\":1}}],[\"也不是不知道危险\",{\"1\":{\"103\":1}}],[\"也不要悔\",{\"1\":{\"96\":1}}],[\"也可以给这个对象添加一些职责\",{\"1\":{\"33\":1}}],[\"也就是说\",{\"1\":{\"22\":5}}],[\"允许向一个现有的对象添加新的功能\",{\"1\":{\"33\":1}}],[\"展示了如何使用extern来模拟类和对象的概念\",{\"1\":{\"129\":1}}],[\"展示了如何通过模板方法模式实现经济型汽车和豪华型汽车的制造过程\",{\"1\":{\"46\":1}}],[\"展示了策略模式如何在实际项目中使用\",{\"1\":{\"45\":1}}],[\"展示了状态模式如何在实际项目中使用\",{\"1\":{\"44\":1}}],[\"展示了观察者模式如何在实际项目中使用\",{\"1\":{\"43\":1}}],[\"展示了备忘录模式如何在实际项目中使用\",{\"1\":{\"42\":1}}],[\"展示了中介者模式如何在实际项目中使用\",{\"1\":{\"41\":1}}],[\"展示了迭代器模式如何在实际项目中使用\",{\"1\":{\"40\":1}}],[\"展示了责任链模式如何在实际项目中使用\",{\"1\":{\"38\":1}}],[\"展示了组合模式如何在实际项目中使用\",{\"1\":{\"32\":1}}],[\"展示模式的各个部分和它们之间的关系\",{\"1\":{\"18\":1}}],[\"清晰的层次结构\",{\"1\":{\"32\":1}}],[\"清理内存\",{\"1\":{\"31\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"45\":1}}],[\"最初指出气球会破的人随着气球的不断胀大而被嘲笑\",{\"1\":{\"111\":1}}],[\"最好只买九只股票\",{\"1\":{\"109\":1}}],[\"最好在升势或突破阻力线\",{\"1\":{\"105\":1}}],[\"最高点卖股\",{\"1\":{\"109\":1}}],[\"最低价是10元\",{\"1\":{\"108\":1}}],[\"最足的类别股中\",{\"1\":{\"106\":1}}],[\"最足的类别股后\",{\"1\":{\"106\":1}}],[\"最足的股类中选择一两只\",{\"1\":{\"106\":1}}],[\"最足\",{\"1\":{\"106\":1}}],[\"最有用的概念是阻力线和支撑线\",{\"1\":{\"104\":1}}],[\"最痛苦的不是亏钱的数目\",{\"1\":{\"103\":1}}],[\"最少阻力线\",{\"1\":{\"103\":1}}],[\"最流行的\",{\"1\":{\"102\":1}}],[\"最重要的是每天要追踪股票指数的运动\",{\"1\":{\"102\":1}}],[\"最终调用组合节点的操作方法来展示组合模式的工作方式\",{\"1\":{\"32\":1}}],[\"最后提醒你\",{\"1\":{\"96\":1}}],[\"最后\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"30\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"还包含一个指向聚合对象的指针\",{\"1\":{\"40\":1}}],[\"还包含一个名称属性\",{\"1\":{\"32\":1}}],[\"还通过具体的代码示例和uml图\",{\"1\":{\"9\":1}}],[\"测试代码\",{\"1\":{\"47\":1}}],[\"测试策略模式\",{\"1\":{\"45\":1}}],[\"测试状态模式\",{\"1\":{\"44\":1}}],[\"测试观察者模式\",{\"1\":{\"43\":1}}],[\"测试备忘录模式\",{\"1\":{\"42\":1}}],[\"测试中介者模式\",{\"1\":{\"41\":1}}],[\"测试迭代器模式\",{\"1\":{\"40\":1}}],[\"测试命令模式\",{\"1\":{\"39\":1}}],[\"测试责任链\",{\"1\":{\"38\":1}}],[\"测试函数\",{\"1\":{\"33\":1}}],[\"测试组合模式\",{\"1\":{\"32\":2}}],[\"测试类告诉junit框架它有哪些测试方法\",{\"1\":{\"22\":1}}],[\"over\",{\"1\":{\"165\":1}}],[\"overwrite\",{\"1\":{\"140\":1}}],[\"output\",{\"1\":{\"140\":2}}],[\"open\",{\"1\":{\"140\":1}}],[\"operations\",{\"1\":{\"165\":2}}],[\"operation\",{\"1\":{\"32\":7}}],[\"options\",{\"1\":{\"140\":2}}],[\"optimized\",{\"1\":{\"76\":1}}],[\"own\",{\"1\":{\"76\":1}}],[\"osek\",{\"1\":{\"76\":1}}],[\"one\",{\"1\":{\"165\":1}}],[\"only\",{\"1\":{\"140\":1}}],[\"on\",{\"1\":{\"76\":2,\"146\":2}}],[\"object\",{\"1\":{\"47\":1,\"163\":1,\"164\":1}}],[\"observercount\",{\"1\":{\"43\":2}}],[\"observers\",{\"1\":{\"43\":4}}],[\"observer\",{\"0\":{\"43\":1},\"1\":{\"43\":27}}],[\"of\",{\"0\":{\"38\":1},\"1\":{\"39\":2,\"46\":6,\"76\":2,\"109\":1,\"140\":3}}],[\"or\",{\"1\":{\"140\":1,\"165\":1}}],[\"oriented\",{\"1\":{\"76\":1,\"163\":4}}],[\"originator\",{\"1\":{\"42\":2}}],[\"original\",{\"1\":{\"27\":6}}],[\"origin\",{\"1\":{\"4\":2}}],[\"org\",{\"1\":{\"22\":2,\"148\":1}}],[\"既可以是叶子也可以是其他容器\",{\"1\":{\"32\":1}}],[\"容器\",{\"1\":{\"32\":2}}],[\"language\",{\"0\":{\"180\":1}}],[\"large\",{\"1\":{\"46\":1}}],[\"linux上\",{\"1\":{\"147\":1}}],[\"links\",{\"1\":{\"140\":2}}],[\"list\",{\"1\":{\"140\":2}}],[\"library\",{\"1\":{\"140\":1,\"148\":1}}],[\"lighttextbox\",{\"1\":{\"22\":1}}],[\"lighttheme\",{\"1\":{\"22\":3}}],[\"lightbutton\",{\"1\":{\"22\":1}}],[\"location\",{\"1\":{\"141\":3}}],[\"local级是仓库级别的配置\",{\"1\":{\"91\":1}}],[\"local\",{\"1\":{\"90\":1,\"91\":1,\"140\":2}}],[\"local三个级别的代理配置及优先级\",{\"1\":{\"87\":1}}],[\"loaded\",{\"1\":{\"76\":1}}],[\"l线上的电位差来表示can信号\",{\"1\":{\"56\":1}}],[\"luxury\",{\"1\":{\"46\":6}}],[\"luxurycar\",{\"1\":{\"46\":9}}],[\"leafgetchild\",{\"1\":{\"32\":2}}],[\"leafremove\",{\"1\":{\"32\":2}}],[\"leafadd\",{\"1\":{\"32\":2}}],[\"leafoperation\",{\"1\":{\"32\":2}}],[\"leaf\",{\"1\":{\"32\":19}}],[\"叶子节点没有子节点\",{\"1\":{\"32\":1}}],[\"叶子节点不能移除子节点\",{\"1\":{\"32\":1}}],[\"叶子节点不能添加子节点\",{\"1\":{\"32\":1}}],[\"叶子\",{\"1\":{\"32\":2}}],[\"部分\",{\"1\":{\"32\":1}}],[\"部署到gitpages\",{\"0\":{\"4\":1}}],[\"引言\",{\"0\":{\"96\":1}}],[\"引入了许多新类和对象\",{\"1\":{\"39\":1}}],[\"引入了更多的类和接口\",{\"1\":{\"31\":1}}],[\"引擎检查器\",{\"1\":{\"38\":1}}],[\"引擎\",{\"1\":{\"22\":1,\"41\":1}}],[\"引擎是一个低层模块\",{\"1\":{\"22\":1}}],[\"分散风险\",{\"1\":{\"109\":1}}],[\"分为显性电平\",{\"1\":{\"56\":1}}],[\"分离关注点\",{\"1\":{\"47\":1}}],[\"分离遍历算法\",{\"1\":{\"40\":1}}],[\"分离抽象和实现\",{\"1\":{\"31\":1}}],[\"分别实现了不同的驾驶模式\",{\"1\":{\"45\":1}}],[\"分别实现了状态接口的具体行为\",{\"1\":{\"44\":1}}],[\"分别实现了carsystem接口的方法\",{\"1\":{\"31\":1}}],[\"分别用于添加gps和天窗功能\",{\"1\":{\"33\":1}}],[\"分别用于为汽车添加gps和天窗功能\",{\"1\":{\"33\":1}}],[\"分类和应用场景\",{\"1\":{\"9\":1}}],[\"轿车\",{\"1\":{\"31\":1}}],[\"扩展对象的功能\",{\"1\":{\"33\":4}}],[\"扩展抽象部分的接口\",{\"1\":{\"31\":1}}],[\"扩展抽象部分\",{\"1\":{\"31\":4}}],[\"扩展性强\",{\"1\":{\"39\":1}}],[\"扩展性\",{\"1\":{\"22\":1,\"46\":1}}],[\"降低耦合\",{\"1\":{\"41\":1}}],[\"降低耦合度\",{\"1\":{\"38\":1}}],[\"降低了对象之间的耦合度\",{\"1\":{\"41\":2}}],[\"降低了发送者和接收者的耦合度\",{\"1\":{\"38\":1}}],[\"降低了系统的性能\",{\"1\":{\"33\":1}}],[\"降低了代码的性能\",{\"1\":{\"30\":1}}],[\"降低类的数量\",{\"1\":{\"31\":1}}],[\"降低维护成本\",{\"1\":{\"22\":1}}],[\"将值\",{\"1\":{\"135\":2}}],[\"将这个地址转换为\",{\"1\":{\"135\":1}}],[\"将这些对象连成一条链\",{\"1\":{\"38\":1}}],[\"将整数\",{\"1\":{\"135\":1}}],[\"将一个空指针转换为类型\",{\"1\":{\"134\":1}}],[\"将一些步骤延迟到子类中实现\",{\"1\":{\"46\":2}}],[\"将玩的费用分散些\",{\"1\":{\"113\":1}}],[\"将它当成是娱乐场所\",{\"1\":{\"113\":1}}],[\"将注意力集中在三至五只最有潜力的股票\",{\"1\":{\"109\":1}}],[\"将相关的操作集中到一个访问者中\",{\"1\":{\"47\":1}}],[\"将遍历算法与集合对象分离\",{\"1\":{\"40\":1}}],[\"将汽车对象添加到集合中\",{\"1\":{\"40\":1}}],[\"将请求委托给接收者执行\",{\"1\":{\"39\":1}}],[\"将请求的发送者和接收者解耦\",{\"1\":{\"38\":1}}],[\"将真实汽车对象与代理关联\",{\"1\":{\"36\":1}}],[\"将对象的状态分离出来\",{\"1\":{\"35\":1}}],[\"将零部件添加到汽车\",{\"1\":{\"32\":1}}],[\"将现有的接口转换为客户端期望的接口\",{\"1\":{\"30\":3}}],[\"将传统燃油汽车对象作为参数传递给适配器的构造函数\",{\"1\":{\"30\":1}}],[\"将源接口转换为目标接口的对象\",{\"1\":{\"30\":1}}],[\"源接口\",{\"1\":{\"30\":1}}],[\"适当加注\",{\"1\":{\"109\":1}}],[\"适时进货\",{\"1\":{\"103\":1}}],[\"适用于需要频繁保存和恢复对象状态的场景\",{\"1\":{\"42\":1}}],[\"适用于需要在没有客户端使用某个重量级对象时立即销毁该对象的场景\",{\"1\":{\"36\":1}}],[\"适用于需要保护真实对象的场景\",{\"1\":{\"36\":1}}],[\"适用于需要延迟初始化的场景\",{\"1\":{\"36\":1}}],[\"适用于需要访问远程对象的场景\",{\"1\":{\"36\":1}}],[\"适用场景\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"适配器\",{\"1\":{\"30\":1}}],[\"适配器模式适用于需要将现有的接口转换为客户端期望的接口的场景\",{\"1\":{\"30\":1}}],[\"适配器模式的优点是提高了代码的复用性\",{\"1\":{\"30\":1}}],[\"适配器模式需要将现有的接口转换为客户端期望的接口\",{\"1\":{\"30\":1}}],[\"适配器模式需要定义一个适配器类\",{\"1\":{\"30\":1}}],[\"适配器模式可以在不修改现有代码的情况下\",{\"1\":{\"30\":2}}],[\"适配器模式可以将现有的接口转换为客户端期望的接口\",{\"1\":{\"30\":1}}],[\"适配器模式是一种结构型设计模式\",{\"1\":{\"30\":2}}],[\"适配器模式\",{\"0\":{\"30\":1}}],[\"唯一标识符生成器等\",{\"1\":{\"28\":1}}],[\"避免买太多股票\",{\"1\":{\"109\":1}}],[\"避免代码重复\",{\"1\":{\"46\":1}}],[\"避免多重条件语句\",{\"1\":{\"45\":1}}],[\"避免暴露内部细节\",{\"1\":{\"42\":1}}],[\"避免对象之间的直接依赖\",{\"1\":{\"41\":1}}],[\"避免其直接暴露在客户端代码中\",{\"1\":{\"36\":1}}],[\"避免了代码重复\",{\"1\":{\"46\":1}}],[\"避免了重复创建相同的对象\",{\"1\":{\"35\":1}}],[\"避免了多次创建和销毁实例所带来的资源浪费\",{\"1\":{\"28\":1}}],[\"避免了多个实例之间的竞争和冲突\",{\"1\":{\"28\":1}}],[\"避免出现内存泄漏等问题\",{\"1\":{\"28\":1}}],[\"避免重复生成\",{\"1\":{\"28\":1}}],[\"避免资源竞争和冲突\",{\"1\":{\"28\":1}}],[\"网络连接等\",{\"1\":{\"28\":1}}],[\"资源共享的对象\",{\"1\":{\"28\":2}}],[\"不正常\",{\"1\":{\"114\":2}}],[\"不开心的游戏便快些离开\",{\"1\":{\"113\":1}}],[\"不读华尔街证券行的研究报告\",{\"1\":{\"109\":1}}],[\"不标新立异等等都成为炒股成功的障碍\",{\"1\":{\"103\":1}}],[\"不要尝试成为万事通\",{\"1\":{\"109\":1}}],[\"不要将钱全部投入股市\",{\"1\":{\"109\":1}}],[\"不要第一次就入市太深\",{\"1\":{\"109\":1}}],[\"不要不懂装懂\",{\"1\":{\"109\":1}}],[\"不要向下摊也可用另一种说法\",{\"1\":{\"109\":1}}],[\"不要向下摊平\",{\"1\":{\"109\":1}}],[\"不要试图寻找股票的最高点\",{\"1\":{\"107\":1}}],[\"不要把\",{\"1\":{\"105\":2}}],[\"不要把技术分析孤立起来看\",{\"1\":{\"102\":1}}],[\"不要怕\",{\"1\":{\"96\":1}}],[\"不会执行实际的运算\",{\"1\":{\"133\":1}}],[\"不会马上停止\",{\"1\":{\"101\":1}}],[\"不会暴露对象的内部细节\",{\"1\":{\"42\":1}}],[\"不贪\",{\"1\":{\"96\":1}}],[\"不适合用于频繁变化的对象\",{\"1\":{\"35\":1}}],[\"不希望使用继承或层次过深的继承结构\",{\"1\":{\"31\":1}}],[\"不同的命令可以控制汽车的操作\",{\"1\":{\"39\":1}}],[\"不同的汽车零部件\",{\"1\":{\"32\":1}}],[\"不同的实现方式或不同的配置选项的场景\",{\"1\":{\"26\":1}}],[\"不同类型的汽车可以使用不同的操作系统\",{\"1\":{\"31\":1}}],[\"不同类型的汽车\",{\"1\":{\"31\":1}}],[\"不支持多线程\",{\"1\":{\"28\":1}}],[\"难以在测试中进行模拟和控制\",{\"1\":{\"28\":1}}],[\"难以测试\",{\"1\":{\"28\":2}}],[\"违反了单一职责原则\",{\"1\":{\"28\":1}}],[\"违反单一职责原则\",{\"1\":{\"28\":1}}],[\"节省资源和提高性能\",{\"1\":{\"28\":1}}],[\"节省资源\",{\"1\":{\"28\":1}}],[\"则必须首先定义数据类型\",{\"1\":{\"165\":1}}],[\"则你将常常在高点入市\",{\"1\":{\"103\":1}}],[\"则直接返回该实例\",{\"1\":{\"28\":1}}],[\"则创建一个新的汽车实例并将其赋值给instance\",{\"1\":{\"28\":1}}],[\"生成模板\",{\"0\":{\"169\":1}}],[\"生成requirements\",{\"1\":{\"141\":1}}],[\"生成器接口\",{\"1\":{\"26\":1}}],[\"生成器\",{\"1\":{\"26\":1}}],[\"生成器模式适用于需要创建的对象具有复杂的结构\",{\"1\":{\"26\":1}}],[\"生成器模式的优点是封装性\",{\"1\":{\"26\":1}}],[\"生成器模式在创建产品时需要进行多次方法调用\",{\"1\":{\"26\":1}}],[\"生成器模式需要定义多个类来实现产品的创建过程\",{\"1\":{\"26\":1}}],[\"生成器模式可以很容易地添加新的产品类型和创建过程\",{\"1\":{\"26\":1}}],[\"生成器模式可以根据不同的需求创建不同的生成器类\",{\"1\":{\"26\":1}}],[\"生成器模式将产品的创建过程封装在生成器类中\",{\"1\":{\"26\":1}}],[\"生成器模式是一种创建型设计模式\",{\"1\":{\"26\":2}}],[\"生成器模式\",{\"0\":{\"26\":1},\"1\":{\"20\":1}}],[\"生效优先级\",{\"0\":{\"91\":1}}],[\"生产年份和车辆类型\",{\"1\":{\"28\":1}}],[\"包换can的状态管理以及pdu和信号的处理相关的模块\",{\"1\":{\"58\":1}}],[\"包括用于区分can通信的接口\",{\"1\":{\"58\":1}}],[\"包括一系列步骤\",{\"1\":{\"46\":1}}],[\"包括一些抽象方法来延迟到子类实现\",{\"1\":{\"46\":1}}],[\"包括\",{\"1\":{\"44\":2,\"45\":1}}],[\"包括汽车的状态\",{\"1\":{\"42\":1}}],[\"包括引擎\",{\"1\":{\"41\":1}}],[\"包括playmusic和navigate方法\",{\"1\":{\"31\":1}}],[\"包括车型\",{\"1\":{\"28\":1}}],[\"包含汽车对象的集合\",{\"1\":{\"40\":1}}],[\"包含汽车的模型和年份信息\",{\"1\":{\"24\":1}}],[\"包含了具体的共享状态\",{\"1\":{\"35\":1}}],[\"包含了一个对象的部分状态\",{\"1\":{\"35\":1}}],[\"包含操作方法\",{\"1\":{\"32\":1}}],[\"包含子节点\",{\"1\":{\"32\":1}}],[\"包含一个指向服务对象的引用成员变量\",{\"1\":{\"36\":1}}],[\"包含一个指向carsystem的指针\",{\"1\":{\"31\":1}}],[\"包含一个私有构造函数\",{\"1\":{\"28\":1}}],[\"包含一个抽象的产品方法\",{\"1\":{\"24\":1}}],[\"包含多个部件\",{\"1\":{\"26\":1}}],[\"单例类\",{\"1\":{\"28\":2}}],[\"单例模式适用于需要全局访问的对象\",{\"1\":{\"28\":1}}],[\"单例模式的优点是保证唯一性\",{\"1\":{\"28\":1}}],[\"单例模式的实例是在程序启动时创建的\",{\"1\":{\"28\":1}}],[\"单例模式是一种简单而实用的设计模式\",{\"1\":{\"28\":1}}],[\"单例模式是一种创建型设计模式\",{\"1\":{\"28\":1}}],[\"单例模式可能会出现线程安全问题\",{\"1\":{\"28\":1}}],[\"单例模式将创建实例和管理实例的职责集中在一个类中\",{\"1\":{\"28\":1}}],[\"单例模式避免了多个实例之间的竞争和冲突\",{\"1\":{\"28\":1}}],[\"单例模式只创建一个实例\",{\"1\":{\"28\":1}}],[\"单例模式提供了一个全局访问点来访问唯一的实例\",{\"1\":{\"28\":1}}],[\"单例模式保证一个类只有一个实例\",{\"1\":{\"28\":1}}],[\"单例模式\",{\"0\":{\"28\":1}}],[\"单一职责原则\",{\"1\":{\"22\":1}}],[\"修改克隆汽车的信息\",{\"1\":{\"27\":1}}],[\"克隆新汽车\",{\"1\":{\"27\":1}}],[\"克隆函数\",{\"1\":{\"27\":1}}],[\"该出手时就出手\",{\"1\":{\"109\":1}}],[\"该方法有时还需处理克隆过程中的极端情况\",{\"1\":{\"27\":1}}],[\"该模式允许你使用相同的创建代码生成不同类型和形式的对象\",{\"1\":{\"26\":2}}],[\"设置代理\",{\"0\":{\"89\":1}}],[\"设置策略\",{\"1\":{\"45\":1}}],[\"设置中介者的同事类\",{\"1\":{\"41\":1}}],[\"设置并执行停止引擎命令\",{\"1\":{\"39\":1}}],[\"设置责任链\",{\"1\":{\"38\":2}}],[\"设置下一个检查者\",{\"1\":{\"38\":1}}],[\"设置汽车类型\",{\"1\":{\"26\":1}}],[\"设置汽车年份\",{\"1\":{\"26\":1}}],[\"设置汽车模型\",{\"1\":{\"26\":1}}],[\"设计软件组件架构\",{\"1\":{\"160\":1}}],[\"设计\",{\"0\":{\"162\":1},\"1\":{\"22\":1}}],[\"设计应该能够适应未来的变化和扩展\",{\"1\":{\"22\":1}}],[\"设计原则\",{\"1\":{\"22\":1}}],[\"设计模式解析\",{\"1\":{\"48\":1}}],[\"设计模式可以分为创建型模式\",{\"1\":{\"20\":1}}],[\"设计模式可以根据具体的需求进行调整和扩展\",{\"1\":{\"17\":1}}],[\"设计模式提供了一种清晰\",{\"1\":{\"17\":1}}],[\"设计模式提供了一种通用的解决方案\",{\"1\":{\"11\":1,\"17\":1}}],[\"设计模式是针对软件设计中常见问题的解决方案\",{\"1\":{\"17\":1}}],[\"设计模式是软件开发中的经验总结\",{\"1\":{\"11\":2}}],[\"设计模式是软件设计中常见问题的典型解决方案\",{\"1\":{\"10\":1,\"17\":1}}],[\"设计模式通常具有以下特点\",{\"1\":{\"17\":1}}],[\"设计模式通常具有良好的结构和组织\",{\"1\":{\"11\":1}}],[\"设计模式的分类\",{\"0\":{\"20\":1}}],[\"设计模式的目的是提高软件的可复用性\",{\"1\":{\"17\":1}}],[\"设计模式的概念\",{\"0\":{\"17\":1}}],[\"设计模式并不是一段特定的代码\",{\"1\":{\"17\":1}}],[\"设计模式逐渐成为软件开发领域的重要组成部分\",{\"1\":{\"10\":1}}],[\"设计模式\",{\"1\":{\"10\":1,\"48\":2},\"2\":{\"50\":1}}],[\"声明全局变量\",{\"1\":{\"128\":1}}],[\"声明函数的存在\",{\"1\":{\"128\":1}}],[\"声明是告诉编译器有一个这样的变量或函数存在\",{\"1\":{\"127\":1}}],[\"声明生成器\",{\"1\":{\"26\":1}}],[\"声明了服务接口\",{\"1\":{\"36\":1}}],[\"声明了克隆方法的接口\",{\"1\":{\"27\":1}}],[\"声明了创建产品对象的抽象接口\",{\"1\":{\"26\":1}}],[\"声明了一组创建抽象产品的方法\",{\"1\":{\"25\":1}}],[\"语言的一个运算符\",{\"1\":{\"133\":1}}],[\"语言汽车举例\",{\"1\":{\"35\":1,\"36\":1}}],[\"语言举汽车例子\",{\"1\":{\"26\":1,\"28\":1,\"30\":1}}],[\"语言示例\",{\"1\":{\"24\":1}}],[\"用移动止损点来卖股票\",{\"1\":{\"108\":1}}],[\"用你自己发现的临界点\",{\"1\":{\"106\":1}}],[\"用不着很多力气\",{\"1\":{\"101\":1}}],[\"用来炒股的实用性不大\",{\"1\":{\"99\":1}}],[\"用于返回一个对象或数据类型的大小\",{\"1\":{\"133\":1}}],[\"用于实现事件处理和广播机制\",{\"1\":{\"43\":1}}],[\"用于同事类之间的通信\",{\"1\":{\"41\":1}}],[\"用于遍历\",{\"1\":{\"40\":1}}],[\"用于创建和管理汽车享元对象\",{\"1\":{\"35\":1}}],[\"用于管理其子节点\",{\"1\":{\"32\":1}}],[\"用于存储唯一的汽车实例\",{\"1\":{\"28\":1}}],[\"用于模拟继承\",{\"1\":{\"26\":1}}],[\"用\",{\"1\":{\"26\":1,\"28\":1,\"30\":1,\"35\":1,\"36\":1}}],[\"主干需求与术语\",{\"1\":{\"74\":1}}],[\"主要分为dio控制的和spi控制的\",{\"1\":{\"63\":1}}],[\"主要配置相关api的使能以及是否支持唤醒等功能\",{\"1\":{\"63\":1}}],[\"主要数处理can的控制器中的功能\",{\"1\":{\"59\":1}}],[\"主要包括can的driver\",{\"1\":{\"58\":1}}],[\"主要结构说明\",{\"1\":{\"31\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1}}],[\"主题可以向所有注册的观察者广播更新通知\",{\"1\":{\"43\":1}}],[\"主题接口\",{\"1\":{\"43\":1}}],[\"主题\",{\"1\":{\"43\":1}}],[\"主管的manufacturecar方法按照一定的顺序调用生成器的方法来创建汽车\",{\"1\":{\"26\":1}}],[\"主管\",{\"1\":{\"26\":2}}],[\"主页\",{\"0\":{\"0\":1}}],[\"产品\",{\"1\":{\"26\":1}}],[\"产品族的扩展较为困难\",{\"1\":{\"25\":1}}],[\"多玩几种游戏\",{\"1\":{\"113\":1}}],[\"多主站结构\",{\"1\":{\"55\":1}}],[\"多级联动更新\",{\"1\":{\"43\":1}}],[\"多个算法有共同的流程\",{\"1\":{\"46\":1}}],[\"多个对象可以处理同一请求\",{\"1\":{\"38\":1}}],[\"多个产品等级结构\",{\"1\":{\"25\":1}}],[\"多重继承\",{\"1\":{\"22\":1}}],[\"针对\",{\"1\":{\"25\":1}}],[\"针对的是\",{\"1\":{\"25\":1}}],[\"且唤醒中断引脚连接sbc的唤醒引脚\",{\"1\":{\"62\":1}}],[\"且希望对这些对象进行不同的操作时\",{\"1\":{\"47\":1}}],[\"且它们之间有一些共同的步骤\",{\"1\":{\"46\":1}}],[\"且它们的创建过程比较复杂时\",{\"1\":{\"24\":1}}],[\"且这些配置选项之间存在差异时\",{\"1\":{\"25\":1,\"26\":1}}],[\"且这些实现方式之间存在差异时\",{\"1\":{\"25\":1,\"26\":1}}],[\"且需要分步骤创建时\",{\"1\":{\"25\":1,\"26\":1}}],[\"需要注意的是\",{\"1\":{\"129\":1,\"134\":1}}],[\"需要注意处理好线程安全问题\",{\"1\":{\"28\":1}}],[\"需要修改所有具体访问者类\",{\"1\":{\"47\":1}}],[\"需要修改具体工厂类的代码\",{\"1\":{\"25\":1}}],[\"需要明确地定义对象在不同状态下的行为\",{\"1\":{\"44\":1}}],[\"需要明确状态转换的场景\",{\"1\":{\"44\":1}}],[\"需要手动管理状态的切换逻辑\",{\"1\":{\"44\":1}}],[\"需要额外处理\",{\"1\":{\"43\":1}}],[\"需要额外的代码来管理享元对象\",{\"1\":{\"35\":1}}],[\"需要避免暴露对象的内部状态\",{\"1\":{\"42\":1}}],[\"需要保存和恢复对象的状态\",{\"1\":{\"42\":1}}],[\"需要保证唯一性的对象\",{\"1\":{\"28\":1}}],[\"需要解耦多个对象之间的交互\",{\"1\":{\"41\":1}}],[\"需要通过一个中介对象来管理这些关系\",{\"1\":{\"41\":1}}],[\"需要支持撤销操作\",{\"1\":{\"42\":1}}],[\"需要支持撤销和重做操作\",{\"1\":{\"39\":1}}],[\"需要支持多种遍历方式\",{\"1\":{\"40\":1}}],[\"需要遍历不同类型的集合对象\",{\"1\":{\"40\":1}}],[\"需要对请求排队和记录日志\",{\"1\":{\"39\":1}}],[\"需要动态选择算法\",{\"1\":{\"45\":1}}],[\"需要动态指定处理请求的对象\",{\"1\":{\"38\":1}}],[\"需要动态地给对象添加新的功能\",{\"1\":{\"33\":1}}],[\"需要根据具体情况进行权衡\",{\"1\":{\"36\":1}}],[\"需要根据具体情况进行权衡和选择\",{\"1\":{\"35\":1}}],[\"需要提高系统的性能\",{\"1\":{\"35\":1}}],[\"需要提高代码的可扩展性\",{\"1\":{\"30\":1}}],[\"需要提高代码的复用性和灵活性\",{\"1\":{\"30\":1}}],[\"需要将复杂的功能分解为多个简单的装饰类\",{\"1\":{\"33\":1}}],[\"需要将现有的接口转换为客户端期望的接口\",{\"1\":{\"30\":1}}],[\"需要在多个类中实现相同的代码\",{\"1\":{\"46\":1}}],[\"需要在一个对象状态发生变化时通知其他对象\",{\"1\":{\"43\":1}}],[\"需要在不修改原有代码的情况下\",{\"1\":{\"33\":1}}],[\"需要在抽象和具体实现之间增加更多的灵活性\",{\"1\":{\"31\":1}}],[\"需要表示对象的部分\",{\"1\":{\"32\":1}}],[\"需要被适配的接口\",{\"1\":{\"30\":1}}],[\"需要频繁创建和销毁的对象和需要保证唯一性的对象\",{\"1\":{\"28\":1}}],[\"需要频繁创建和销毁的对象\",{\"1\":{\"28\":1}}],[\"需要频繁创建对象和对象状态变化较小的场景\",{\"1\":{\"27\":1}}],[\"需要频繁创建对象\",{\"1\":{\"27\":1}}],[\"需要全局访问的对象\",{\"1\":{\"28\":1}}],[\"需要进行特殊处理\",{\"1\":{\"27\":1,\"28\":1}}],[\"需要进行深拷贝\",{\"1\":{\"27\":1}}],[\"需要创建新的具体工厂类\",{\"1\":{\"25\":1}}],[\"无论得到什么\",{\"1\":{\"110\":1}}],[\"无论是理发师\",{\"1\":{\"109\":1}}],[\"无势图\",{\"1\":{\"101\":1}}],[\"无序更新\",{\"1\":{\"43\":1}}],[\"无需修改现有代码\",{\"1\":{\"25\":2}}],[\"无法裁剪\",{\"1\":{\"14\":1}}],[\"七\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"六\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"五\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"封装与上下文的一个特定状态相关的行为\",{\"1\":{\"44\":1}}],[\"封装性\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"42\":1}}],[\"封装变化的内容\",{\"1\":{\"22\":2}}],[\"客户端设置并执行命令\",{\"1\":{\"39\":1}}],[\"客户端代码\",{\"1\":{\"38\":1}}],[\"客户端代码的修改较为困难\",{\"1\":{\"25\":1}}],[\"客户端的代码不需要进行修改\",{\"1\":{\"34\":3}}],[\"客户端只需要与外观类进行交互\",{\"1\":{\"34\":1}}],[\"客户端可以一致地对待单个对象和组合对象\",{\"1\":{\"32\":1}}],[\"客户端可以根据需要选择不同的工厂类来创建不同的产品对象\",{\"1\":{\"24\":1}}],[\"客户端一致性\",{\"1\":{\"32\":1}}],[\"客户端期望的接口\",{\"1\":{\"30\":1}}],[\"客户端\",{\"1\":{\"27\":1,\"28\":1,\"30\":1,\"35\":1,\"36\":2,\"38\":2,\"39\":2}}],[\"客户端不应该被迫依赖于它们不使用的方法\",{\"1\":{\"22\":1}}],[\"优先级\",{\"1\":{\"91\":1}}],[\"优先级通过报文的标识符\",{\"1\":{\"55\":1}}],[\"优点\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"优秀的设计应该具备以下特征\",{\"1\":{\"22\":1}}],[\"优秀设计的特征\",{\"0\":{\"22\":1}}],[\"四\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"四人组\",{\"1\":{\"10\":1}}],[\"方便恢复到之前的状态\",{\"1\":{\"42\":1}}],[\"方便了代码的使用和管理\",{\"1\":{\"28\":1}}],[\"方便创建复杂对象和便于扩展\",{\"1\":{\"27\":1}}],[\"方便创建复杂对象\",{\"1\":{\"27\":1}}],[\"方便后续添加新的汽车类型或修改汽车的创建方式\",{\"1\":{\"24\":1}}],[\"方法初始化对象\",{\"1\":{\"129\":1}}],[\"方法以便访问者访问它的元素\",{\"1\":{\"47\":1}}],[\"方法签名或行为与\",{\"1\":{\"22\":1}}],[\"方法相同\",{\"1\":{\"22\":1}}],[\"方法具有相同的签名和类似的行为\",{\"1\":{\"22\":1}}],[\"方法与超类中的\",{\"1\":{\"22\":1}}],[\"方法\",{\"1\":{\"22\":3,\"32\":2,\"44\":1,\"45\":1,\"46\":1,\"47\":5}}],[\"接收\",{\"1\":{\"58\":1}}],[\"接收者\",{\"1\":{\"39\":2}}],[\"接着\",{\"1\":{\"26\":2,\"33\":1}}],[\"接下来\",{\"1\":{\"24\":1,\"30\":1,\"36\":1,\"129\":1}}],[\"接口隔离原则\",{\"1\":{\"22\":1}}],[\"表示你进入了虚拟环境\",{\"1\":{\"147\":1}}],[\"表示你第一次入场的判断正确\",{\"1\":{\"109\":1}}],[\"表示成功使用extern实现了面向对象编程的模拟\",{\"1\":{\"129\":1}}],[\"表示不同的驾驶模式\",{\"1\":{\"45\":1}}],[\"表示不同类型的汽车\",{\"1\":{\"24\":1}}],[\"表示叶节点对象\",{\"1\":{\"32\":1}}],[\"表示汽车的基本信息\",{\"1\":{\"30\":1}}],[\"表示汽车的类型\",{\"1\":{\"30\":1}}],[\"表示被创建的复杂对象\",{\"1\":{\"26\":1}}],[\"表示私有\",{\"1\":{\"13\":1}}],[\"flask\",{\"1\":{\"140\":1}}],[\"flask>=1\",{\"1\":{\"140\":1}}],[\"flask~=1\",{\"1\":{\"140\":1}}],[\"flexray\",{\"1\":{\"76\":1}}],[\"flyweight\",{\"1\":{\"35\":3}}],[\"found\",{\"1\":{\"172\":1}}],[\"foundation包含了ap和cp之间通用的内容以保证二者之间以及二者与非autosar系统之间的兼容性\",{\"1\":{\"73\":1}}],[\"foundation\",{\"0\":{\"73\":1}}],[\"foundationreleaseoverview\",{\"1\":{\"66\":1,\"80\":1}}],[\"follow\",{\"1\":{\"140\":2}}],[\"fo间的关系\",{\"0\":{\"75\":1}}],[\"fo部分所定义的内容为\",{\"1\":{\"74\":1}}],[\"fo部分所定义的通用特性\",{\"0\":{\"74\":1}}],[\"fo\",{\"0\":{\"73\":1}}],[\"force\",{\"1\":{\"140\":1,\"141\":1}}],[\"ford\",{\"1\":{\"47\":1}}],[\"for\",{\"1\":{\"32\":3,\"35\":1,\"38\":3,\"40\":1,\"43\":3,\"76\":3,\"140\":2}}],[\"f\",{\"1\":{\"47\":1}}],[\"features\",{\"1\":{\"46\":1}}],[\"feed\",{\"1\":{\"22\":7}}],[\"file\",{\"1\":{\"140\":3,\"141\":1,\"163\":1}}],[\"files\",{\"1\":{\"140\":1}}],[\"fixed\",{\"1\":{\"76\":1}}],[\"finalizeluxury\",{\"1\":{\"46\":2}}],[\"finalized\",{\"1\":{\"46\":2}}],[\"finalizeeconomy\",{\"1\":{\"46\":2}}],[\"finalize\",{\"1\":{\"46\":5}}],[\"first\",{\"1\":{\"40\":4,\"44\":1,\"48\":1}}],[\"from\",{\"1\":{\"44\":3,\"76\":2}}],[\"free\",{\"1\":{\"24\":3,\"25\":3,\"26\":3,\"27\":4,\"28\":1,\"31\":4,\"32\":9,\"33\":3,\"34\":2,\"35\":6,\"38\":3,\"39\":2,\"40\":6,\"41\":3,\"42\":2,\"43\":3,\"44\":4,\"45\":4}}],[\"fuel\",{\"1\":{\"42\":5,\"43\":11,\"45\":1}}],[\"fuelcapacity\",{\"1\":{\"30\":2}}],[\"factory\",{\"1\":{\"34\":4,\"35\":18}}],[\"facade\",{\"1\":{\"34\":1}}],[\"your\",{\"1\":{\"140\":1}}],[\"yourusername\",{\"1\":{\"4\":1}}],[\"you\",{\"1\":{\"140\":1}}],[\"year\",{\"1\":{\"24\":1,\"25\":1,\"26\":4,\"27\":4,\"28\":2,\"30\":2,\"34\":1,\"40\":2,\"47\":9}}],[\"三\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"113\":1}}],[\"抽象部署在同一ecu或者不同ecu上的应用之间的通信\",{\"1\":{\"72\":1}}],[\"抽象部分\",{\"1\":{\"31\":3}}],[\"抽象元素\",{\"1\":{\"47\":3}}],[\"抽象访问者\",{\"1\":{\"47\":2}}],[\"抽象类中的模板方法定义了算法的框架和步骤顺序\",{\"1\":{\"46\":1}}],[\"抽象类\",{\"1\":{\"46\":3}}],[\"抽象处理者\",{\"1\":{\"38\":3}}],[\"抽象产品\",{\"1\":{\"25\":1}}],[\"抽象产品类和具体产品类\",{\"1\":{\"24\":1}}],[\"抽象产品类\",{\"1\":{\"24\":1}}],[\"抽象工厂\",{\"1\":{\"25\":1}}],[\"抽象工厂函数\",{\"1\":{\"24\":1,\"25\":1}}],[\"抽象工厂类需要定义多个抽象方法来创建不同的产品\",{\"1\":{\"25\":1}}],[\"抽象工厂类的设计难度较大\",{\"1\":{\"25\":1}}],[\"抽象工厂类\",{\"1\":{\"24\":1}}],[\"抽象工厂模式可以根据不同的需求创建不同的产品族\",{\"1\":{\"25\":2}}],[\"抽象工厂模式支持产品族的扩展\",{\"1\":{\"25\":2}}],[\"抽象工厂模式将产品的创建过程封装在抽象工厂类中\",{\"1\":{\"25\":2}}],[\"抽象工厂模式是一种创建型设计模式\",{\"1\":{\"25\":2}}],[\"抽象工厂模式\",{\"0\":{\"25\":1},\"1\":{\"20\":1,\"25\":1}}],[\"负责保存和恢复备忘录\",{\"1\":{\"42\":2}}],[\"负责人\",{\"1\":{\"42\":2}}],[\"负责创建和管理享元对象\",{\"1\":{\"35\":1}}],[\"负责创建具体的产品对象\",{\"1\":{\"24\":1,\"25\":1,\"26\":1}}],[\"负责实现子系统的具体功能\",{\"1\":{\"34\":1}}],[\"负责使用生成器对象创建产品\",{\"1\":{\"26\":1}}],[\"负责对象间的高效沟通和职责委派\",{\"1\":{\"20\":1}}],[\"二\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"96\":1,\"109\":1,\"113\":1}}],[\"二者都应该依赖于抽象\",{\"1\":{\"22\":1}}],[\"just\",{\"1\":{\"140\":1}}],[\"junit框架会负责调用testaddition\",{\"1\":{\"22\":1}}],[\"junit\",{\"1\":{\"22\":2}}],[\"junit是一个用于编写和运行java单元测试的框架\",{\"1\":{\"22\":1}}],[\"j++\",{\"1\":{\"43\":1}}],[\"j\",{\"1\":{\"32\":4,\"43\":4}}],[\"java\",{\"1\":{\"22\":1,\"48\":1}}],[\"workspace\",{\"0\":{\"161\":1}}],[\"working\",{\"1\":{\"140\":1}}],[\"which\",{\"1\":{\"140\":1}}],[\"white\",{\"1\":{\"35\":2}}],[\"wheels\",{\"1\":{\"46\":2}}],[\"wheelinspector\",{\"1\":{\"38\":16}}],[\"wheel\",{\"1\":{\"32\":5,\"38\":4}}],[\"windows\",{\"1\":{\"146\":1}}],[\"will\",{\"1\":{\"140\":1}}],[\"within\",{\"1\":{\"165\":2}}],[\"with\",{\"1\":{\"31\":4,\"46\":2,\"140\":1}}],[\"widget\",{\"1\":{\"22\":5}}],[\"web\",{\"1\":{\"22\":1}}],[\"然后获取这个元素的地址\",{\"1\":{\"135\":1}}],[\"然后取数组的第一个元素的地址\",{\"1\":{\"134\":1}}],[\"然后将这个新字符串赋给s\",{\"1\":{\"122\":1}}],[\"然后创建了一个主管\",{\"1\":{\"26\":1}}],[\"然后\",{\"1\":{\"24\":2,\"25\":1,\"26\":1,\"28\":1,\"30\":2,\"33\":2,\"35\":1,\"36\":1,\"129\":1,\"134\":1}}],[\"然后junit框架负责执行这些测试用例\",{\"1\":{\"22\":1}}],[\"然而\",{\"1\":{\"22\":1,\"122\":1}}],[\"来得到答案\",{\"1\":{\"103\":1}}],[\"来处理这些请求和响应\",{\"1\":{\"22\":1}}],[\"来构建整个应用程序的基础架构\",{\"1\":{\"22\":1}}],[\"来减轻类层次结构的压力\",{\"1\":{\"22\":1}}],[\"更新requirements\",{\"1\":{\"141\":1}}],[\"更高效\",{\"1\":{\"122\":1}}],[\"更高的可维护性\",{\"1\":{\"22\":1}}],[\"更小的风险\",{\"1\":{\"22\":1}}],[\"其实现是由编译器提供的\",{\"1\":{\"133\":1}}],[\"其结果是一个新的字符串\",{\"1\":{\"122\":1}}],[\"其结果是惊人的\",{\"1\":{\"103\":1}}],[\"其它因素都是次要的\",{\"1\":{\"101\":1}}],[\"其作用类似于人体的神经系统\",{\"1\":{\"72\":1}}],[\"其具体定义可通过下图来理解\",{\"1\":{\"56\":1}}],[\"其定义有\",{\"1\":{\"54\":1}}],[\"其相关依赖对象会得到通知并自动更新\",{\"1\":{\"43\":1}}],[\"其中定义了一个类myclass和相关的方法和属性\",{\"1\":{\"129\":1}}],[\"其中显性电平规定为逻辑0\",{\"1\":{\"56\":1}}],[\"其中某些步骤是抽象的\",{\"1\":{\"46\":1}}],[\"其中有两种具体的汽车制造流程\",{\"1\":{\"46\":1}}],[\"其中有两个主要功能维度\",{\"1\":{\"22\":1}}],[\"其中包括不同的汽车部件\",{\"1\":{\"41\":1}}],[\"其中包含汽车的名称和速度\",{\"1\":{\"33\":1}}],[\"其中包含一个drive方法\",{\"1\":{\"36\":1}}],[\"其中包含一个指向car结构体的指针和一个装饰函数指针\",{\"1\":{\"33\":1}}],[\"其中包含一个加油方法refuel\",{\"1\":{\"30\":1}}],[\"其中包含一个充电方法charge\",{\"1\":{\"30\":1}}],[\"其中包含一个car类型的指针car\",{\"1\":{\"28\":1}}],[\"其中包含一个抽象的工厂方法\",{\"1\":{\"24\":1}}],[\"其中只会有一个名为clone的方法\",{\"1\":{\"27\":1}}],[\"其互动方式的描述\",{\"1\":{\"22\":1}}],[\"换句话说\",{\"1\":{\"22\":1}}],[\"框架需要控制子类扩展\",{\"1\":{\"46\":1}}],[\"框架提供了一个更为全面和高级的解决方案\",{\"1\":{\"22\":1}}],[\"框架会调用应用程序代码\",{\"1\":{\"22\":1}}],[\"框架控制着应用程序的执行流程\",{\"1\":{\"22\":1}}],[\"具体的做法就是分层下注\",{\"1\":{\"103\":1}}],[\"具体的装饰对象\",{\"1\":{\"33\":1}}],[\"具体分析见下节\",{\"1\":{\"96\":1}}],[\"具体元素实现\",{\"1\":{\"47\":1}}],[\"具体元素\",{\"1\":{\"47\":1}}],[\"具体访问者\",{\"1\":{\"47\":2}}],[\"具体类\",{\"1\":{\"46\":3}}],[\"具体子类\",{\"1\":{\"46\":1}}],[\"具体策略\",{\"1\":{\"45\":5}}],[\"具体状态\",{\"1\":{\"44\":2}}],[\"具体观察者\",{\"1\":{\"43\":4}}],[\"具体主题\",{\"1\":{\"43\":3}}],[\"具体中介者\",{\"1\":{\"41\":2}}],[\"具体聚合\",{\"1\":{\"40\":2}}],[\"具体迭代器\",{\"1\":{\"40\":2}}],[\"具体命令\",{\"1\":{\"39\":2}}],[\"具体处理者\",{\"1\":{\"38\":2}}],[\"具体享元\",{\"1\":{\"35\":1}}],[\"具体装饰\",{\"1\":{\"33\":1}}],[\"具体组件\",{\"1\":{\"33\":1}}],[\"具体实现了组件接口\",{\"1\":{\"32\":1}}],[\"具体实现部分\",{\"1\":{\"31\":4}}],[\"具体原型\",{\"1\":{\"27\":1}}],[\"具体生成器\",{\"1\":{\"26\":2}}],[\"具体工厂\",{\"1\":{\"25\":1}}],[\"具体工厂类\",{\"1\":{\"24\":2}}],[\"具体产品\",{\"1\":{\"25\":1}}],[\"具体产品类\",{\"1\":{\"24\":1}}],[\"具体来说\",{\"1\":{\"22\":1,\"128\":1}}],[\"具有很强的灵活性\",{\"1\":{\"33\":3}}],[\"具有较高的灵活性\",{\"1\":{\"17\":1}}],[\"具有广泛的适用性\",{\"1\":{\"17\":1}}],[\"继承了component\",{\"1\":{\"33\":1}}],[\"继承is是\",{\"1\":{\"22\":1}}],[\"继承代表类之间的\",{\"1\":{\"22\":1}}],[\"有了判断\",{\"1\":{\"114\":1}}],[\"有人赚到钱\",{\"1\":{\"111\":1}}],[\"有别于股价的短期波动\",{\"1\":{\"109\":1}}],[\"有疑问的时候\",{\"1\":{\"109\":1}}],[\"有时很安静\",{\"1\":{\"103\":1}}],[\"有时子类想要改变骨架可能比较困难\",{\"1\":{\"46\":1}}],[\"有下面的公式\",{\"1\":{\"84\":1}}],[\"有计划的动态性\",{\"1\":{\"71\":1}}],[\"有两种\",{\"1\":{\"57\":1}}],[\"有多个算法\",{\"1\":{\"46\":1}}],[\"有\",{\"1\":{\"22\":1,\"54\":1,\"111\":1}}],[\"是编译时计算大小的\",{\"1\":{\"133\":1}}],[\"是怎么判断合理股价的\",{\"1\":{\"102\":1}}],[\"是极其危险的\",{\"1\":{\"96\":1}}],[\"是经验\",{\"1\":{\"96\":1}}],[\"是人性\",{\"1\":{\"96\":1}}],[\"是无需知道decorator的存在的\",{\"1\":{\"33\":1}}],[\"是抽象产品的具体实现\",{\"1\":{\"25\":1}}],[\"是具体工厂的父类\",{\"1\":{\"25\":1}}],[\"是具体产品的父类\",{\"1\":{\"25\":1}}],[\"是具体的产品对象\",{\"1\":{\"24\":1}}],[\"是\",{\"1\":{\"22\":1,\"133\":1}}],[\"that\",{\"1\":{\"140\":1}}],[\"theory\",{\"1\":{\"109\":1}}],[\"the\",{\"1\":{\"30\":2,\"38\":3,\"140\":10}}],[\"txt\",{\"1\":{\"140\":3,\"141\":1}}],[\"t\",{\"1\":{\"134\":3,\"135\":4}}],[\"task\",{\"1\":{\"76\":1}}],[\"target\",{\"1\":{\"30\":1}}],[\"trigger\",{\"1\":{\"165\":2}}],[\"triggers\",{\"1\":{\"162\":1}}],[\"tr\",{\"1\":{\"66\":1,\"80\":1}}],[\"trcv抽象了can收发器硬件\",{\"1\":{\"61\":1}}],[\"trcv模块主要控制can外部收发器的模式\",{\"1\":{\"61\":1}}],[\"truckaccept\",{\"1\":{\"47\":3}}],[\"truck\",{\"1\":{\"47\":19}}],[\"transmission\",{\"1\":{\"41\":23}}],[\"tool\",{\"2\":{\"158\":1,\"171\":1}}],[\"to\",{\"1\":{\"44\":1,\"140\":4,\"165\":7}}],[\"toyota\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":1,\"35\":2,\"39\":1,\"40\":1,\"47\":1}}],[\"types\",{\"0\":{\"164\":1}}],[\"type\",{\"1\":{\"24\":2,\"25\":2,\"26\":4,\"27\":4,\"28\":2,\"30\":2,\"34\":6,\"134\":4,\"135\":12,\"163\":3,\"164\":2}}],[\"typedef\",{\"1\":{\"22\":4,\"24\":2,\"25\":2,\"26\":5,\"27\":2,\"28\":3,\"30\":7,\"31\":6,\"32\":3,\"33\":2,\"34\":4,\"35\":4,\"36\":3,\"38\":4,\"39\":5,\"40\":3,\"41\":5,\"42\":3,\"43\":5,\"44\":5,\"45\":5,\"46\":3,\"47\":5,\"129\":1}}],[\"terminal\",{\"1\":{\"140\":1}}],[\"text\",{\"1\":{\"75\":1,\"79\":1,\"92\":2,\"161\":2,\"162\":1,\"163\":1,\"164\":1,\"169\":1}}],[\"textbox\",{\"1\":{\"22\":3}}],[\"template\",{\"0\":{\"46\":1}}],[\"tesla\",{\"1\":{\"40\":1}}],[\"testing\",{\"1\":{\"38\":1}}],[\"testaddition\",{\"1\":{\"22\":1}}],[\"test\",{\"1\":{\"22\":2,\"134\":1}}],[\"深拷贝问题和安全问题\",{\"1\":{\"27\":1}}],[\"深拷贝问题\",{\"1\":{\"27\":1}}],[\"深色主题\",{\"1\":{\"22\":1}}],[\"深入研究设计模式对于提高软件设计的质量和效率具有重要意义\",{\"1\":{\"10\":1}}],[\"深入探讨了23种经典的设计模式\",{\"1\":{\"9\":1}}],[\"深入设计模式\",{\"0\":{\"7\":1},\"1\":{\"48\":1}}],[\"如何生成requirements依赖文件\",{\"1\":{\"138\":1}}],[\"如听话\",{\"1\":{\"103\":1}}],[\"如通信协议\",{\"1\":{\"74\":1}}],[\"如电驱控制\",{\"1\":{\"72\":1}}],[\"如自动驾驶\",{\"1\":{\"71\":1}}],[\"如下图\",{\"1\":{\"54\":2,\"57\":1}}],[\"如发动机的定时\",{\"1\":{\"53\":1}}],[\"如\",{\"1\":{\"47\":1}}],[\"如经济模式\",{\"1\":{\"45\":2}}],[\"如订阅\",{\"1\":{\"43\":1}}],[\"如图形界面中的数据绑定\",{\"1\":{\"43\":1}}],[\"如仪表盘和导航系统\",{\"1\":{\"43\":1}}],[\"如仪表盘\",{\"1\":{\"43\":1}}],[\"如撤销操作\",{\"1\":{\"42\":1}}],[\"如速度和燃油量\",{\"1\":{\"42\":1}}],[\"如速度\",{\"1\":{\"42\":1,\"43\":1}}],[\"如前序遍历\",{\"1\":{\"40\":1}}],[\"如启动\",{\"1\":{\"44\":1}}],[\"如启动引擎\",{\"1\":{\"39\":1}}],[\"如启动发动机\",{\"1\":{\"39\":1}}],[\"如引擎\",{\"1\":{\"38\":1,\"41\":2}}],[\"如车轮\",{\"1\":{\"32\":1}}],[\"如android\",{\"1\":{\"31\":1}}],[\"如轿车\",{\"1\":{\"31\":1}}],[\"如组合或策略模式\",{\"1\":{\"22\":1}}],[\"如浅色主题\",{\"1\":{\"22\":1}}],[\"如按钮\",{\"1\":{\"22\":1}}],[\"如果计划手动实现swc\",{\"1\":{\"169\":1}}],[\"如果不想使用预定义的数据类型\",{\"1\":{\"165\":1}}],[\"如果不能处理则将请求传递给下一个处理者\",{\"1\":{\"38\":1}}],[\"如果你的系统上同时安装了多个版本的python\",{\"1\":{\"147\":1}}],[\"如果你想创建一个名为myenv的虚拟环境\",{\"1\":{\"147\":1}}],[\"如果你想在c\",{\"1\":{\"147\":1}}],[\"如果你想保留原始字符串不变\",{\"1\":{\"122\":1}}],[\"如果你不需要保留原始字符串\",{\"1\":{\"122\":1}}],[\"如果你只需要处理一些简单的http请求和响应\",{\"1\":{\"22\":1}}],[\"如果第一手没给你利润\",{\"1\":{\"109\":1}}],[\"如果犯了错\",{\"1\":{\"109\":1}}],[\"如果进展顺利\",{\"1\":{\"109\":1}}],[\"如果我的入场点选的正确\",{\"1\":{\"108\":1}}],[\"如果我们有更多的控件类型和主题样式\",{\"1\":{\"22\":1}}],[\"如果我们使用了多重继承\",{\"1\":{\"22\":1}}],[\"如果我们在子类中重写了动物的\",{\"1\":{\"22\":1}}],[\"如果我们要更换汽车的引擎\",{\"1\":{\"22\":1}}],[\"如果大市不好\",{\"1\":{\"106\":1}}],[\"如果是小股民的话\",{\"1\":{\"105\":1}}],[\"如果是大户的话\",{\"1\":{\"105\":1}}],[\"如果交易量没有增加\",{\"1\":{\"105\":1}}],[\"如果读者觉得还很抽象的话\",{\"1\":{\"103\":1}}],[\"如果股市交易总量很大\",{\"1\":{\"102\":1}}],[\"如果股票一跌破支撑线便反弹到支撑线之上\",{\"1\":{\"102\":1}}],[\"如果需要在系统中增加新的元素类型\",{\"1\":{\"47\":1}}],[\"如果需要频繁创建对象\",{\"1\":{\"27\":1}}],[\"如果策略过多\",{\"1\":{\"45\":1}}],[\"如果顺序很重要\",{\"1\":{\"43\":1}}],[\"如果观察者和主题之间的依赖关系过于复杂\",{\"1\":{\"43\":1}}],[\"如果观察者较多\",{\"1\":{\"43\":1}}],[\"如果责任链过长\",{\"1\":{\"38\":1}}],[\"如果系统的性能是一个关键因素\",{\"1\":{\"35\":1}}],[\"如果系统中存在大量相似的对象\",{\"1\":{\"35\":1}}],[\"如果系统中需要创建的产品种类较多\",{\"1\":{\"24\":1}}],[\"如果对象的状态非常复杂\",{\"1\":{\"42\":1}}],[\"如果对象的状态可以共享\",{\"1\":{\"35\":1}}],[\"如果对象的状态经常变化\",{\"1\":{\"35\":1}}],[\"如果对象的状态变化较小\",{\"1\":{\"27\":1}}],[\"如果享元对象需要依赖外部状态\",{\"1\":{\"35\":1}}],[\"如果存在则直接返回该对象\",{\"1\":{\"35\":1}}],[\"如果层次结构较深\",{\"1\":{\"32\":1}}],[\"如果一个对象的创建和销毁非常频繁\",{\"1\":{\"28\":1}}],[\"如果一个对象需要保证唯一性\",{\"1\":{\"28\":1}}],[\"如果一个对象需要被多个线程或进程共享\",{\"1\":{\"28\":1}}],[\"如果一个对象需要在整个程序中被全局访问\",{\"1\":{\"28\":1}}],[\"如果单例模式的实例没有被正确释放\",{\"1\":{\"28\":1}}],[\"如果instance已经存在\",{\"1\":{\"28\":1}}],[\"如果instance为空\",{\"1\":{\"28\":1}}],[\"如果创建一个复杂对象的过程比较复杂\",{\"1\":{\"27\":1}}],[\"如果原型对象包含敏感信息\",{\"1\":{\"27\":1}}],[\"如果原型对象包含指向其他对象的引用\",{\"1\":{\"27\":1}}],[\"如果原型对象数量较多\",{\"1\":{\"27\":1}}],[\"如果\",{\"1\":{\"22\":1}}],[\"如果父类实现了某个接口\",{\"1\":{\"14\":1}}],[\"或通过某些方式\",{\"1\":{\"111\":1}}],[\"或开市走\",{\"1\":{\"102\":1}}],[\"或者powershell\",{\"1\":{\"147\":1}}],[\"或者通知的频率较高\",{\"1\":{\"43\":1}}],[\"或者需要大量的计算资源\",{\"1\":{\"27\":1}}],[\"或者servlets\",{\"1\":{\"22\":1}}],[\"或\",{\"1\":{\"22\":1,\"105\":1,\"114\":2}}],[\"你已经成功创建了指定版本的虚拟环境\",{\"1\":{\"147\":1}}],[\"你会成功的\",{\"1\":{\"114\":1}}],[\"你会怎么办\",{\"1\":{\"103\":1}}],[\"你将看到命令提示符或者powershell的提示符前面有\",{\"1\":{\"147\":1}}],[\"你将看到输出结果为data\",{\"1\":{\"129\":1}}],[\"你将以最少的代价得到最多的乐趣\",{\"1\":{\"113\":1}}],[\"你将成为失败者\",{\"1\":{\"103\":1}}],[\"你可能较其它行的从业者富有\",{\"1\":{\"113\":1}}],[\"你可以指定要使用的python解释器的完径\",{\"1\":{\"147\":1}}],[\"你可以在python官方网站上下载和安装所需的python版本\",{\"1\":{\"147\":1}}],[\"你可以使用python的内置工具venv来创建指定版本的虚拟环境\",{\"1\":{\"147\":1}}],[\"你可以选择使用一个完整的web框架\",{\"1\":{\"22\":1}}],[\"你可以根据具体的需求选择性地替换或者更新中间层次的组件\",{\"1\":{\"22\":1}}],[\"你可以更容易地理解和管理这些组件\",{\"1\":{\"22\":1}}],[\"你可以更加灵活地选择性地应用一些特定的模式或者组件\",{\"1\":{\"22\":1}}],[\"你可以编写测试用例\",{\"1\":{\"22\":1}}],[\"你做什么都可以\",{\"1\":{\"112\":1}}],[\"你每天都在寻找对你有利的信息\",{\"1\":{\"110\":1}}],[\"你总会编出理由来证明你应该得到更多\",{\"1\":{\"110\":1}}],[\"你对\",{\"1\":{\"110\":1}}],[\"你能战胜市场\",{\"1\":{\"109\":1}}],[\"你也非不着太聪明\",{\"1\":{\"109\":1}}],[\"你也可以选择使用中间层次的组件\",{\"1\":{\"22\":1}}],[\"你要准备\",{\"1\":{\"110\":1}}],[\"你要相信自己\",{\"1\":{\"110\":1}}],[\"你要有点贪念\",{\"1\":{\"109\":1}}],[\"你要很大的力\",{\"1\":{\"101\":1}}],[\"你永远不知股票会升多高\",{\"1\":{\"107\":1}}],[\"你就有了生存的可能\",{\"1\":{\"114\":1}}],[\"你就走上了学股的正确道路\",{\"1\":{\"106\":1}}],[\"你就知道该怎样做了\",{\"1\":{\"103\":1}}],[\"你最好什么都别买\",{\"1\":{\"106\":1}}],[\"你大约已赢多过输\",{\"1\":{\"105\":1}}],[\"你炒股大概常亏钱\",{\"1\":{\"105\":1}}],[\"你在股市就有了50\",{\"1\":{\"114\":1}}],[\"你在这行成功的机会就不大\",{\"1\":{\"103\":1}}],[\"你在炒股时每次犯错\",{\"1\":{\"103\":1}}],[\"你从小学习的那些讨人喜欢的性格\",{\"1\":{\"103\":1}}],[\"你主要通过研究\",{\"1\":{\"103\":1}}],[\"你如果随大流\",{\"1\":{\"103\":1}}],[\"你如果有60\",{\"1\":{\"103\":1}}],[\"你手上持有股票的上升潜力必须大过下跌的可能\",{\"1\":{\"103\":1}}],[\"你的交易方式必须和你的个性相符合\",{\"1\":{\"109\":1}}],[\"你的体会就会深一层\",{\"1\":{\"103\":1}}],[\"你的获胜概率就被大打折扣了\",{\"1\":{\"102\":1}}],[\"你的测试用例类会继承junit提供的测试类\",{\"1\":{\"22\":1}}],[\"你很快就会发现股票运动是有迹可循的\",{\"1\":{\"101\":1}}],[\"你必须有\",{\"1\":{\"109\":1}}],[\"你必须有自信\",{\"1\":{\"109\":1}}],[\"你必须有耐心\",{\"1\":{\"109\":1}}],[\"你必须独立思考\",{\"1\":{\"109\":1}}],[\"你必须牢牢记住这一点\",{\"1\":{\"101\":1}}],[\"你必须遵循框架所定义的规则和约定\",{\"1\":{\"22\":1}}],[\"你常常面对两个选择\",{\"1\":{\"96\":1}}],[\"你们选择太多\",{\"1\":{\"96\":1}}],[\"你开始看这本书\",{\"1\":{\"96\":1}}],[\"你不把\",{\"1\":{\"103\":1}}],[\"你不明白自己为何亏了钱\",{\"1\":{\"96\":1}}],[\"你不知道它还会跌多少\",{\"1\":{\"105\":1}}],[\"你不知下次要怎么办才能重复赚钱的经历\",{\"1\":{\"96\":1}}],[\"你不知自己为何赚了钱\",{\"1\":{\"96\":1}}],[\"你提到的这种情况通常被称为\",{\"1\":{\"22\":1}}],[\"你需要确保新行为与其基类中的版本兼容\",{\"1\":{\"22\":1}}],[\"类似地\",{\"1\":{\"128\":1}}],[\"类似公司的情况\",{\"1\":{\"99\":1}}],[\"类的数量增加\",{\"1\":{\"44\":1}}],[\"类数量增加\",{\"1\":{\"39\":1}}],[\"类提供了一些实用的业务逻辑\",{\"1\":{\"36\":1}}],[\"类型\",{\"1\":{\"134\":1,\"135\":2}}],[\"类型检查只能在运行时进行\",{\"1\":{\"32\":1}}],[\"类型安全性较低\",{\"1\":{\"32\":1}}],[\"类层次结构将会急剧膨胀\",{\"1\":{\"22\":1}}],[\"类中的不同\",{\"1\":{\"22\":1}}],[\"类中的\",{\"1\":{\"22\":1}}],[\"类重写了\",{\"1\":{\"22\":1}}],[\"中介者的复杂性也会增加\",{\"1\":{\"41\":1}}],[\"中介者复杂性\",{\"1\":{\"41\":1}}],[\"中介者封装了对象之间的交互逻辑\",{\"1\":{\"41\":1}}],[\"中介者接口\",{\"1\":{\"41\":2}}],[\"中介者模式可以用于协调汽车部件\",{\"1\":{\"41\":1}}],[\"中介者模式引入了额外的中介对象\",{\"1\":{\"41\":1}}],[\"中介者模式将交互逻辑集中到中介者中\",{\"1\":{\"41\":1}}],[\"中介者模式通过引入一个中介对象\",{\"1\":{\"41\":2}}],[\"中介者模式主要包括以下几个部分\",{\"1\":{\"41\":1}}],[\"中介者模式是一种行为型设计模式\",{\"1\":{\"41\":1}}],[\"中介者模式\",{\"0\":{\"41\":1},\"1\":{\"20\":1}}],[\"中序遍历等\",{\"1\":{\"40\":1}}],[\"中\",{\"1\":{\"40\":1}}],[\"中间层次的组件通常更加模块化和可组合\",{\"1\":{\"22\":1}}],[\"中间层次的优点在于\",{\"1\":{\"22\":1}}],[\"中间层次的优点在于模式提供的复用方式要比框架的风险小\",{\"1\":{\"22\":1}}],[\"中间层次的设计模式提供了一种介于框架和单个类之间的解决方案\",{\"1\":{\"22\":1}}],[\"中的各种操作\",{\"1\":{\"47\":1}}],[\"中的\",{\"1\":{\"22\":1}}],[\"但c语言本身并不直接支持面向对象编程\",{\"1\":{\"129\":1}}],[\"但实际的定义在其他文件中\",{\"1\":{\"128\":1}}],[\"但并不会分配实际的存储空间\",{\"1\":{\"128\":1}}],[\"但extern仅用于声明\",{\"1\":{\"127\":1}}],[\"但成为富豪在天不在人\",{\"1\":{\"113\":1}}],[\"但我希望你能有一个不求人的一技之长\",{\"1\":{\"112\":1}}],[\"但我常听到炒股的人居然会为亏钱而自豪\",{\"1\":{\"103\":1}}],[\"但必须复杂到很难用事实证明其对错\",{\"1\":{\"111\":1}}],[\"但市场用不断升高证明他们论断的错误\",{\"1\":{\"111\":1}}],[\"但他们太早了一步\",{\"1\":{\"111\":1}}],[\"但进场\",{\"1\":{\"109\":1}}],[\"但就我的亲身经历\",{\"1\":{\"109\":1}}],[\"但有一点可以确定\",{\"1\":{\"105\":1}}],[\"但有些步骤因子类而异\",{\"1\":{\"46\":1}}],[\"但优秀的投资者会看得更远一步\",{\"1\":{\"103\":1}}],[\"但问题是他们没有足够的知识和经验判定何时是春天\",{\"1\":{\"103\":1}}],[\"但炒股需要不同的思维方式\",{\"1\":{\"103\":1}}],[\"但炒友们必须牢牢记住\",{\"1\":{\"103\":1}}],[\"但它铺平了累积巨额财富的道路\",{\"1\":{\"111\":1}}],[\"但它用来评估信息社会的企业可能并不十分合适\",{\"1\":{\"102\":1}}],[\"但它的签名和预期行为与超类\",{\"1\":{\"22\":1}}],[\"但一定要在心理上不断提醒自己\",{\"1\":{\"102\":1}}],[\"但指数不升\",{\"1\":{\"102\":1}}],[\"但石球往下\",{\"1\":{\"101\":1}}],[\"但跌波的每个波峰较上一波峰为低\",{\"1\":{\"101\":1}}],[\"但也可能会导致系统的复杂性增加\",{\"1\":{\"47\":1}}],[\"但操作算法相对稳定时\",{\"1\":{\"47\":1}}],[\"但不会分配实际的存储空间\",{\"1\":{\"128\":1}}],[\"但不能太多\",{\"1\":{\"109\":1}}],[\"但不能操作或检查备忘录的内容\",{\"1\":{\"42\":1}}],[\"但不明显\",{\"1\":{\"105\":1}}],[\"但不可能改变大势\",{\"1\":{\"102\":1}}],[\"但不提供具体实现\",{\"1\":{\"31\":1}}],[\"但是具体由哪个对象处理请求在运行时动态决定\",{\"1\":{\"38\":1}}],[\"但是\",{\"1\":{\"34\":2,\"35\":1,\"36\":1}}],[\"但对于component来说\",{\"1\":{\"33\":1}}],[\"但让子类决定实例化哪个类\",{\"1\":{\"24\":2}}],[\"但需要自己确定实现步骤\",{\"1\":{\"19\":1}}],[\"dynamic\",{\"1\":{\"76\":1,\"140\":1}}],[\"diff\",{\"1\":{\"140\":1}}],[\"difference\",{\"1\":{\"129\":1}}],[\"directly\",{\"1\":{\"76\":1}}],[\"directories\",{\"1\":{\"140\":1}}],[\"directory\",{\"1\":{\"140\":2}}],[\"director\",{\"1\":{\"26\":23}}],[\"dio控制的根据使用的pin关联到dio通道\",{\"1\":{\"63\":1}}],[\"da\",{\"0\":{\"183\":1}}],[\"davinci\",{\"0\":{\"151\":1,\"159\":1},\"1\":{\"159\":1}}],[\"data\",{\"1\":{\"129\":4,\"162\":2}}],[\"dashboard\",{\"1\":{\"43\":15}}],[\"darktextbox\",{\"1\":{\"22\":1}}],[\"darktheme\",{\"1\":{\"22\":3}}],[\"darkbutton\",{\"1\":{\"22\":1}}],[\"drivingstatestop\",{\"1\":{\"44\":3}}],[\"drivingstatestart\",{\"1\":{\"44\":3}}],[\"drivingstatedrive\",{\"1\":{\"44\":3}}],[\"drivingstate\",{\"1\":{\"44\":11}}],[\"driving\",{\"1\":{\"36\":2,\"44\":5,\"45\":3}}],[\"driver\",{\"0\":{\"59\":1},\"1\":{\"58\":1}}],[\"drivenormal\",{\"1\":{\"45\":2}}],[\"drivesport\",{\"1\":{\"45\":2}}],[\"drivestrategy\",{\"1\":{\"45\":9}}],[\"driveeconomic\",{\"1\":{\"45\":2}}],[\"drive\",{\"1\":{\"36\":1,\"44\":5,\"45\":5}}],[\"draw\",{\"1\":{\"22\":1}}],[\"design\",{\"0\":{\"174\":1},\"1\":{\"164\":1}}],[\"development\",{\"1\":{\"160\":1}}],[\"developer\",{\"0\":{\"151\":1,\"159\":1},\"1\":{\"159\":1},\"2\":{\"158\":1,\"171\":1}}],[\"debug\",{\"1\":{\"140\":2}}],[\"declaration\",{\"1\":{\"129\":1}}],[\"declarator\",{\"0\":{\"118\":1}}],[\"decoratewithsunroof\",{\"1\":{\"33\":2}}],[\"decoratewithgps\",{\"1\":{\"33\":2}}],[\"decorate\",{\"1\":{\"33\":3}}],[\"decoratorwithsunroof\",{\"1\":{\"33\":4}}],[\"decoratorwithgps\",{\"1\":{\"33\":4}}],[\"decorator\",{\"1\":{\"33\":24}}],[\"dealer\",{\"1\":{\"34\":10}}],[\"definition\",{\"1\":{\"129\":1}}],[\"define\",{\"1\":{\"43\":1,\"129\":1,\"134\":1}}],[\"defaults\",{\"1\":{\"140\":1}}],[\"default\",{\"1\":{\"24\":1,\"25\":1}}],[\"def\",{\"1\":{\"22\":7}}],[\"docs\",{\"1\":{\"148\":1}}],[\"do\",{\"1\":{\"140\":1}}],[\"double\",{\"1\":{\"135\":1}}],[\"dominant\",{\"1\":{\"56\":1}}],[\"door\",{\"1\":{\"32\":5,\"38\":1}}],[\"dog\",{\"1\":{\"22\":10}}],[\"d\",{\"1\":{\"24\":3,\"25\":3,\"26\":2,\"27\":2,\"28\":2,\"34\":1,\"35\":2,\"40\":1,\"42\":2,\"43\":4,\"47\":3,\"129\":1}}],[\"ecu\",{\"1\":{\"160\":1}}],[\"economy\",{\"1\":{\"46\":6}}],[\"economycar\",{\"1\":{\"46\":9}}],[\"economic\",{\"1\":{\"45\":1}}],[\"economicmode\",{\"1\":{\"45\":10}}],[\"e\",{\"1\":{\"140\":3,\"165\":1}}],[\"each\",{\"1\":{\"76\":1,\"140\":1}}],[\"eating\",{\"1\":{\"22\":2}}],[\"eat\",{\"1\":{\"22\":9}}],[\"effective\",{\"1\":{\"48\":1}}],[\"exe\",{\"1\":{\"147\":1}}],[\"exec\",{\"1\":{\"146\":2}}],[\"execution\",{\"1\":{\"76\":1}}],[\"executecommand\",{\"1\":{\"39\":3}}],[\"executestopengine\",{\"1\":{\"39\":2}}],[\"executestartengine\",{\"1\":{\"39\":2}}],[\"execute\",{\"1\":{\"39\":3}}],[\"existing\",{\"1\":{\"140\":1}}],[\"extra\",{\"1\":{\"140\":1}}],[\"extern关键字用于声明变量或函数的存在\",{\"1\":{\"128\":1}}],[\"extern也可以用于函数声明\",{\"1\":{\"128\":1}}],[\"extern的作用有以下几点\",{\"1\":{\"128\":1}}],[\"extern作用\",{\"0\":{\"128\":1}}],[\"extern\",{\"1\":{\"44\":4,\"128\":4,\"129\":2},\"2\":{\"131\":1}}],[\"export\",{\"1\":{\"140\":2}}],[\"expected\",{\"0\":{\"118\":1}}],[\"event\",{\"1\":{\"41\":4}}],[\"elements\",{\"1\":{\"162\":1}}],[\"element\",{\"1\":{\"47\":1}}],[\"electric\",{\"1\":{\"30\":1}}],[\"electriccarinterface\",{\"1\":{\"30\":5}}],[\"electriccar\",{\"1\":{\"30\":5}}],[\"else\",{\"1\":{\"36\":1,\"38\":6,\"41\":1}}],[\"enables\",{\"1\":{\"140\":1}}],[\"encoding\",{\"1\":{\"140\":2}}],[\"environments\",{\"1\":{\"140\":1}}],[\"endif\",{\"1\":{\"129\":1}}],[\"enhanced\",{\"0\":{\"155\":1},\"1\":{\"45\":1}}],[\"enum\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":1,\"35\":2}}],[\"engineinspector\",{\"1\":{\"38\":23}}],[\"engine是一个抽象接口\",{\"1\":{\"22\":1}}],[\"enginestop\",{\"1\":{\"22\":2}}],[\"enginestarted\",{\"1\":{\"41\":2}}],[\"enginestart\",{\"1\":{\"22\":2}}],[\"engine\",{\"1\":{\"22\":17,\"32\":5,\"38\":4,\"39\":2,\"41\":26,\"46\":2}}],[\"edit\",{\"1\":{\"22\":1}}],[\"函数声明\",{\"1\":{\"128\":1}}],[\"函数充当\",{\"1\":{\"42\":1}}],[\"函数在处理\",{\"1\":{\"22\":2}}],[\"函数在处理子类对象时不会出现问题\",{\"1\":{\"22\":1}}],[\"函数并传递\",{\"1\":{\"22\":1}}],[\"函数接受一个\",{\"1\":{\"22\":1}}],[\"函数\",{\"1\":{\"22\":1}}],[\"里我会较为详细地谈谈学股经历的几个过程\",{\"1\":{\"110\":1}}],[\"里面有一个\",{\"1\":{\"22\":1}}],[\"里氏替换原则\",{\"1\":{\"22\":1}}],[\"举个例子\",{\"1\":{\"22\":2}}],[\"以处理各种类型和体系结构\",{\"1\":{\"134\":1}}],[\"以表示大小\",{\"1\":{\"134\":1}}],[\"以字节为单位\",{\"1\":{\"133\":1}}],[\"以上的胜率\",{\"1\":{\"114\":2}}],[\"以保证你能够仔细地观察它们\",{\"1\":{\"109\":1}}],[\"以保证二者之间的兼容性\",{\"1\":{\"74\":1}}],[\"以我的经验\",{\"1\":{\"108\":1}}],[\"以下以window环境为例创建指定版本虚拟环境的步骤\",{\"1\":{\"147\":1}}],[\"以下的几点或许能帮助你自律\",{\"1\":{\"109\":1}}],[\"以下我简单地解释经济周期怎样在股价上反映出来\",{\"1\":{\"102\":1}}],[\"以下是\",{\"1\":{\"134\":1}}],[\"以下是使用访问者模式实现的一个简单汽车应用示例\",{\"1\":{\"47\":1}}],[\"以下是一个使用工厂方法模式创建汽车的\",{\"1\":{\"24\":1}}],[\"以涵盖汽车软件开发领域的各种应用场景\",{\"1\":{\"70\":1}}],[\"以确保它们不改变算法的结构\",{\"1\":{\"46\":1}}],[\"以防止外部创建实例\",{\"1\":{\"28\":1}}],[\"以避免敏感信息泄露\",{\"1\":{\"27\":1}}],[\"以及根据外部的can的收\",{\"1\":{\"58\":1}}],[\"以及汽车结构体\",{\"1\":{\"35\":1}}],[\"以及管理子节点的方法\",{\"1\":{\"32\":1}}],[\"以及构建汽车的方法\",{\"1\":{\"26\":1}}],[\"以及保持方法的预期行为相似\",{\"1\":{\"22\":1}}],[\"以便运行python将调用环境的python解释器\",{\"1\":{\"146\":1}}],[\"以便告诉编译器该函数在其他文件中已经定义\",{\"1\":{\"128\":1}}],[\"以便告诉编译器它们的存在\",{\"1\":{\"128\":1}}],[\"以便实现ecu布局中的抽象化\",{\"1\":{\"61\":1}}],[\"以便更好地理解和应用这种设计模式\",{\"1\":{\"47\":1}}],[\"以便以后恢复到之前的状态\",{\"1\":{\"42\":1}}],[\"以便为客户端提供一个统一的高层接口\",{\"1\":{\"34\":1}}],[\"以便在不同的应用场景中进行复用\",{\"1\":{\"22\":1}}],[\"以便在需要时能够轻松地添加新的功能或修改现有的功能\",{\"1\":{\"22\":1}}],[\"以便\",{\"1\":{\"22\":1}}],[\"以便客户端只需要依赖它们实际使用的接口\",{\"1\":{\"22\":1}}],[\"相对应地\",{\"1\":{\"72\":1}}],[\"相互通信\",{\"1\":{\"41\":1}}],[\"相比之下\",{\"1\":{\"22\":1}}],[\"相同\",{\"1\":{\"22\":1}}],[\"相信你不会希望这些代码崩溃的\",{\"1\":{\"22\":1}}],[\"参数列表和返回类型\",{\"1\":{\"22\":1}}],[\"参考链接\",{\"0\":{\"66\":1,\"80\":1,\"142\":1,\"148\":1},\"1\":{\"3\":1,\"123\":1,\"129\":1}}],[\"当python解释器在虚拟环境中运行时\",{\"1\":{\"146\":1}}],[\"当extern用于变量声明时\",{\"1\":{\"128\":1}}],[\"当年也不是没有头脑清醒的人\",{\"1\":{\"111\":1}}],[\"当成小赌怡情\",{\"1\":{\"113\":1}}],[\"当成卖的理由\",{\"1\":{\"109\":1}}],[\"当成买的理由\",{\"1\":{\"109\":1}}],[\"当成习惯\",{\"1\":{\"103\":1}}],[\"当然\",{\"1\":{\"103\":1}}],[\"当对象结构中的元素类经常变化\",{\"1\":{\"47\":1}}],[\"当一个对象结构包含多个类型的对象\",{\"1\":{\"47\":1}}],[\"当一个子类的对象可以替换其父类的对象时\",{\"1\":{\"22\":1}}],[\"当主题的状态发生变化时调用\",{\"1\":{\"43\":1}}],[\"当主题的状态发生变化时通知观察者\",{\"1\":{\"43\":1}}],[\"当汽车的状态\",{\"1\":{\"43\":1}}],[\"当客户端需要使用不同的汽车品牌时\",{\"1\":{\"34\":1}}],[\"当子系统中的具体实现类发生变化时\",{\"1\":{\"34\":3}}],[\"当现有的接口与客户端期望的接口不兼容时\",{\"1\":{\"30\":1}}],[\"当需要对现有的对象结构添加新的操作而不改变其结构时\",{\"1\":{\"47\":1}}],[\"当需要提高系统的灵活性时\",{\"1\":{\"34\":1}}],[\"当需要提高系统的可维护性时\",{\"1\":{\"34\":1}}],[\"当需要提高代码的可扩展性时\",{\"1\":{\"30\":1}}],[\"当需要提高代码的复用性和灵活性时\",{\"1\":{\"30\":1}}],[\"当需要为一个复杂的子系统提供一个简单的接口时\",{\"1\":{\"34\":1}}],[\"当需要创建的对象具有不同的配置选项\",{\"1\":{\"25\":1,\"26\":1}}],[\"当需要创建的对象具有不同的实现方式\",{\"1\":{\"25\":1,\"26\":1}}],[\"当需要创建的对象具有复杂的结构\",{\"1\":{\"25\":1,\"26\":1}}],[\"当需要创建的对象种类较多\",{\"1\":{\"24\":1}}],[\"当需要修改产品族的实现时\",{\"1\":{\"25\":1}}],[\"当需要添加新的产品族时\",{\"1\":{\"25\":3}}],[\"当需要将对象的创建过程与使用过程分离时\",{\"1\":{\"24\":1}}],[\"当需要在不同的条件下创建不同的对象时\",{\"1\":{\"24\":1}}],[\"当需要执行某些操作时\",{\"1\":{\"22\":1}}],[\"当你执行s\",{\"1\":{\"122\":2}}],[\"当你判定股票大市属于\",{\"1\":{\"106\":1}}],[\"当你运行这个测试类时\",{\"1\":{\"22\":1}}],[\"当你重写一个方法时\",{\"1\":{\"22\":1}}],[\"对应汇编文件中的movq\",{\"1\":{\"135\":1}}],[\"对应汇编文件中的\",{\"1\":{\"135\":1}}],[\"对任何给你\",{\"1\":{\"109\":1}}],[\"对投资的对象可以有弹性\",{\"1\":{\"109\":1}}],[\"对业余炒手而言\",{\"1\":{\"103\":1}}],[\"对runnable和task进行调度\",{\"1\":{\"72\":1}}],[\"对硬件进行抽象\",{\"1\":{\"72\":1}}],[\"对外提供一个简单的接口\",{\"1\":{\"34\":2}}],[\"对象结构\",{\"1\":{\"47\":1}}],[\"对象在运行时需要频繁切换状态\",{\"1\":{\"44\":1}}],[\"对象的行为随状态变化而变化\",{\"1\":{\"44\":1}}],[\"对象的行为依赖于其状态\",{\"1\":{\"44\":1}}],[\"对象的状态可以共享\",{\"1\":{\"35\":1}}],[\"对象之间存在复杂的引用关系\",{\"1\":{\"41\":1}}],[\"对象池等\",{\"1\":{\"28\":1}}],[\"对象状态变化较小\",{\"1\":{\"27\":1}}],[\"对象时可能会出现意料之外的行为或错误\",{\"1\":{\"22\":1}}],[\"对象时不会出现问题\",{\"1\":{\"22\":1}}],[\"对象feed\",{\"1\":{\"22\":1}}],[\"对象dog\",{\"1\":{\"22\":1}}],[\"对象并喂养它def\",{\"1\":{\"22\":1}}],[\"对象为参数的任何代码\",{\"1\":{\"22\":1}}],[\"对修改关闭\",{\"1\":{\"22\":1}}],[\"因循守旧和耿于报复\",{\"1\":{\"96\":1}}],[\"因为它需要考虑各种编译器和目标平台的特定细节\",{\"1\":{\"134\":1}}],[\"因为它允许多个文件共享相同的全局变量\",{\"1\":{\"128\":1}}],[\"因为它修改现有对象\",{\"1\":{\"122\":1}}],[\"因为它有可能避免创建新的字符串对象\",{\"1\":{\"122\":1}}],[\"因为它是大众投资心理的反映\",{\"1\":{\"105\":1}}],[\"因为一定有利息\",{\"1\":{\"112\":1}}],[\"因为每次赚了大钱\",{\"1\":{\"112\":1}}],[\"因为每个功能维度可能都需要一组不同的特性或行为\",{\"1\":{\"22\":1}}],[\"因为人们常常做不到自己知道该做的事情\",{\"1\":{\"103\":1}}],[\"因为掌握股票正常运动的特点对炒股成功是极其重要的\",{\"1\":{\"103\":1}}],[\"因为他们没有办法长期承担这样的心理压力\",{\"1\":{\"96\":1}}],[\"因为赚钱时\",{\"1\":{\"96\":1}}],[\"因为请求要经过多个处理者\",{\"1\":{\"38\":1}}],[\"因为代理对象需要实现与真实对象相同的接口\",{\"1\":{\"36\":1}}],[\"因为代理对象需要进行额外的处理\",{\"1\":{\"36\":1}}],[\"因为外观类需要将客户端的请求转发给子系统中的具体实现类\",{\"1\":{\"34\":1}}],[\"因为外观类需要了解子系统的具体实现细节\",{\"1\":{\"34\":1}}],[\"因为中间层次的组件通常比整个框架更为简单和可控\",{\"1\":{\"22\":1}}],[\"因为测试方法的调用是由junit框架触发的\",{\"1\":{\"22\":1}}],[\"因为子类的所有对象都可能被传递给以超类\",{\"1\":{\"22\":1}}],[\"因此在当前文件中不需要为其分配存储空间\",{\"1\":{\"128\":1}}],[\"因此你需要判定大势的走向\",{\"1\":{\"109\":1}}],[\"因此可能会影响代码的性能\",{\"1\":{\"26\":1}}],[\"因此代码结构比较复杂\",{\"1\":{\"26\":1}}],[\"因此抽象工厂类的设计难度较大\",{\"1\":{\"25\":1}}],[\"因此\",{\"1\":{\"10\":1,\"22\":3,\"35\":1,\"36\":1,\"133\":1}}],[\"0和复杂驱动等各个基础软件技术栈\",{\"1\":{\"72\":1}}],[\"0\",{\"1\":{\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":5,\"33\":1,\"34\":1,\"35\":3,\"36\":1,\"38\":4,\"39\":1,\"40\":4,\"41\":3,\"42\":1,\"43\":6,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"89\":4,\"129\":1,\"134\":3,\"135\":10}}],[\">\",{\"1\":{\"91\":2,\"164\":2}}],[\">visittruck\",{\"1\":{\"47\":1}}],[\">visitsuv\",{\"1\":{\"47\":1}}],[\">visitcar\",{\"1\":{\"47\":1}}],[\">accept\",{\"1\":{\"47\":3}}],[\">aggregate\",{\"1\":{\"40\":3}}],[\">update\",{\"1\":{\"43\":1}}],[\">undo\",{\"1\":{\"39\":1}}],[\">observers\",{\"1\":{\"43\":6}}],[\">observercount++\",{\"1\":{\"43\":1}}],[\">observercount\",{\"1\":{\"43\":5}}],[\">observer\",{\"1\":{\"43\":2}}],[\">operation\",{\"1\":{\"32\":1}}],[\">mediator\",{\"1\":{\"41\":1}}],[\">model\",{\"1\":{\"24\":6,\"25\":6,\"26\":2,\"27\":7,\"28\":2,\"34\":2,\"39\":3,\"40\":4,\"47\":3}}],[\">transmission\",{\"1\":{\"41\":4}}],[\">type\",{\"1\":{\"26\":2,\"27\":4,\"28\":2,\"34\":1}}],[\">isdone\",{\"1\":{\"40\":2}}],[\">inspect\",{\"1\":{\"38\":3}}],[\">fuel\",{\"1\":{\"42\":5,\"43\":1}}],[\">first\",{\"1\":{\"40\":2}}],[\">factory\",{\"1\":{\"34\":2}}],[\">execute\",{\"1\":{\"39\":1}}],[\">engine\",{\"1\":{\"22\":2,\"41\":2}}],[\">drive\",{\"1\":{\"36\":1,\"44\":2,\"45\":3}}],[\">decorate\",{\"1\":{\"33\":3}}],[\">realcar\",{\"1\":{\"36\":2}}],[\">notify\",{\"1\":{\"41\":2}}],[\">next\",{\"1\":{\"40\":2}}],[\">nextinspector\",{\"1\":{\"38\":10}}],[\">numcars++\",{\"1\":{\"35\":1}}],[\">numcars\",{\"1\":{\"35\":2}}],[\">name\",{\"1\":{\"32\":2,\"33\":3}}],[\">navigate\",{\"1\":{\"31\":2}}],[\">=\",{\"1\":{\"32\":2,\"40\":1}}],[\">playmusic\",{\"1\":{\"31\":2}}],[\">gasolinecar\",{\"1\":{\"30\":1}}],[\">currentstate\",{\"1\":{\"44\":10}}],[\">currentitem\",{\"1\":{\"40\":2}}],[\">currentindex++\",{\"1\":{\"40\":1}}],[\">currentindex\",{\"1\":{\"40\":5}}],[\">colleague\",{\"1\":{\"41\":6}}],[\">color\",{\"1\":{\"35\":3}}],[\">command\",{\"1\":{\"39\":11}}],[\">component\",{\"1\":{\"32\":18}}],[\">createcar\",{\"1\":{\"34\":2}}],[\">capacity\",{\"1\":{\"32\":4,\"40\":2}}],[\">cars\",{\"1\":{\"35\":4,\"40\":4}}],[\">carsystem\",{\"1\":{\"31\":9}}],[\">car\",{\"1\":{\"26\":5,\"28\":4,\"30\":2,\"31\":10,\"33\":3,\"39\":6}}],[\">children\",{\"1\":{\"32\":11}}],[\">childcount++\",{\"1\":{\"32\":1}}],[\">childcount\",{\"1\":{\"32\":7}}],[\">clone\",{\"1\":{\"27\":4}}],[\">brand\",{\"1\":{\"35\":3}}],[\">base\",{\"1\":{\"26\":4,\"38\":10}}],[\">build\",{\"1\":{\"26\":1}}],[\">builder\",{\"1\":{\"26\":9}}],[\">subject\",{\"1\":{\"43\":12}}],[\">shiftgear\",{\"1\":{\"41\":2}}],[\">size++\",{\"1\":{\"40\":1}}],[\">size\",{\"1\":{\"40\":4}}],[\">speed\",{\"1\":{\"33\":1,\"42\":5,\"43\":1}}],[\">settype\",{\"1\":{\"26\":1}}],[\">setyear\",{\"1\":{\"26\":1}}],[\">setmodel\",{\"1\":{\"26\":1}}],[\">strategy\",{\"1\":{\"45\":8}}],[\">state\",{\"1\":{\"42\":4,\"44\":9}}],[\">startengine\",{\"1\":{\"41\":2}}],[\">start\",{\"1\":{\"22\":1,\"44\":1}}],[\">stop\",{\"1\":{\"22\":1,\"44\":2}}],[\">year\",{\"1\":{\"24\":6,\"25\":6,\"26\":2,\"27\":5,\"28\":2,\"34\":2,\"40\":4,\"47\":3}}],[\"==\",{\"1\":{\"28\":1,\"32\":1,\"35\":2,\"38\":3,\"41\":2,\"43\":1}}],[\"=\",{\"1\":{\"22\":9,\"24\":12,\"25\":12,\"26\":18,\"27\":14,\"28\":6,\"30\":10,\"31\":22,\"32\":30,\"33\":9,\"34\":10,\"35\":15,\"36\":4,\"38\":16,\"39\":21,\"40\":28,\"41\":16,\"42\":11,\"43\":25,\"44\":22,\"45\":13,\"46\":14,\"47\":20,\"84\":3,\"121\":1,\"122\":4,\"129\":2,\"134\":1,\"146\":1}}],[\"ntesting\",{\"1\":{\"38\":3}}],[\"normal\",{\"1\":{\"45\":1}}],[\"normalmode\",{\"1\":{\"45\":10}}],[\"now\",{\"1\":{\"41\":1,\"44\":1}}],[\"no\",{\"1\":{\"38\":3,\"140\":1}}],[\"notifyobservers\",{\"1\":{\"43\":5}}],[\"notify\",{\"1\":{\"41\":5}}],[\"not\",{\"1\":{\"36\":2,\"140\":2,\"165\":1,\"172\":1}}],[\"network\",{\"1\":{\"53\":1}}],[\"needs\",{\"1\":{\"44\":1}}],[\"next\",{\"1\":{\"40\":4}}],[\"nextinspector\",{\"1\":{\"38\":6}}],[\"newcar\",{\"1\":{\"27\":6}}],[\"nums\",{\"1\":{\"118\":1}}],[\"numcars\",{\"1\":{\"35\":1}}],[\"null\",{\"1\":{\"24\":1,\"25\":1,\"28\":2,\"32\":2,\"36\":2,\"38\":6,\"39\":3,\"40\":2,\"41\":2,\"45\":1}}],[\"name\",{\"1\":{\"32\":12,\"33\":3}}],[\"navigation\",{\"1\":{\"43\":14}}],[\"navigating\",{\"1\":{\"31\":2}}],[\"navigate\",{\"1\":{\"31\":8}}],[\"ncloned\",{\"1\":{\"27\":1}}],[\"n\",{\"1\":{\"22\":2,\"24\":3,\"25\":3,\"26\":3,\"27\":5,\"28\":3,\"30\":2,\"31\":4,\"32\":2,\"33\":2,\"34\":1,\"35\":1,\"36\":3,\"38\":10,\"39\":3,\"40\":1,\"41\":4,\"42\":1,\"43\":2,\"44\":9,\"45\":3,\"46\":13,\"47\":3,\"129\":1}}],[\"pin>\",{\"1\":{\"140\":2}}],[\"pipreqs\",{\"1\":{\"139\":1,\"140\":1,\"141\":2,\"142\":1},\"2\":{\"144\":1}}],[\"pip\",{\"1\":{\"139\":1}}],[\"pypi\",{\"1\":{\"140\":3}}],[\"python37\",{\"1\":{\"147\":1}}],[\"python=c\",{\"1\":{\"147\":1}}],[\"python虚拟环境配置及其工作原理\",{\"0\":{\"145\":1}}],[\"python项目生成requirements文件\",{\"0\":{\"138\":1}}],[\"python\",{\"0\":{\"181\":1},\"1\":{\"22\":1,\"145\":1,\"147\":3,\"148\":1},\"2\":{\"144\":1,\"150\":1}}],[\"ppireqs\",{\"0\":{\"139\":1}}],[\"p\",{\"1\":{\"84\":13}}],[\"persistent\",{\"1\":{\"76\":1}}],[\"performance\",{\"1\":{\"45\":2}}],[\"ports\",{\"1\":{\"162\":1,\"165\":7}}],[\"port\",{\"0\":{\"151\":1,\"168\":1,\"182\":1},\"1\":{\"89\":2,\"90\":1,\"151\":1,\"162\":2,\"164\":2,\"165\":1}}],[\"posix\",{\"1\":{\"76\":1,\"146\":1}}],[\"powerful\",{\"1\":{\"46\":1}}],[\"platform是autosar为开发硬实时\",{\"1\":{\"72\":1}}],[\"platform是autosar为开发安全相关的高算力ecu\",{\"1\":{\"71\":1}}],[\"platform\",{\"0\":{\"71\":1,\"72\":1}}],[\"playing\",{\"1\":{\"31\":2}}],[\"playmusic\",{\"1\":{\"31\":8}}],[\"package\",{\"1\":{\"140\":1,\"163\":1}}],[\"path\",{\"1\":{\"140\":1}}],[\"patterns\",{\"0\":{\"155\":1}}],[\"pattern\",{\"0\":{\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"154\":1},\"1\":{\"33\":1}}],[\"parameters\",{\"1\":{\"165\":1}}],[\"parameter\",{\"0\":{\"118\":1},\"1\":{\"140\":3}}],[\"paintluxury\",{\"1\":{\"46\":2}}],[\"painting\",{\"1\":{\"46\":2}}],[\"painteconomy\",{\"1\":{\"46\":2}}],[\"paint\",{\"1\":{\"46\":6}}],[\"passed\",{\"1\":{\"140\":1}}],[\"pass\",{\"1\":{\"22\":9}}],[\"prefix来确定当前解释器是否从虚拟环境中运行\",{\"1\":{\"146\":1}}],[\"prefix\",{\"1\":{\"146\":1}}],[\"prefix指向用于创建环境的基本python\",{\"1\":{\"146\":1}}],[\"prefix指向虚拟环境的目录\",{\"1\":{\"146\":1}}],[\"prefix和\",{\"1\":{\"146\":1}}],[\"prefix和sys\",{\"1\":{\"146\":1}}],[\"prefix则指向虚拟环境的目录\",{\"1\":{\"146\":1}}],[\"private\",{\"1\":{\"118\":1}}],[\"printdata\",{\"1\":{\"129\":7}}],[\"printcarstate\",{\"1\":{\"42\":4}}],[\"printcar\",{\"1\":{\"27\":3,\"35\":6}}],[\"print\",{\"1\":{\"22\":2,\"140\":2}}],[\"printf\",{\"1\":{\"22\":2,\"24\":3,\"25\":3,\"26\":3,\"27\":5,\"28\":3,\"30\":2,\"31\":4,\"32\":2,\"33\":2,\"34\":1,\"35\":1,\"36\":3,\"38\":10,\"39\":3,\"40\":1,\"41\":4,\"42\":1,\"43\":2,\"44\":9,\"45\":3,\"46\":13,\"47\":3,\"129\":1}}],[\"programming\",{\"0\":{\"180\":1}}],[\"provide\",{\"1\":{\"165\":3}}],[\"projects\",{\"1\":{\"147\":1}}],[\"projects目录下创建虚拟环境\",{\"1\":{\"147\":1}}],[\"project\",{\"1\":{\"140\":3,\"141\":2}}],[\"proxy=\",{\"1\":{\"140\":2}}],[\"proxy\",{\"1\":{\"36\":2,\"89\":2,\"90\":2,\"92\":2,\"140\":2}}],[\"prototypes\",{\"0\":{\"164\":1,\"182\":1}}],[\"prototypecar\",{\"1\":{\"27\":6}}],[\"prototype\",{\"1\":{\"27\":2,\"164\":2}}],[\"product\",{\"1\":{\"26\":1}}],[\"public\",{\"1\":{\"22\":2}}],[\"push\",{\"1\":{\"4\":1}}],[\"pdf\",{\"1\":{\"22\":10}}],[\"ignore\",{\"1\":{\"140\":2}}],[\"its\",{\"1\":{\"76\":1}}],[\"iterator\",{\"0\":{\"40\":1},\"1\":{\"40\":46}}],[\"id\",{\"1\":{\"55\":1}}],[\"i++\",{\"1\":{\"35\":1,\"43\":2}}],[\"i\",{\"1\":{\"32\":8,\"35\":5,\"43\":8}}],[\"ifndef\",{\"1\":{\"129\":1}}],[\"if\",{\"1\":{\"28\":1,\"32\":3,\"35\":1,\"36\":1,\"38\":6,\"39\":2,\"40\":3,\"41\":2,\"43\":2}}],[\"implementor\",{\"1\":{\"31\":2}}],[\"implementation\",{\"1\":{\"22\":1}}],[\"imported\",{\"1\":{\"140\":1}}],[\"imports\",{\"1\":{\"140\":1}}],[\"import\",{\"1\":{\"22\":2}}],[\"iso11519\",{\"1\":{\"54\":1}}],[\"iso\",{\"1\":{\"54\":3}}],[\"isdone\",{\"1\":{\"40\":4}}],[\"is\",{\"1\":{\"22\":2,\"36\":5,\"39\":3,\"44\":8,\"76\":1}}],[\"investment\",{\"0\":{\"178\":1}}],[\"invoker\",{\"1\":{\"39\":25}}],[\"information\",{\"1\":{\"140\":1,\"165\":3}}],[\"info\",{\"1\":{\"140\":1}}],[\"init\",{\"1\":{\"129\":4,\"162\":1}}],[\"initializestates\",{\"1\":{\"44\":2}}],[\"in\",{\"1\":{\"45\":3,\"140\":6,\"141\":1,\"145\":1,\"164\":2}}],[\"instead\",{\"1\":{\"140\":1}}],[\"install\",{\"1\":{\"139\":1}}],[\"installing\",{\"1\":{\"46\":4}}],[\"installwheelsluxury\",{\"1\":{\"46\":2}}],[\"installwheelseconomy\",{\"1\":{\"46\":2}}],[\"installwheels\",{\"1\":{\"46\":5}}],[\"installengineluxury\",{\"1\":{\"46\":2}}],[\"installengineeconomy\",{\"1\":{\"46\":2}}],[\"installengine\",{\"1\":{\"46\":5}}],[\"instance\",{\"1\":{\"28\":7}}],[\"inspection\",{\"1\":{\"38\":4}}],[\"inspecting\",{\"1\":{\"38\":3}}],[\"inspectbrake\",{\"1\":{\"38\":2}}],[\"inspectwheel\",{\"1\":{\"38\":2}}],[\"inspector\",{\"1\":{\"38\":15}}],[\"inspectengine\",{\"1\":{\"38\":2}}],[\"inspect\",{\"1\":{\"38\":8}}],[\"index\",{\"1\":{\"32\":5}}],[\"into\",{\"1\":{\"76\":1}}],[\"int\",{\"1\":{\"22\":2,\"24\":2,\"25\":2,\"26\":4,\"27\":3,\"28\":2,\"30\":4,\"31\":1,\"32\":9,\"33\":3,\"34\":2,\"35\":3,\"36\":1,\"38\":1,\"39\":1,\"40\":8,\"41\":1,\"42\":5,\"43\":19,\"44\":1,\"45\":1,\"46\":1,\"47\":4,\"128\":2,\"129\":2,\"134\":2,\"135\":1}}],[\"interfaces\",{\"0\":{\"164\":1}}],[\"interface\",{\"1\":{\"22\":2,\"36\":1,\"164\":1}}],[\"interface代表对象的共有部分\",{\"1\":{\"14\":1}}],[\"interface概念\",{\"0\":{\"14\":1}}],[\"include\",{\"1\":{\"22\":1,\"24\":1,\"25\":1,\"26\":2,\"27\":3,\"28\":2,\"30\":1,\"31\":2,\"32\":3,\"33\":1,\"34\":2,\"35\":2,\"36\":1,\"38\":3,\"39\":3,\"40\":3,\"41\":3,\"42\":3,\"43\":2,\"44\":2,\"45\":2,\"46\":1,\"47\":1,\"129\":3}}],[\"swc\",{\"0\":{\"162\":1}}],[\"switch\",{\"1\":{\"24\":1,\"25\":1}}],[\"scripts\",{\"1\":{\"146\":1,\"147\":1}}],[\"schemes\",{\"1\":{\"140\":1}}],[\"scheduling\",{\"1\":{\"76\":1}}],[\"sys\",{\"1\":{\"146\":4}}],[\"system级指的是程序级别的配置\",{\"1\":{\"91\":1}}],[\"system\",{\"1\":{\"38\":1,\"87\":1,\"90\":1,\"91\":1}}],[\"symbolic\",{\"1\":{\"140\":1}}],[\"saved\",{\"1\":{\"141\":1}}],[\"save\",{\"1\":{\"140\":1}}],[\"savepath\",{\"1\":{\"140\":1}}],[\"saving\",{\"1\":{\"45\":1}}],[\"safety\",{\"1\":{\"76\":1}}],[\"same\",{\"1\":{\"76\":1}}],[\"software\",{\"1\":{\"160\":1,\"164\":1}}],[\"somefunction\",{\"1\":{\"128\":1}}],[\"soa\",{\"1\":{\"71\":1}}],[\"sold\",{\"1\":{\"34\":1}}],[\"solid\",{\"1\":{\"22\":1}}],[\"specification\",{\"1\":{\"76\":2}}],[\"speed\",{\"1\":{\"33\":3,\"42\":5,\"43\":11}}],[\"space\",{\"1\":{\"76\":2}}],[\"spi控制的要分配spi的sequence\",{\"1\":{\"63\":1}}],[\"sport\",{\"1\":{\"45\":1}}],[\"sportmode\",{\"1\":{\"45\":10}}],[\"should\",{\"1\":{\"140\":1}}],[\"shifted\",{\"1\":{\"41\":1}}],[\"shifting\",{\"1\":{\"41\":2}}],[\"shiftgear\",{\"1\":{\"41\":3}}],[\"shvets\",{\"1\":{\"9\":1}}],[\"successfully\",{\"1\":{\"141\":1}}],[\"support\",{\"1\":{\"76\":3}}],[\"super\",{\"1\":{\"46\":14,\"47\":2}}],[\"subject\",{\"1\":{\"43\":33}}],[\"subsystem\",{\"1\":{\"34\":1}}],[\"suvaccept\",{\"1\":{\"47\":3}}],[\"suvwithapple\",{\"1\":{\"31\":6}}],[\"suv\",{\"1\":{\"24\":16,\"25\":16,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":14,\"34\":2,\"47\":20}}],[\"simple\",{\"0\":{\"154\":1}}],[\"siezof\",{\"2\":{\"137\":1}}],[\"signal\",{\"1\":{\"76\":1}}],[\"size\",{\"1\":{\"40\":1,\"134\":4,\"135\":4}}],[\"sizeof\",{\"1\":{\"24\":3,\"25\":3,\"26\":3,\"27\":2,\"28\":1,\"31\":5,\"32\":4,\"33\":2,\"34\":3,\"35\":2,\"38\":3,\"39\":2,\"40\":6,\"41\":3,\"42\":2,\"43\":3,\"44\":4,\"45\":4,\"133\":4,\"134\":4,\"135\":2}}],[\"singleton\",{\"1\":{\"28\":9}}],[\"s\",{\"1\":{\"24\":3,\"25\":3,\"26\":1,\"27\":1,\"28\":1,\"30\":2,\"32\":2,\"33\":2,\"34\":1,\"38\":3,\"39\":3,\"40\":1,\"47\":3,\"121\":3,\"122\":7}}],[\"sender\",{\"1\":{\"165\":2}}],[\"separated\",{\"1\":{\"140\":1}}],[\"sellcar\",{\"1\":{\"34\":4}}],[\"self\",{\"1\":{\"22\":7}}],[\"set\",{\"1\":{\"140\":1}}],[\"setmode函数用于被mainfunction或者canif接口调用控制\",{\"1\":{\"62\":1}}],[\"setmodel\",{\"1\":{\"26\":4}}],[\"setstrategy\",{\"1\":{\"45\":4}}],[\"setcarstate\",{\"1\":{\"43\":4}}],[\"setcommand\",{\"1\":{\"39\":3}}],[\"setnextinspector\",{\"1\":{\"38\":3}}],[\"settype\",{\"1\":{\"26\":4}}],[\"setyear\",{\"1\":{\"26\":4}}],[\"sedanwithandroid\",{\"1\":{\"31\":6}}],[\"sedan\",{\"1\":{\"24\":13,\"25\":13,\"26\":2,\"27\":2,\"28\":2,\"30\":2,\"31\":12,\"34\":2}}],[\"services\",{\"1\":{\"58\":1,\"165\":2}}],[\"service\",{\"1\":{\"36\":2,\"76\":1}}],[\"servlets\",{\"1\":{\"22\":1}}],[\"server\",{\"1\":{\"22\":1,\"140\":2,\"165\":1}}],[\"strategies\",{\"1\":{\"76\":1}}],[\"strategy\",{\"0\":{\"45\":1},\"1\":{\"45\":8}}],[\"strcmp\",{\"1\":{\"38\":3,\"41\":2}}],[\"strdup\",{\"1\":{\"27\":3,\"32\":2}}],[\"structure\",{\"1\":{\"47\":1}}],[\"struct\",{\"1\":{\"22\":2,\"24\":1,\"25\":1,\"26\":9,\"27\":3,\"28\":2,\"30\":8,\"31\":10,\"32\":10,\"33\":3,\"34\":3,\"35\":2,\"36\":3,\"38\":6,\"39\":7,\"40\":7,\"41\":8,\"42\":3,\"43\":11,\"44\":6,\"45\":6,\"46\":3,\"47\":9,\"129\":1}}],[\"standard\",{\"1\":{\"140\":1}}],[\"state\",{\"0\":{\"44\":1},\"1\":{\"42\":2,\"44\":39}}],[\"static\",{\"1\":{\"22\":1,\"28\":1}}],[\"startstatestop\",{\"1\":{\"44\":3}}],[\"startstatestart\",{\"1\":{\"44\":3}}],[\"startstatedrive\",{\"1\":{\"44\":3}}],[\"startstate\",{\"1\":{\"44\":11}}],[\"starting\",{\"1\":{\"39\":1,\"44\":1}}],[\"startenginecommand\",{\"1\":{\"39\":11}}],[\"startengine\",{\"1\":{\"39\":3,\"41\":3}}],[\"started\",{\"1\":{\"22\":1,\"41\":2,\"44\":2}}],[\"startcommand\",{\"1\":{\"39\":7}}],[\"startconcreteengine\",{\"1\":{\"22\":2}}],[\"startcar\",{\"1\":{\"22\":2}}],[\"start\",{\"1\":{\"22\":2,\"44\":6}}],[\"stopping\",{\"1\":{\"39\":1,\"44\":2}}],[\"stoppedstatestop\",{\"1\":{\"44\":3}}],[\"stoppedstatestart\",{\"1\":{\"44\":3}}],[\"stoppedstatedrive\",{\"1\":{\"44\":3}}],[\"stoppedstate\",{\"1\":{\"44\":14}}],[\"stopped\",{\"1\":{\"22\":1,\"44\":1}}],[\"stopenginecommand\",{\"1\":{\"39\":11}}],[\"stopengine\",{\"1\":{\"39\":3}}],[\"stopcommand\",{\"1\":{\"39\":7}}],[\"stopconcreteengine\",{\"1\":{\"22\":2}}],[\"stopcar\",{\"1\":{\"22\":2}}],[\"stop\",{\"1\":{\"22\":2,\"44\":6}}],[\"values\",{\"1\":{\"162\":1}}],[\"venv参数\",{\"1\":{\"147\":1}}],[\"venv\",{\"1\":{\"145\":1,\"147\":2,\"148\":1},\"2\":{\"150\":1}}],[\"versioning\",{\"1\":{\"140\":1}}],[\"vector<int>\",{\"1\":{\"118\":1}}],[\"vinci\",{\"0\":{\"183\":1}}],[\"view\",{\"1\":{\"164\":1}}],[\"virtual\",{\"1\":{\"76\":1}}],[\"visiting\",{\"1\":{\"47\":3}}],[\"visittruck\",{\"1\":{\"47\":4}}],[\"visitsuv\",{\"1\":{\"47\":4}}],[\"visitcar\",{\"1\":{\"47\":4}}],[\"visit\",{\"1\":{\"47\":2}}],[\"visitor\",{\"0\":{\"47\":1},\"1\":{\"47\":20}}],[\"v\",{\"1\":{\"47\":1}}],[\"void\",{\"1\":{\"22\":7,\"26\":6,\"27\":1,\"30\":5,\"31\":10,\"32\":9,\"33\":4,\"34\":1,\"35\":1,\"36\":6,\"38\":5,\"39\":12,\"40\":6,\"41\":6,\"42\":2,\"43\":12,\"44\":23,\"45\":5,\"46\":17,\"47\":12,\"128\":1,\"129\":5}}],[\"vuepress\",{\"2\":{\"6\":1}}],[\"汽车特性展示访问者\",{\"1\":{\"47\":1}}],[\"汽车制造过程\",{\"1\":{\"46\":1}}],[\"汽车有不同的驾驶模式\",{\"1\":{\"45\":1}}],[\"汽车有不同的状态\",{\"1\":{\"44\":1}}],[\"汽车有一个\",{\"1\":{\"22\":1}}],[\"汽车的状态\",{\"1\":{\"42\":1}}],[\"汽车集合结构体\",{\"1\":{\"40\":1}}],[\"汽车检查器\",{\"1\":{\"38\":1}}],[\"汽车已安装天窗\",{\"1\":{\"33\":1}}],[\"汽车已安装\",{\"1\":{\"33\":1}}],[\"汽车可以由不同的零部件组合而成\",{\"1\":{\"32\":1}}],[\"汽车零部件\",{\"1\":{\"32\":3}}],[\"汽车\",{\"1\":{\"31\":1,\"32\":3,\"39\":2,\"43\":1,\"47\":1}}],[\"汽车结构体\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"40\":1}}],[\"汽车是交通工具\",{\"1\":{\"22\":1}}],[\"汽车是一个高层模块\",{\"1\":{\"22\":1}}],[\"汽车不应该直接依赖于具体的引擎实现\",{\"1\":{\"22\":1}}],[\"实际的\",{\"1\":{\"134\":1}}],[\"实际的实现可能更为复杂\",{\"1\":{\"134\":1}}],[\"实际上是创建了一个新的字符串\",{\"1\":{\"122\":1}}],[\"实际上就是面向接口开发\",{\"1\":{\"22\":1}}],[\"实时性与安全性需求减少\",{\"1\":{\"76\":1}}],[\"实现通常是由编译器内部提供的\",{\"1\":{\"134\":1}}],[\"实现方式\",{\"0\":{\"134\":1}}],[\"实现整车层面的虚拟功能总线\",{\"1\":{\"72\":1}}],[\"实现软硬解耦\",{\"1\":{\"72\":1}}],[\"实现抽象类中的抽象方法\",{\"1\":{\"46\":1}}],[\"实现策略接口的具体算法\",{\"1\":{\"45\":1}}],[\"实现状态接口的具体状态类\",{\"1\":{\"44\":1}}],[\"实现观察者接口\",{\"1\":{\"43\":1}}],[\"实现主题接口\",{\"1\":{\"43\":1}}],[\"实现备忘录模式可能会比较复杂\",{\"1\":{\"42\":1}}],[\"实现复杂性\",{\"1\":{\"42\":1}}],[\"实现中介者接口\",{\"1\":{\"41\":1}}],[\"实现聚合接口\",{\"1\":{\"40\":1}}],[\"实现迭代器接口\",{\"1\":{\"40\":1}}],[\"实现命令接口\",{\"1\":{\"39\":1}}],[\"实现处理请求的具体处理者\",{\"1\":{\"38\":1}}],[\"实现远程访问等\",{\"1\":{\"36\":1}}],[\"实现远程访问\",{\"1\":{\"36\":1}}],[\"实现实现接口的具体类\",{\"1\":{\"31\":1}}],[\"实现部分接口\",{\"1\":{\"31\":1}}],[\"实现部分\",{\"1\":{\"31\":2}}],[\"实现适配器的充电方法\",{\"1\":{\"30\":1}}],[\"实现传统燃油汽车接口的加油方法\",{\"1\":{\"30\":1}}],[\"实现电动汽车接口的充电方法\",{\"1\":{\"30\":1}}],[\"实现了类的初始化和打印数据的方法\",{\"1\":{\"129\":1}}],[\"实现了观察者接口\",{\"1\":{\"43\":1}}],[\"实现了主题接口\",{\"1\":{\"43\":1}}],[\"实现了中介者接口\",{\"1\":{\"41\":1}}],[\"实现了迭代器接口的方法\",{\"1\":{\"40\":1}}],[\"实现了请求发送者与接收者的解耦\",{\"1\":{\"39\":1}}],[\"实现了命令接口\",{\"1\":{\"39\":1}}],[\"实现了处理请求的方法inspect\",{\"1\":{\"38\":1}}],[\"实现了享元接口\",{\"1\":{\"35\":1}}],[\"实现了组件接口\",{\"1\":{\"32\":1}}],[\"实现了\",{\"1\":{\"32\":2,\"40\":1,\"47\":1}}],[\"实现了对传统燃油汽车的充电操作\",{\"1\":{\"30\":1}}],[\"实现了将传统燃油汽车的加油接口转换为电动汽车的充电接口的功能\",{\"1\":{\"30\":1}}],[\"实现了克隆方法的类\",{\"1\":{\"27\":1}}],[\"实现了生成器接口\",{\"1\":{\"26\":1}}],[\"实现了抽象访问者中声明的各种\",{\"1\":{\"47\":1}}],[\"实现了抽象类中的抽象方法\",{\"1\":{\"46\":1}}],[\"实现了抽象工厂的构建方法\",{\"1\":{\"25\":1}}],[\"实现了抽象工厂类中的工厂方法\",{\"1\":{\"24\":1}}],[\"实现了抽象产品的接口\",{\"1\":{\"25\":1}}],[\"实现了抽象产品类中的产品方法\",{\"1\":{\"24\":1}}],[\"实现\",{\"1\":{\"18\":1,\"59\":1}}],[\"实现拒绝修改\",{\"1\":{\"14\":1}}],[\"高\",{\"1\":{\"102\":1}}],[\"高安全性嵌入式系统\",{\"1\":{\"72\":1}}],[\"高可靠性\",{\"1\":{\"53\":1}}],[\"高层模块不应该依赖于低层模块\",{\"1\":{\"22\":1}}],[\"高效和可靠\",{\"1\":{\"17\":1}}],[\"软件组件是类型\",{\"1\":{\"164\":1}}],[\"软件的行为不会发生变化\",{\"1\":{\"22\":1}}],[\"软件实体应该对扩展开放\",{\"1\":{\"22\":1}}],[\"一时这些资金集中在某个领域\",{\"1\":{\"111\":1}}],[\"一位成功投资者的重要素质之一便是市场情况不允许时\",{\"1\":{\"109\":1}}],[\"一位成功的炒手必须如一位成功的商人\",{\"1\":{\"103\":1}}],[\"一定要参照一下股票的走势图\",{\"1\":{\"105\":1}}],[\"一定要摸清对方的心理\",{\"1\":{\"96\":1}}],[\"一般来说\",{\"1\":{\"122\":1}}],[\"一般人常常想像出各种理由把这一不正常的运动\",{\"1\":{\"103\":1}}],[\"一般投资者入场买股票主要不是因为股票的成本收益比率低或红利高\",{\"1\":{\"101\":1}}],[\"一只正常运动的股票\",{\"1\":{\"103\":1}}],[\"一只无势的股票通常不适合炒作\",{\"1\":{\"101\":1}}],[\"一旦怀抱\",{\"1\":{\"110\":1}}],[\"一旦股价超过a点\",{\"1\":{\"104\":1}}],[\"一旦股票开始一个新的走势\",{\"1\":{\"103\":1}}],[\"一旦支撑线被突破\",{\"1\":{\"102\":1}}],[\"一旦阻力线被突破\",{\"1\":{\"102\":1}}],[\"一些算法公式技巧摘录\",{\"0\":{\"83\":1}}],[\"一个是通货膨胀\",{\"1\":{\"102\":1}}],[\"一个元素的集合\",{\"1\":{\"47\":1}}],[\"一个对象的更新需要触发其他对象的更新\",{\"1\":{\"43\":1}}],[\"一个类存在两个独立变化的维度\",{\"1\":{\"31\":1}}],[\"一个类应该只负责一项职责\",{\"1\":{\"22\":1}}],[\"一个类应该只有一个引起它变化的原因\",{\"1\":{\"22\":1}}],[\"一个产品等级结构\",{\"1\":{\"25\":1}}],[\"一\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"96\":1,\"109\":1,\"113\":1}}],[\"一书出版以来\",{\"1\":{\"10\":1}}],[\"在应用程序组件中配置服务端口\",{\"0\":{\"166\":1}}],[\"在object\",{\"1\":{\"164\":1}}],[\"在命令提示符或者powershell中\",{\"1\":{\"147\":1}}],[\"在windows\",{\"1\":{\"147\":1}}],[\"在其中使用类和对象\",{\"1\":{\"129\":1}}],[\"在其中调用访问者对象的对应方法以便对自身进行操作\",{\"1\":{\"47\":1}}],[\"在全局范围内使用extern可以使变量在当前文件中具有全局作用域\",{\"1\":{\"128\":1}}],[\"在c++中\",{\"1\":{\"122\":1}}],[\"在c++类中vector声明\",{\"0\":{\"118\":1}}],[\"在c语言中声明和定义一个变量是同时进行的\",{\"1\":{\"127\":1}}],[\"在c语言中\",{\"1\":{\"22\":1,\"128\":1,\"129\":1}}],[\"在假象被公众认识之前退出游戏\",{\"1\":{\"111\":1}}],[\"在本书的最后一章\",{\"1\":{\"110\":1}}],[\"在本例中是\",{\"1\":{\"41\":1}}],[\"在卖股时争取最大的税务效益\",{\"1\":{\"109\":1}}],[\"在你买股票之前\",{\"1\":{\"109\":1}}],[\"在\",{\"1\":{\"106\":1,\"163\":2}}],[\"在买入之前\",{\"1\":{\"105\":2}}],[\"在实际中它们也最为有效\",{\"1\":{\"104\":1}}],[\"在炒股问题上\",{\"1\":{\"103\":1}}],[\"在正确的时间和环境做正确的事才有可能得到预想的效果\",{\"1\":{\"103\":1}}],[\"在忍无可忍的时候\",{\"1\":{\"103\":1}}],[\"在一个文件中使用\",{\"1\":{\"128\":1}}],[\"在一个文件中声明变量\",{\"1\":{\"128\":1}}],[\"在一个git脚本中当执行取消代理指令\",{\"1\":{\"92\":1}}],[\"在一固定的区间波动\",{\"1\":{\"103\":1}}],[\"在牛市结束或接近结束的时候卖掉你的所有股票\",{\"1\":{\"102\":1}}],[\"在跌势时\",{\"1\":{\"101\":1}}],[\"在升势图中\",{\"1\":{\"101\":1}}],[\"在股市\",{\"1\":{\"96\":1}}],[\"在支持唤醒的trcv一定要确保下电进入sleep\",{\"1\":{\"62\":1}}],[\"在示例中\",{\"1\":{\"47\":1}}],[\"在汽车制造的示例中\",{\"1\":{\"46\":1}}],[\"在汽车应用中\",{\"1\":{\"31\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1}}],[\"在运行时需要根据不同的条件选择不同的算法\",{\"1\":{\"45\":1}}],[\"在某些情况下\",{\"1\":{\"42\":1}}],[\"在getcar方法中\",{\"1\":{\"35\":1}}],[\"在getsingleton方法中\",{\"1\":{\"28\":1}}],[\"在sellcar函数中\",{\"1\":{\"34\":1}}],[\"在适配器的充电方法adaptercharge中\",{\"1\":{\"30\":1}}],[\"在适配器的构造函数中\",{\"1\":{\"30\":1}}],[\"在使用应用程序端口之前\",{\"1\":{\"165\":1}}],[\"在使用代理模式时\",{\"1\":{\"36\":1}}],[\"在使用享元模式时\",{\"1\":{\"35\":1}}],[\"在使用单例模式时\",{\"1\":{\"28\":1}}],[\"在使用框架时\",{\"1\":{\"22\":1}}],[\"在多线程环境下\",{\"1\":{\"28\":1}}],[\"在绝大多数情况下\",{\"1\":{\"27\":1}}],[\"在main函数中\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"30\":1,\"34\":1,\"36\":1}}],[\"在函数内部\",{\"1\":{\"24\":1,\"25\":1}}],[\"在上升阶段\",{\"1\":{\"101\":1}}],[\"在上述示例代码中\",{\"1\":{\"34\":1}}],[\"在上述示例中\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"30\":1,\"35\":1,\"36\":1}}],[\"在上述代码中\",{\"1\":{\"33\":1}}],[\"在上面的示例中\",{\"1\":{\"22\":1}}],[\"在junit中\",{\"1\":{\"22\":1}}],[\"在这里我要强调的是\",{\"1\":{\"103\":1}}],[\"在这个判断过程中不应占有任何地位\",{\"1\":{\"110\":1}}],[\"在这个过程中\",{\"1\":{\"22\":1}}],[\"在这个例子中\",{\"1\":{\"22\":4,\"129\":1}}],[\"在这种原则下\",{\"1\":{\"22\":1}}],[\"在这种情况下\",{\"1\":{\"22\":1}}],[\"在重写方法时\",{\"1\":{\"22\":1}}],[\"在不同的条件下创建不同的对象以及将对象的创建过程与使用过程分离的场景\",{\"1\":{\"24\":1}}],[\"在不同语言中的实现\",{\"1\":{\"18\":1}}],[\"在不修改现有代码的情况下\",{\"1\":{\"22\":1}}],[\"在软件开发中\",{\"1\":{\"22\":1}}],[\"组网灵活\",{\"1\":{\"55\":1}}],[\"组合is有\",{\"1\":{\"22\":1}}],[\"组合是代替继承的一种方法\",{\"1\":{\"22\":1}}],[\"组合优于继承\",{\"1\":{\"22\":2}}],[\"组合模式通过定义统一的接口\",{\"1\":{\"32\":1}}],[\"组合模式能清晰地表示对象的层次结构\",{\"1\":{\"32\":1}}],[\"组合模式主要包括以下几个部分\",{\"1\":{\"32\":1}}],[\"组合模式使得客户端可以统一对待单个对象和组合对象\",{\"1\":{\"32\":1}}],[\"组合模式是一种结构型设计模式\",{\"1\":{\"32\":1}}],[\"组合模式\",{\"0\":{\"32\":1},\"1\":{\"20\":1}}],[\"组件\",{\"1\":{\"15\":1,\"32\":2,\"33\":1}}],[\"桥接模式通过分离抽象部分和实现部分\",{\"1\":{\"31\":1}}],[\"桥接模式提高了系统的可扩展性\",{\"1\":{\"31\":1}}],[\"桥接模式主要包括以下几个部分\",{\"1\":{\"31\":1}}],[\"桥接模式是一种结构型设计模式\",{\"1\":{\"31\":1}}],[\"桥接模式\",{\"0\":{\"31\":1},\"1\":{\"20\":1}}],[\"并根据需要选择合适的策略\",{\"1\":{\"45\":1}}],[\"并根据状态的变化执行相应的行为\",{\"1\":{\"44\":1}}],[\"并通知相关的监控系统\",{\"1\":{\"43\":1}}],[\"并通过上下文调用代码生成器菜单\",{\"1\":{\"169\":1}}],[\"并通过myobject\",{\"1\":{\"129\":1}}],[\"并通过getcar方法获取了多个汽车享元对象\",{\"1\":{\"35\":1}}],[\"并通过调用sellcar函数来销售汽车\",{\"1\":{\"34\":1}}],[\"并维护主题的状态\",{\"1\":{\"43\":1}}],[\"并维护对实现部分的引用\",{\"1\":{\"31\":1}}],[\"并防止其他对象访问备忘录\",{\"1\":{\"42\":1}}],[\"并使用python\",{\"1\":{\"147\":1}}],[\"并使用备忘录对象恢复其内部状态\",{\"1\":{\"42\":1}}],[\"并使用createdecorator函数为汽车对象创建了两个装饰对象\",{\"1\":{\"33\":1}}],[\"并简化了对象之间的交互\",{\"1\":{\"41\":1}}],[\"并希望支持多种遍历方式的场景\",{\"1\":{\"40\":1}}],[\"并负责遍历聚合对象中的元素\",{\"1\":{\"40\":1}}],[\"并支持请求的撤销和重做操作\",{\"1\":{\"39\":1}}],[\"并提交请求进行测试\",{\"1\":{\"38\":1}}],[\"并提供设置策略的方法\",{\"1\":{\"45\":1}}],[\"并提供注册\",{\"1\":{\"43\":1}}],[\"并提供接口的默认实现\",{\"1\":{\"32\":1}}],[\"并提供playmusic和navigate方法\",{\"1\":{\"31\":1}}],[\"并提供了一个全局访问点来访问该实例\",{\"1\":{\"28\":1}}],[\"并提供了设置产品参数的方法\",{\"1\":{\"26\":1}}],[\"并提供一个方法来返回具体迭代器的实例\",{\"1\":{\"40\":1}}],[\"并提供一个公共静态方法来获取该实例\",{\"1\":{\"28\":1}}],[\"并提供一个全局访问点来访问该实例\",{\"1\":{\"28\":1}}],[\"并包含创建备忘录和从备忘录恢复状态的方法\",{\"1\":{\"42\":1}}],[\"并包含对下一个处理者的引用nextinspector\",{\"1\":{\"38\":1}}],[\"并包含对下一个处理者的引用\",{\"1\":{\"38\":1}}],[\"并包含一个子节点数组\",{\"1\":{\"32\":1}}],[\"并沿着这条链传递请求\",{\"1\":{\"38\":1}}],[\"并允许在将请求提交给对象前后进行一些处理\",{\"1\":{\"36\":1}}],[\"并在状态改变时通知所有观察者\",{\"1\":{\"43\":1}}],[\"并在处理不了请求时将其传递给下一个处理者\",{\"1\":{\"38\":1}}],[\"并在不修改原类的情况下添加额外的行为\",{\"1\":{\"33\":1}}],[\"并在构建汽车时创建了一个汽车结构体的实例\",{\"1\":{\"26\":1}}],[\"并创建了一个适配器对象adapter\",{\"1\":{\"30\":1}}],[\"并将每一个算法封装起来\",{\"1\":{\"45\":2}}],[\"并将其转换为\",{\"1\":{\"135\":1}}],[\"并将其与代理关联\",{\"1\":{\"36\":1}}],[\"并将其销售出去\",{\"1\":{\"34\":1}}],[\"并将其传递给car构造函数\",{\"1\":{\"22\":1}}],[\"并将叶子节点添加到组合节点中\",{\"1\":{\"32\":1}}],[\"并将传统燃油汽车对象作为参数传递给适配器的构造函数\",{\"1\":{\"30\":1}}],[\"并打印了它们的信息\",{\"1\":{\"35\":1}}],[\"并打印汽车的信息\",{\"1\":{\"28\":1}}],[\"并打印出汽车的信息\",{\"1\":{\"24\":1,\"25\":1}}],[\"并输出了汽车的信息\",{\"1\":{\"26\":1}}],[\"并设置汽车的模型和年份信息\",{\"1\":{\"24\":1,\"25\":1}}],[\"并返回创建的汽车指针\",{\"1\":{\"24\":1,\"25\":1}}],[\"并检查其结果是否符合预期\",{\"1\":{\"22\":1}}],[\"并且您可以运行已安装的脚本而不必使用它们的完整路径\",{\"1\":{\"146\":1}}],[\"并且可以在该环境中安装和运行特定版本的python程序\",{\"1\":{\"147\":1}}],[\"并且可以动态地更换策略\",{\"1\":{\"45\":1}}],[\"并且可以切换状态\",{\"1\":{\"44\":1}}],[\"并且可以用于实现撤销操作\",{\"1\":{\"42\":1}}],[\"并且可以独立地改变它们之间的交互\",{\"1\":{\"41\":1}}],[\"并且可以灵活地改变处理者的顺序\",{\"1\":{\"38\":1}}],[\"并且希望使用统一的遍历接口\",{\"1\":{\"40\":1}}],[\"并且支持请求的排队\",{\"1\":{\"39\":1}}],[\"并且在运行时需要动态地选择装饰类\",{\"1\":{\"33\":1}}],[\"并且这两个维度都需要独立扩展\",{\"1\":{\"31\":1}}],[\"并且需要在抽象工厂类中添加相应的抽象方法\",{\"1\":{\"25\":1}}],[\"并且需要花费更多的时间来学习和理解整个框架的工作原理\",{\"1\":{\"22\":1}}],[\"并且降低引入新技术所带来的风险\",{\"1\":{\"22\":1}}],[\"并且junit框架在需要执行这些方法时会主动调用它们\",{\"1\":{\"22\":1}}],[\"并且你会覆盖一些方法或者使用注解来标记测试方法\",{\"1\":{\"22\":1}}],[\"并且不会导致类层次结构的爆炸性增长\",{\"1\":{\"22\":1}}],[\"并向你报告测试结果\",{\"1\":{\"22\":1}}],[\"并为它们应用不同的主题样式\",{\"1\":{\"22\":1}}],[\"并同时保持结构的灵活和高效\",{\"1\":{\"20\":1}}],[\"并用c语言简单举例\",{\"1\":{\"7\":1}}],[\"原理\",{\"0\":{\"122\":1,\"133\":1}}],[\"原文如下\",{\"1\":{\"73\":1}}],[\"原型和接口\",{\"0\":{\"164\":1}}],[\"原型\",{\"1\":{\"27\":1}}],[\"原型模式适用于创建复杂对象\",{\"1\":{\"27\":1}}],[\"原型模式的优点是提高性能\",{\"1\":{\"27\":1}}],[\"原型模式可能会导致安全问题\",{\"1\":{\"27\":1}}],[\"原型模式可以通过添加新的原型类来扩展系统的功能\",{\"1\":{\"27\":1}}],[\"原型模式可以通过复制已有对象来创建新对象\",{\"1\":{\"27\":1}}],[\"原型模式可以避免重复创建对象的开销\",{\"1\":{\"27\":1}}],[\"原型模式需要为每个原型对象分配内存\",{\"1\":{\"27\":1}}],[\"原型模式是一种创建型设计模式\",{\"1\":{\"27\":2}}],[\"原型模式\",{\"0\":{\"27\":1}}],[\"原型模式和单例模式\",{\"1\":{\"20\":1}}],[\"原则\",{\"1\":{\"22\":1,\"48\":1}}],[\"原有的设计模式也在不断演进和完善\",{\"1\":{\"10\":1}}],[\"404\",{\"1\":{\"172\":1}}],[\"40米\",{\"1\":{\"54\":1}}],[\"4\",{\"0\":{\"20\":1,\"166\":1},\"1\":{\"22\":1,\"32\":2,\"98\":1,\"99\":1,\"101\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"135\":1}}],[\"结构体\",{\"1\":{\"42\":2,\"43\":2,\"44\":1,\"45\":1}}],[\"结构或者逻辑抽象出来\",{\"1\":{\"22\":1}}],[\"结构型模式包括适配器模式\",{\"1\":{\"20\":1}}],[\"结构型模式介绍了如何将对象和类组装成较大的结构\",{\"1\":{\"20\":1}}],[\"结构型模式\",{\"1\":{\"20\":2}}],[\"结构型模式主要用于组织对象\",{\"1\":{\"20\":1}}],[\"结构型模式和行为型模式三大类\",{\"1\":{\"20\":1}}],[\"结构\",{\"1\":{\"18\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1}}],[\"描述问题和解决方案\",{\"1\":{\"18\":1}}],[\"意图\",{\"1\":{\"18\":1}}],[\"模板方法定义了算法的骨架\",{\"1\":{\"46\":1}}],[\"模板方法将公共的步骤实现在抽象类中\",{\"1\":{\"46\":1}}],[\"模板方法使得子类可以在不改变算法结构的情况下重新定义算法的某些步骤\",{\"1\":{\"46\":1}}],[\"模板方法模式通过定义一个算法的骨架\",{\"1\":{\"46\":1}}],[\"模板方法模式通常由以下几个部分组成\",{\"1\":{\"46\":1}}],[\"模板方法模式是一种行为型设计模式\",{\"1\":{\"46\":1}}],[\"模板方法模式\",{\"0\":{\"46\":1}}],[\"模板方法模式和访问者模式\",{\"1\":{\"20\":1}}],[\"模拟不同的汽车零部件\",{\"1\":{\"38\":1}}],[\"模拟请求\",{\"1\":{\"36\":1}}],[\"模式切换\",{\"0\":{\"62\":1}}],[\"模式与实践\",{\"1\":{\"48\":1}}],[\"模式的本质\",{\"1\":{\"22\":1}}],[\"模式比框架更小且更抽象\",{\"1\":{\"22\":1}}],[\"模式像蓝图\",{\"1\":{\"19\":1}}],[\"模式和算法的区别\",{\"0\":{\"19\":1}}],[\"模式构成\",{\"0\":{\"18\":1}}],[\"模块以及它们之间的关系和交互\",{\"1\":{\"15\":1}}],[\"灵活性和可扩展性\",{\"1\":{\"26\":1,\"30\":1}}],[\"灵活性\",{\"1\":{\"17\":1,\"24\":1,\"25\":1,\"26\":1}}],[\"通货膨胀\",{\"1\":{\"98\":1}}],[\"通信\",{\"1\":{\"72\":1}}],[\"通信介质选择灵活\",{\"1\":{\"55\":1}}],[\"通信标准\",{\"1\":{\"54\":2}}],[\"通知延迟\",{\"1\":{\"43\":1}}],[\"通知剩余观察者\",{\"1\":{\"43\":1}}],[\"通知观察者\",{\"1\":{\"43\":1}}],[\"通知相关的监控系统\",{\"1\":{\"43\":1}}],[\"通常是偶像人物\",{\"1\":{\"111\":1}}],[\"通常是一个抽象类或接口\",{\"1\":{\"47\":1}}],[\"通常是高层业务逻辑\",{\"1\":{\"31\":1}}],[\"通常情况下\",{\"1\":{\"36\":1}}],[\"通常包含一系列创建方法\",{\"1\":{\"26\":1}}],[\"通常会使用其他设计模式\",{\"1\":{\"22\":1}}],[\"通过图形视图或文本网格视图\",{\"1\":{\"160\":1}}],[\"通过调用myclass\",{\"1\":{\"129\":1}}],[\"通过调用单例类的公共静态方法来获取唯一的实例\",{\"1\":{\"28\":1}}],[\"通过将test\",{\"1\":{\"135\":1}}],[\"通过将字符\",{\"1\":{\"122\":1}}],[\"通过将现有字符串s和字符\",{\"1\":{\"122\":1}}],[\"通过将操作封装在访问者对象中\",{\"1\":{\"47\":1}}],[\"通过执行代理查看指令\",{\"1\":{\"92\":1}}],[\"通过can\",{\"1\":{\"56\":1}}],[\"通过增加新的具体访问者\",{\"1\":{\"47\":1}}],[\"通过备忘录模式\",{\"1\":{\"42\":1}}],[\"通过备忘录\",{\"1\":{\"42\":1}}],[\"通过定义统一的遍历接口\",{\"1\":{\"40\":1}}],[\"通过命令对象来解耦请求的发送者和接收者\",{\"1\":{\"39\":1}}],[\"通过共享相同的状态\",{\"1\":{\"35\":1}}],[\"通过共享多个对象所共有的相同状态\",{\"1\":{\"35\":1}}],[\"通过创建一个装饰类来包装原有的类\",{\"1\":{\"33\":1}}],[\"通过组合来减少继承层次\",{\"1\":{\"31\":1}}],[\"通过适配器对象调用充电方法\",{\"1\":{\"30\":1}}],[\"通过使用享元模式\",{\"1\":{\"35\":1}}],[\"通过使用工厂方法模式\",{\"1\":{\"24\":1}}],[\"通过使用设计模式\",{\"1\":{\"11\":4}}],[\"通过继承复用代码可能导致平行继承体系的产生\",{\"1\":{\"22\":1}}],[\"通过复用已有的代码\",{\"1\":{\"22\":1}}],[\"通用性\",{\"1\":{\"17\":1}}],[\"而sys\",{\"1\":{\"146\":1}}],[\"而只是声明它的存在\",{\"1\":{\"128\":1}}],[\"而最重要的是熬\",{\"1\":{\"114\":1}}],[\"而你的想法常常是错的\",{\"1\":{\"109\":1}}],[\"而且我只下小注\",{\"1\":{\"104\":1}}],[\"而且难以解决问题\",{\"1\":{\"53\":1}}],[\"而在于我能安坐不动\",{\"1\":{\"109\":1}}],[\"而在于它给炒股者提供的幻想\",{\"1\":{\"96\":1}}],[\"而在于危急的时候怎么逃\",{\"1\":{\"96\":1}}],[\"而应用软件可以理解为大脑或灵魂\",{\"1\":{\"72\":1}}],[\"而应用程序代码不能主动调用框架\",{\"1\":{\"22\":1}}],[\"而应用程序代码则通过特定的方式与框架进行交互\",{\"1\":{\"22\":1}}],[\"而非完全动态\",{\"1\":{\"71\":1}}],[\"而提供的解决方案\",{\"1\":{\"71\":1,\"72\":1}}],[\"而某些步骤则因车型不同而有所差异\",{\"1\":{\"46\":1}}],[\"而又无需使代码依赖它们所属的类\",{\"1\":{\"27\":1}}],[\"而无需创建实际的实例\",{\"1\":{\"135\":1}}],[\"而无需改变上下文的代码\",{\"1\":{\"44\":1}}],[\"而无需关心对象的具体实现细节\",{\"1\":{\"27\":1}}],[\"而无需关心产品对象的具体实现细节\",{\"1\":{\"24\":1}}],[\"而无需指定其具体类\",{\"1\":{\"25\":2}}],[\"而无需修改要操作的元素类\",{\"1\":{\"47\":1}}],[\"而无需修改已有代码\",{\"1\":{\"27\":1}}],[\"而无需修改现有代码\",{\"1\":{\"24\":1}}],[\"而无需修改car类的代码\",{\"1\":{\"22\":1}}],[\"而组合则代表\",{\"1\":{\"22\":1}}],[\"而超类中的方法可能会被其他代码调用\",{\"1\":{\"22\":1}}],[\"而是你\",{\"1\":{\"109\":1}}],[\"而是因为股票在升\",{\"1\":{\"101\":1}}],[\"而是应该依赖于引擎的抽象接口\",{\"1\":{\"22\":1}}],[\"而是解决特定问题的一般性概念\",{\"1\":{\"17\":1}}],[\"而不知道其他同事类\",{\"1\":{\"41\":1}}],[\"而不暴露该对象的内部表示\",{\"1\":{\"40\":1}}],[\"而不需要修改客户端的代码\",{\"1\":{\"34\":1}}],[\"而不需要了解子系统的具体实现细节\",{\"1\":{\"34\":3}}],[\"而不需要与子系统中的具体实现类进行交互\",{\"1\":{\"34\":1}}],[\"而不需要引入整个框架的复杂性和约束\",{\"1\":{\"22\":1}}],[\"而不需要依赖整个框架\",{\"1\":{\"22\":1}}],[\"而不会对整个应用程序产生太大的影响\",{\"1\":{\"22\":1}}],[\"而不会影响软件的正确性\",{\"1\":{\"22\":1}}],[\"而不是使用基于模型的代码生成器\",{\"1\":{\"169\":1}}],[\"而不是由标准\",{\"1\":{\"133\":1}}],[\"而不是由测试类自身触发的\",{\"1\":{\"22\":1}}],[\"而不是创建新的对象\",{\"1\":{\"122\":1}}],[\"而不是通过继承来扩展类\",{\"1\":{\"22\":1}}],[\"而不是面向实现\",{\"1\":{\"22\":2}}],[\"而不是具体的concreteengine实现\",{\"1\":{\"22\":1}}],[\"而不是具体的实现\",{\"1\":{\"22\":1}}],[\"而不是具体的实现细节\",{\"1\":{\"15\":1}}],[\"蓝图更多关注的是整体结构和规划\",{\"1\":{\"15\":1}}],[\"蓝图通常指的是系统或应用的高层设计\",{\"1\":{\"15\":1}}],[\"蓝图\",{\"0\":{\"15\":1}}],[\"基于区域集中式ee架构的整车部署\",{\"0\":{\"77\":1}}],[\"基于接口的实现\",{\"1\":{\"14\":1}}],[\"基础分析\",{\"1\":{\"104\":1}}],[\"基础设施\",{\"1\":{\"74\":1}}],[\"基础概念\",{\"0\":{\"12\":1}}],[\"和炒手们谈谈天\",{\"1\":{\"110\":1}}],[\"和买股票一样\",{\"1\":{\"107\":1}}],[\"和隐性电平\",{\"1\":{\"56\":1}}],[\"和变速箱\",{\"1\":{\"41\":1}}],[\"和当前索引\",{\"1\":{\"40\":1}}],[\"和一个组合节点\",{\"1\":{\"32\":1}}],[\"和掀背车的具体函数createsedan\",{\"1\":{\"24\":1,\"25\":1}}],[\"和\",{\"0\":{\"13\":1},\"1\":{\"32\":2,\"40\":1,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"54\":1,\"121\":1,\"163\":1}}],[\"+字符串拼接\",{\"2\":{\"125\":1}}],[\"+=\",{\"1\":{\"121\":1,\"122\":3}}],[\"++j\",{\"1\":{\"32\":1}}],[\"++i\",{\"1\":{\"32\":2}}],[\"+表示公有\",{\"1\":{\"13\":1}}],[\"+\",{\"0\":{\"13\":1},\"1\":{\"22\":1,\"32\":1,\"43\":1,\"84\":3,\"121\":1,\"122\":4,\"135\":1}}],[\"使一般投资者入场买股票的原因最主要的就是因为股票在升\",{\"1\":{\"101\":1}}],[\"使股民蒙受超出预期损失的第二个原因则是人性中的吃不得小亏的心理\",{\"1\":{\"96\":1}}],[\"使它们可以相互替换\",{\"1\":{\"45\":1}}],[\"使它们可以独立变化\",{\"1\":{\"31\":1}}],[\"使状态切换更加清晰\",{\"1\":{\"44\":1}}],[\"使各同事类不需要显式地相互引用\",{\"1\":{\"41\":2}}],[\"使各个对象不需要显式地相互引用\",{\"1\":{\"41\":1}}],[\"使请求的发送者与接收者解耦\",{\"1\":{\"39\":1}}],[\"使得代码更加易于维护和理解\",{\"1\":{\"47\":1}}],[\"使得代码更加清晰易读\",{\"1\":{\"35\":2}}],[\"使得可以在不改变元素类的情况下增加新操作\",{\"1\":{\"47\":1}}],[\"使得操作可以独立变化而不影响数据结构\",{\"1\":{\"47\":1}}],[\"使得它们可以相互替换\",{\"1\":{\"45\":1}}],[\"使得它们可以独立变化\",{\"1\":{\"31\":1}}],[\"使得算法可以独立于使用它的客户而变化\",{\"1\":{\"45\":1}}],[\"使得算法可以独立于集合对象变化\",{\"1\":{\"40\":1}}],[\"使得状态切换更加清晰和可管理\",{\"1\":{\"44\":1}}],[\"使得状态切换更加明确和可管理\",{\"1\":{\"44\":1}}],[\"使得主题和观察者之间的交互更加灵活和松散耦合\",{\"1\":{\"43\":1}}],[\"使得当一个对象的状态发生变化时\",{\"1\":{\"43\":1}}],[\"使得修改和扩展交互行为更加方便\",{\"1\":{\"41\":1}}],[\"使得系统更易于理解和维护\",{\"1\":{\"41\":1}}],[\"使得系统更容易理解和维护\",{\"1\":{\"41\":1}}],[\"使得系统更加灵活\",{\"1\":{\"24\":1}}],[\"使得系统更加灵活和可扩展\",{\"1\":{\"24\":2}}],[\"使得两者可以独立变化\",{\"1\":{\"40\":1}}],[\"使得不同的集合对象可以使用相同的遍历方法\",{\"1\":{\"40\":2}}],[\"使得多个处理者都有机会处理请求\",{\"1\":{\"38\":1}}],[\"使得多个处理者有机会处理该请求\",{\"1\":{\"38\":1}}],[\"使得子系统更容易使用\",{\"1\":{\"34\":3}}],[\"使得单个对象和组合对象可以一致地进行处理\",{\"1\":{\"32\":1}}],[\"使得客户端只需要与外观类进行交互\",{\"1\":{\"34\":3}}],[\"使得客户端的代码更加简洁\",{\"1\":{\"34\":3}}],[\"使得客户端代码无需关心产品的具体创建过程\",{\"1\":{\"25\":2,\"26\":1}}],[\"使得客户端代码无需关心具体汽车类型的创建细节\",{\"1\":{\"24\":1}}],[\"使得客户端无法直接创建产品对象\",{\"1\":{\"24\":1}}],[\"使得高层模块依赖于抽象\",{\"1\":{\"22\":1}}],[\"使得软件的维护更加容易\",{\"1\":{\"11\":1}}],[\"使代码易于理解和维护\",{\"1\":{\"17\":1}}],[\"使软件设计更加灵活\",{\"1\":{\"17\":1}}],[\"使用它们\",{\"1\":{\"164\":1}}],[\"使用以下命令激活虚拟环境\",{\"1\":{\"147\":1}}],[\"使用python命令和m\",{\"1\":{\"147\":1}}],[\"使用案例\",{\"0\":{\"141\":1}}],[\"使用\",{\"0\":{\"140\":1}}],[\"使用上一步得到的空指针进行数组操作\",{\"1\":{\"135\":1}}],[\"使用extern关键字可以实现一定程度的面向对象编程\",{\"1\":{\"129\":1}}],[\"使用extern模拟面向对象编程\",{\"0\":{\"129\":1}}],[\"使用+=可能更高效\",{\"1\":{\"122\":1}}],[\"使用策略模式可以避免在上下文中使用大量的条件语句来选择算法\",{\"1\":{\"45\":1}}],[\"使用迭代器遍历汽车集合\",{\"1\":{\"40\":1}}],[\"使用享元对象\",{\"1\":{\"35\":1}}],[\"使用扩展抽象部分对象\",{\"1\":{\"31\":1}}],[\"使用不同的实现部分\",{\"1\":{\"31\":1}}],[\"使用适配器的对象\",{\"1\":{\"30\":1}}],[\"使用中间层次的设计模式\",{\"1\":{\"22\":1}}],[\"使用指南\",{\"2\":{\"5\":1,\"6\":1,\"49\":1,\"93\":1,\"94\":1,\"115\":1}}],[\"使用vuepress搭建博客并部署到gitpages上\",{\"0\":{\"2\":1}}],[\"新产品\",{\"1\":{\"100\":1}}],[\"新的处理者可以很方便地加入到责任链中\",{\"1\":{\"38\":1}}],[\"新的设计模式不断涌现\",{\"1\":{\"10\":1}}],[\"新能源汽车行业从业者\",{\"1\":{\"1\":1}}],[\"可运行实体\",{\"1\":{\"162\":1}}],[\"可见将整数\",{\"1\":{\"135\":1}}],[\"可炒股就是赌钱\",{\"1\":{\"112\":1}}],[\"可信的想法\",{\"1\":{\"111\":1}}],[\"可怕的是不知有无本事再赚回来\",{\"1\":{\"103\":1}}],[\"可替换为\",{\"1\":{\"90\":1}}],[\"可能比s\",{\"1\":{\"122\":1}}],[\"可能是买股的好时机\",{\"1\":{\"102\":1}}],[\"可能导致系统的复杂性增加\",{\"1\":{\"47\":1}}],[\"可能导致内存泄漏和不支持多线程\",{\"1\":{\"28\":1}}],[\"可能导致内存泄漏\",{\"1\":{\"28\":1}}],[\"可能会影响性能\",{\"1\":{\"42\":1}}],[\"可能会对系统性能产生一定的影响\",{\"1\":{\"41\":1}}],[\"可能会变得难以维护\",{\"1\":{\"41\":1}}],[\"可能会使系统变得复杂\",{\"1\":{\"40\":1}}],[\"可能会增加一定的复杂性\",{\"1\":{\"44\":1}}],[\"可能会增加系统的复杂性和维护成本\",{\"1\":{\"43\":1}}],[\"可能会增加系统的复杂度\",{\"1\":{\"34\":1}}],[\"可能会增加额外的开销\",{\"1\":{\"40\":1}}],[\"可能会降低性能\",{\"1\":{\"36\":2}}],[\"可能会降低系统的性能\",{\"1\":{\"34\":1}}],[\"可能会导致通知延迟\",{\"1\":{\"43\":1}}],[\"可能会导致性能问题\",{\"1\":{\"38\":1}}],[\"可能会导致调试和跟踪较为困难\",{\"1\":{\"38\":1}}],[\"可能会导致代码冗余等\",{\"1\":{\"36\":1}}],[\"可能会导致代码冗余\",{\"1\":{\"36\":1}}],[\"可能会导致一些问题\",{\"1\":{\"35\":1}}],[\"可能会导致外部状态的问题以及不适合用于频繁变化的对象等\",{\"1\":{\"35\":1}}],[\"可能会导致外部状态的问题\",{\"1\":{\"35\":1}}],[\"可能会导致管理复杂性增加\",{\"1\":{\"32\":1}}],[\"可能会导致内存泄漏\",{\"1\":{\"28\":1}}],[\"可能会导致内存消耗过大\",{\"1\":{\"27\":1}}],[\"可能会导致类的数量增加\",{\"1\":{\"44\":1,\"46\":1}}],[\"可能会导致类的数量过多\",{\"1\":{\"24\":1}}],[\"可能会导致类数量大幅增加\",{\"1\":{\"39\":1}}],[\"可能会导致类层次结构的爆炸性增长\",{\"1\":{\"22\":1}}],[\"可扩展性和封装性\",{\"1\":{\"24\":1}}],[\"可扩展性和可维护性\",{\"1\":{\"11\":1}}],[\"可扩展性\",{\"1\":{\"24\":1,\"25\":1,\"26\":1}}],[\"可读性\",{\"1\":{\"17\":1}}],[\"可复用性\",{\"1\":{\"17\":1}}],[\"可复用面向对象软件的基础\",{\"1\":{\"10\":1,\"48\":1}}],[\"可维护性和可读性\",{\"1\":{\"17\":1}}],[\"可以生成swc模板和合约头文件\",{\"1\":{\"169\":1}}],[\"可以设计包括端口\",{\"1\":{\"160\":1}}],[\"可以考虑使用访问者模式\",{\"1\":{\"47\":1}}],[\"可以在对象浏览器中选择swc\",{\"1\":{\"169\":1}}],[\"可以在运行时动态切换策略\",{\"1\":{\"45\":1}}],[\"可以在不改变各元素类的情况下增加新操作\",{\"1\":{\"47\":1}}],[\"可以在不修改原有代码的情况下\",{\"1\":{\"33\":1}}],[\"可以在不同的项目中重复使用\",{\"1\":{\"11\":3,\"17\":2}}],[\"可以方便地在现有系统中添加新的操作\",{\"1\":{\"47\":1}}],[\"可以方便地增加新的策略而无需修改上下文类\",{\"1\":{\"45\":1}}],[\"可以方便地增加或删除观察者\",{\"1\":{\"43\":1}}],[\"可以方便地添加新的状态或修改现有状态\",{\"1\":{\"44\":1}}],[\"可以方便地保存和恢复对象的状态\",{\"1\":{\"42\":1}}],[\"可以保持对象的封装性\",{\"1\":{\"42\":1}}],[\"可以保存和恢复\",{\"1\":{\"42\":1}}],[\"可以根据需要实现不同的迭代器\",{\"1\":{\"40\":1}}],[\"可以很容易地增加新的命令\",{\"1\":{\"39\":1}}],[\"可以很容易地增加新的叶子节点或组合节点\",{\"1\":{\"32\":1}}],[\"可以将多个命令组合成一个复合命令\",{\"1\":{\"39\":1}}],[\"可以将对象的状态分离出来\",{\"1\":{\"35\":1}}],[\"可以动态地添加或删除责任链中的处理者\",{\"1\":{\"38\":1}}],[\"可以先创建一个虚拟代理\",{\"1\":{\"36\":1}}],[\"可以给这些对象动态地添加职责\",{\"1\":{\"33\":1}}],[\"可以组合成一个整体汽车\",{\"1\":{\"32\":1}}],[\"可以有多个具体子类\",{\"1\":{\"47\":1}}],[\"可以有效地减少类的数量\",{\"1\":{\"31\":1}}],[\"可以有不同的操作系统\",{\"1\":{\"31\":1}}],[\"可以独立地扩展抽象部分和实现部分\",{\"1\":{\"31\":1}}],[\"可以复制实现了原型接口的任何对象\",{\"1\":{\"27\":1}}],[\"可以使用以下命令\",{\"1\":{\"147\":2}}],[\"可以使用适配器模式将现有的接口转换为客户端期望的接口\",{\"1\":{\"30\":3}}],[\"可以使用单例模式来避免频繁的创建和销毁操作\",{\"1\":{\"28\":1}}],[\"可以使用单例模式来保证只有一个实例存在\",{\"1\":{\"28\":3}}],[\"可以使用生成器模式\",{\"1\":{\"25\":3,\"26\":3}}],[\"可以使用工厂方法模式\",{\"1\":{\"24\":3}}],[\"可以通过添加新的代码来扩展软件的功能\",{\"1\":{\"22\":1}}],[\"可以看到最终的结果和模式的功能\",{\"1\":{\"19\":1}}],[\"可以提高团队成员之间的沟通和协作效率\",{\"1\":{\"11\":1}}],[\"可以提高软件的可读性\",{\"1\":{\"11\":1}}],[\"可以减少代码的重复编写\",{\"1\":{\"11\":2,\"22\":1}}],[\"可用于解决代码中反复出现的设计问题\",{\"1\":{\"10\":1,\"17\":1}}],[\"的偏移量即为type的字节大小\",{\"1\":{\"135\":1}}],[\"的地址为0\",{\"1\":{\"135\":1}}],[\"的位置\",{\"1\":{\"135\":2}}],[\"的空指针时type\",{\"1\":{\"135\":1}}],[\"的空指针\",{\"1\":{\"135\":1}}],[\"的指针\",{\"1\":{\"135\":3}}],[\"的运算顺序可以分解为以下步骤\",{\"1\":{\"135\":1}}],[\"的实现通常依赖于编译器和目标体系结构\",{\"1\":{\"133\":1}}],[\"的能力\",{\"1\":{\"114\":1}}],[\"的上升几率\",{\"1\":{\"114\":1}}],[\"的特性\",{\"1\":{\"111\":1}}],[\"的恐惧和失去\",{\"1\":{\"110\":1}}],[\"的人士\",{\"1\":{\"109\":1}}],[\"的股民入市并非以赚钱为主要目的\",{\"1\":{\"103\":1}}],[\"的胜算或80\",{\"1\":{\"103\":1}}],[\"的胜算时应该为少\",{\"1\":{\"103\":1}}],[\"的胜算\",{\"1\":{\"103\":2}}],[\"的区别\",{\"0\":{\"76\":1},\"1\":{\"121\":1}}],[\"的低速\",{\"1\":{\"54\":1}}],[\"的高速\",{\"1\":{\"54\":1}}],[\"的层次结构\",{\"1\":{\"32\":1}}],[\"的\",{\"1\":{\"10\":1}}],[\"g\",{\"1\":{\"140\":3,\"165\":1}}],[\"given\",{\"1\":{\"140\":1}}],[\"git目录中\",{\"1\":{\"91\":1}}],[\"github代理配置指南\",{\"0\":{\"87\":1}}],[\"github\",{\"0\":{\"177\":1},\"1\":{\"4\":1},\"2\":{\"94\":1}}],[\"git\",{\"1\":{\"4\":5,\"89\":2,\"90\":2,\"92\":2}}],[\"globalvariable\",{\"1\":{\"128\":1}}],[\"global级是用户级别的配置\",{\"1\":{\"91\":1}}],[\"global\",{\"1\":{\"87\":1,\"89\":2,\"90\":3,\"91\":1,\"92\":2}}],[\"generated\",{\"1\":{\"140\":1}}],[\"general\",{\"1\":{\"63\":1}}],[\"geeksforgeeks\",{\"1\":{\"129\":1}}],[\"gearshifted\",{\"1\":{\"41\":2}}],[\"gear\",{\"1\":{\"41\":3}}],[\"get\",{\"1\":{\"92\":2}}],[\"getcar\",{\"1\":{\"35\":6}}],[\"getchild\",{\"1\":{\"32\":5}}],[\"getsingleton\",{\"1\":{\"28\":2}}],[\"green\",{\"1\":{\"35\":2}}],[\"gps\",{\"1\":{\"33\":1}}],[\"gasoline\",{\"1\":{\"30\":1}}],[\"gasolinecarinterface\",{\"1\":{\"30\":1}}],[\"gasolinecar\",{\"1\":{\"30\":11}}],[\"gateway\",{\"1\":{\"22\":1}}],[\"gof\",{\"1\":{\"10\":1}}],[\"它告诉编译器该变量在其他文件中已经定义\",{\"1\":{\"128\":1}}],[\"它传染的速度远超过瘟疫\",{\"1\":{\"111\":1}}],[\"它的盈利及增长的可能性\",{\"1\":{\"109\":1}}],[\"它的管理层\",{\"1\":{\"109\":1}}],[\"它的精华可以浓缩成两句话\",{\"1\":{\"103\":1}}],[\"它不应跌回我当天入场的最低点\",{\"1\":{\"108\":1}}],[\"它不会长久留在某只股票上\",{\"1\":{\"105\":1}}],[\"它不仅介绍了设计模式的定义\",{\"1\":{\"9\":1}}],[\"它总是走自己要走的路\",{\"1\":{\"103\":1}}],[\"它有时很活跃\",{\"1\":{\"103\":1}}],[\"它取代了农业社会丈量土地的方法\",{\"1\":{\"102\":1}}],[\"它往上一波高过一波\",{\"1\":{\"101\":1}}],[\"它为更高层提供了一个独立于硬件的接口\",{\"1\":{\"61\":1}}],[\"它为子系统中的一组接口提供一个统一的高层接口\",{\"1\":{\"34\":3}}],[\"它定义了一系列算法\",{\"1\":{\"45\":1}}],[\"它定义了一种一对多的依赖关系\",{\"1\":{\"43\":1}}],[\"它定义了一个创建对象的接口\",{\"1\":{\"24\":2}}],[\"它保持了对象的封装性\",{\"1\":{\"42\":1}}],[\"它保证了一个类只有一个实例\",{\"1\":{\"28\":1}}],[\"它保证一个类只有一个实例\",{\"1\":{\"28\":1}}],[\"它提供一种方法顺序访问一个聚合对象中的各个元素\",{\"1\":{\"40\":1}}],[\"它提供了一种通用的解决方案\",{\"1\":{\"17\":1}}],[\"它将请求封装成对象\",{\"1\":{\"39\":1}}],[\"它允许你定义一些操作\",{\"1\":{\"47\":1}}],[\"它允许你将对象组合成树状结构来表示\",{\"1\":{\"32\":1}}],[\"它允许对象在其内部状态改变时改变其行为\",{\"1\":{\"44\":1}}],[\"它允许在不破坏封装的前提下\",{\"1\":{\"42\":1}}],[\"它允许多个对象都有机会处理请求\",{\"1\":{\"38\":1}}],[\"它适用于需要遍历不同类型的集合对象\",{\"1\":{\"40\":1}}],[\"它适用于需要对请求进行排队\",{\"1\":{\"39\":1}}],[\"它适用于需要表示部分\",{\"1\":{\"32\":1}}],[\"它适用于系统中存在大量相似对象且对象的状态可以共享的场景\",{\"1\":{\"35\":1}}],[\"它摒弃了在每个对象中保存所有数据的方式\",{\"1\":{\"35\":1}}],[\"它可以控制对真实对象的访问\",{\"1\":{\"36\":1}}],[\"它可以将这些业务逻辑封装起来\",{\"1\":{\"34\":1}}],[\"它可以在不改变原有对象结构的情况下\",{\"1\":{\"33\":1}}],[\"它可能会导致类层次结构的复杂性增加\",{\"1\":{\"22\":1}}],[\"它是在忍无可忍的时候\",{\"1\":{\"103\":1}}],[\"它是一种结构型设计模式\",{\"1\":{\"33\":1}}],[\"它是通过组合而不是继承来达到目的\",{\"1\":{\"31\":1}}],[\"它能使你亏掉较预期多得多的\",{\"1\":{\"96\":1}}],[\"它能使接口不兼容的对象能够相互合作\",{\"1\":{\"30\":2}}],[\"它能够有效地增加新的操作而不改变元素类结构\",{\"1\":{\"47\":1}}],[\"它能创建一系列相关的对象\",{\"1\":{\"25\":2}}],[\"它还包含一个静态成员变量来存储唯一的实例\",{\"1\":{\"28\":1}}],[\"它通过将字符\",{\"1\":{\"122\":1}}],[\"它通过将抽象部分与实现部分分离\",{\"1\":{\"31\":1}}],[\"它通过使用mcal层的api来访问can收发器硬件\",{\"1\":{\"61\":1}}],[\"它通过引入一个中介对象来封装一系列对象之间的交互\",{\"1\":{\"41\":1}}],[\"它通过复制已有对象来创建新对象\",{\"1\":{\"27\":1}}],[\"它通常循着一条比较固定的路径运行\",{\"1\":{\"103\":1}}],[\"它通常包含了整个应用程序的基础架构\",{\"1\":{\"22\":1}}],[\"它通常涉及将一些常见的模式\",{\"1\":{\"22\":1}}],[\"它使你能够复制已有对象\",{\"1\":{\"27\":1}}],[\"它使你能够分步骤创建复杂对象\",{\"1\":{\"26\":2}}],[\"它实现了生成器接口\",{\"1\":{\"26\":1}}],[\"它包含一系列的\",{\"1\":{\"47\":1}}],[\"它包含一个指向realcar对象的指针\",{\"1\":{\"36\":1}}],[\"它包含一个汽车工厂对象factory\",{\"1\":{\"34\":1}}],[\"它包含一个汽车结构体car和一个燃油容量fuelcapacity\",{\"1\":{\"30\":1}}],[\"它包含一个汽车结构体car和一个电池容量batterycapacity\",{\"1\":{\"30\":1}}],[\"它包含一个创建汽车对象的函数指针createcar\",{\"1\":{\"34\":1}}],[\"它包含一个电动汽车接口electriccarinterface和一个传统燃油汽车结构体gasolinecar的指针\",{\"1\":{\"30\":1}}],[\"它包含了一个生成器实例\",{\"1\":{\"26\":1}}],[\"它包含了一个测试方法testaddition\",{\"1\":{\"22\":1}}],[\"它包含了设置汽车模型\",{\"1\":{\"26\":1}}],[\"它包含汽车的模型\",{\"1\":{\"26\":1}}],[\"它知道如何按照一定的顺序调用生成器的方法来创建产品\",{\"1\":{\"26\":1}}],[\"它根据传入的汽车类型参数创建相应类型的汽车\",{\"1\":{\"24\":1,\"25\":1}}],[\"它指导着框架与应用程序代码之间的交互方式\",{\"1\":{\"22\":1}}],[\"它接受一个动物对象并喂养它\",{\"1\":{\"22\":1}}],[\"它描述了系统的架构\",{\"1\":{\"15\":1}}],[\"它们就变成了原型\",{\"1\":{\"164\":1}}],[\"它们就像能根据需求进行调整的预制蓝图\",{\"1\":{\"10\":1,\"17\":1}}],[\"它们常常并不同步\",{\"1\":{\"96\":1}}],[\"它们通过中介者进行通信\",{\"1\":{\"41\":1}}],[\"它们可以将这些业务逻辑封装起来\",{\"1\":{\"34\":1}}],[\"它们是子系统中的具体实现类\",{\"1\":{\"34\":1}}],[\"它们扩展了car\",{\"1\":{\"31\":1}}],[\"它们分别创建相应类型的汽车对象\",{\"1\":{\"24\":1,\"25\":1}}],[\"它们实际上是对一组类的关系及\",{\"1\":{\"22\":1}}],[\"它们将复杂的系统分解为简单的模块\",{\"1\":{\"11\":1}}],[\"它们提供了一种通用的解决方案\",{\"1\":{\"11\":2}}],[\"帮助读者更好地理解和应用这些模式\",{\"1\":{\"9\":1}}],[\"撰写\",{\"1\":{\"9\":1}}],[\"activate\",{\"1\":{\"147\":1}}],[\"access\",{\"0\":{\"168\":1},\"1\":{\"162\":1}}],[\"accept\",{\"1\":{\"47\":13}}],[\"accelerating\",{\"1\":{\"39\":1}}],[\"accelerate\",{\"1\":{\"39\":1}}],[\"accord\",{\"1\":{\"27\":1,\"40\":1}}],[\"are\",{\"1\":{\"140\":1}}],[\"area\",{\"1\":{\"53\":1}}],[\"arguments\",{\"1\":{\"140\":1}}],[\"ap演示代码在次年春季发布\",{\"1\":{\"79\":1}}],[\"ap不会替代ap\",{\"1\":{\"77\":1}}],[\"ap与cp相辅相成\",{\"1\":{\"77\":1}}],[\"app\",{\"1\":{\"76\":1}}],[\"application\",{\"0\":{\"163\":1},\"1\":{\"76\":1,\"140\":1,\"162\":1}}],[\"applications\",{\"1\":{\"76\":1}}],[\"applenavigate\",{\"1\":{\"31\":2}}],[\"appleplaymusic\",{\"1\":{\"31\":2}}],[\"applecarplay\",{\"1\":{\"31\":14}}],[\"apple\",{\"1\":{\"31\":4}}],[\"apply\",{\"1\":{\"22\":2}}],[\"ap分层软件架构特点\",{\"1\":{\"71\":1}}],[\"ap\",{\"0\":{\"71\":1,\"75\":1,\"76\":1},\"1\":{\"76\":1}}],[\"abs\",{\"1\":{\"53\":1}}],[\"abstract\",{\"1\":{\"46\":1}}],[\"abstraction\",{\"1\":{\"31\":2}}],[\"asc\",{\"1\":{\"53\":1}}],[\"assembling\",{\"1\":{\"46\":2}}],[\"assemblebodyluxury\",{\"1\":{\"46\":2}}],[\"assemblebodyeconomy\",{\"1\":{\"46\":2}}],[\"assemblebody\",{\"1\":{\"46\":5}}],[\"assertequals\",{\"1\":{\"22\":2}}],[\"assert\",{\"1\":{\"22\":1}}],[\"algorithm\",{\"0\":{\"176\":1}}],[\"also\",{\"1\":{\"140\":1}}],[\"all\",{\"1\":{\"76\":1}}],[\"alt\",{\"1\":{\"75\":1,\"79\":1,\"92\":2,\"161\":2,\"162\":1,\"163\":1,\"164\":1,\"169\":1}}],[\"already\",{\"1\":{\"44\":4}}],[\"alexander\",{\"1\":{\"9\":1}}],[\"aggregate\",{\"1\":{\"40\":4}}],[\"available\",{\"1\":{\"36\":2,\"38\":3}}],[\"audi\",{\"1\":{\"35\":2}}],[\"autosar年度关键节点\",{\"0\":{\"79\":1}}],[\"autosar标准制定方式\",{\"0\":{\"78\":1}}],[\"autosar技术标准针对不同的需求提供了不同的解决方案\",{\"1\":{\"70\":1}}],[\"autosar技术标准框架\",{\"0\":{\"70\":1}}],[\"autosar解决方案概述\",{\"0\":{\"69\":1}}],[\"autosar中国官方培训课程\",{\"1\":{\"66\":1,\"80\":1}}],[\"autosar\",{\"0\":{\"51\":1,\"58\":1,\"64\":1,\"65\":1,\"159\":1,\"175\":1},\"1\":{\"66\":1,\"80\":1},\"2\":{\"67\":1,\"81\":1,\"157\":1,\"170\":1}}],[\"auto\",{\"0\":{\"151\":1,\"153\":1,\"182\":1},\"1\":{\"31\":4,\"151\":1}}],[\"a\",{\"1\":{\"34\":1,\"84\":7,\"104\":1,\"118\":1,\"121\":2,\"122\":10,\"140\":2,\"164\":1}}],[\"and\",{\"0\":{\"164\":1},\"1\":{\"76\":1,\"129\":1,\"162\":1,\"165\":1}}],[\"androidnavigate\",{\"1\":{\"31\":2}}],[\"androidplaymusic\",{\"1\":{\"31\":2}}],[\"androidauto\",{\"1\":{\"31\":14}}],[\"android\",{\"1\":{\"31\":3}}],[\"animal\",{\"1\":{\"22\":16}}],[\"adaptive\",{\"0\":{\"71\":1},\"1\":{\"71\":1}}],[\"adaptee\",{\"1\":{\"30\":1}}],[\"adaptercharge\",{\"1\":{\"30\":2}}],[\"adapter\",{\"1\":{\"30\":9}}],[\"address\",{\"1\":{\"76\":2}}],[\"additional\",{\"1\":{\"46\":1}}],[\"addcar\",{\"1\":{\"40\":4}}],[\"add\",{\"1\":{\"4\":1,\"32\":8}}],[\"这将把该目录添加到您的path中\",{\"1\":{\"146\":1}}],[\"这里并没有实际的数组\",{\"1\":{\"135\":1}}],[\"这里使用的是theme\",{\"1\":{\"2\":1}}],[\"这等效于\",{\"1\":{\"135\":1}}],[\"这只是一个简化的例子\",{\"1\":{\"134\":1}}],[\"这只是一种基于c语言的技巧或模式来实现一些面向对象的思想\",{\"1\":{\"129\":1}}],[\"这只股票的运动不对\",{\"1\":{\"103\":1}}],[\"这使得程序可以跨多个文件共享变量和函数\",{\"1\":{\"128\":1}}],[\"这使得它们更易于维护和扩展\",{\"1\":{\"22\":1}}],[\"这在大型项目中很有用\",{\"1\":{\"128\":1}}],[\"这气球会继续胀\",{\"1\":{\"111\":1}}],[\"这是一种原地操作\",{\"1\":{\"122\":1}}],[\"这是因为c++中字符串的+运算符被重载以连接字符串\",{\"1\":{\"122\":1}}],[\"这是因为在面向对象编程中\",{\"1\":{\"22\":1}}],[\"这是不可能的\",{\"1\":{\"109\":1}}],[\"这其实便是炒股艰难的地方\",{\"1\":{\"103\":1}}],[\"这个宏的工作原理是\",{\"1\":{\"134\":1}}],[\"这个想法必须具备即简单又复杂的特性\",{\"1\":{\"111\":1}}],[\"这个理论的简单解释便是\",{\"1\":{\"109\":1}}],[\"这个止损点不应超出投资额的20\",{\"1\":{\"104\":1}}],[\"这个世界充满聪明而失意的人\",{\"1\":{\"103\":1}}],[\"这个概念牢牢地记在心里\",{\"1\":{\"103\":1}}],[\"这个时候trcv处于常电模式\",{\"1\":{\"62\":1}}],[\"这一方面是人性中亏不起的心态\",{\"1\":{\"96\":1}}],[\"这一恒久变动的股市还有一致命的特点\",{\"1\":{\"96\":1}}],[\"这一点很重要\",{\"1\":{\"22\":1}}],[\"这就形成了所谓的升势\",{\"1\":{\"111\":1}}],[\"这就给你危险信号了\",{\"1\":{\"102\":1}}],[\"这就是为什么股票一开始升势\",{\"1\":{\"101\":1}}],[\"这就是依赖倒置原则的应用\",{\"1\":{\"22\":1}}],[\"这就淘汰了一大部分股民\",{\"1\":{\"96\":1}}],[\"这两种汽车制造过程中的某些步骤是相同的\",{\"1\":{\"46\":1}}],[\"这种技巧通常用于计算结构体或数组的大小\",{\"1\":{\"135\":1}}],[\"这种赚大钱的可能以及挣了大钱后对你的生活方式\",{\"1\":{\"96\":1}}],[\"这种模式有时也被称为发布\",{\"1\":{\"43\":1}}],[\"这种情况通常出现在具有多个功能维度的系统中\",{\"1\":{\"22\":1}}],[\"这也可能会导致系统的性能降低\",{\"1\":{\"34\":1}}],[\"这也可能会导致系统的复杂度增加\",{\"1\":{\"34\":1}}],[\"这展示了桥接模式如何在实际项目中使用\",{\"1\":{\"31\":1}}],[\"这可能会破坏元素对象的封装性\",{\"1\":{\"47\":1}}],[\"这可能会导致客户端代码的修改较为困难\",{\"1\":{\"25\":1}}],[\"这可能会导致抽象工厂类的代码变得复杂\",{\"1\":{\"25\":1}}],[\"这可能会限制你的灵活性\",{\"1\":{\"22\":1}}],[\"这符合好莱坞原则的精神\",{\"1\":{\"22\":1}}],[\"这些\",{\"1\":{\"111\":1}}],[\"这些人永远都达不到专业的层次\",{\"1\":{\"110\":1}}],[\"这些正确的心态至少包括以下几方面\",{\"1\":{\"110\":1}}],[\"这些知识能加深你对股市的认识\",{\"1\":{\"102\":1}}],[\"这些状态可以在多个对象之间共享\",{\"1\":{\"35\":1}}],[\"这些方法将调用carsystem的相应方法\",{\"1\":{\"31\":1}}],[\"这些方法的参数和返回值类型需要根据具体的产品族进行设计\",{\"1\":{\"25\":1}}],[\"这些模式允许我们将行为和特性组合起来\",{\"1\":{\"22\":1}}],[\"这些代码可能无法区分子类和超类的对象\",{\"1\":{\"22\":1}}],[\"这样做可以避免重复定义变量\",{\"1\":{\"128\":1}}],[\"这样做的思想基础不是为了解套\",{\"1\":{\"109\":1}}],[\"这样你就可以据此制定一系列游戏规则\",{\"1\":{\"113\":1}}],[\"这样可以提高代码的灵活性和可扩展性\",{\"1\":{\"24\":1}}],[\"这样可以减少开发和维护的成本\",{\"1\":{\"22\":1}}],[\"这样可以降低引入新技术或者更改现有逻辑所带来的风险\",{\"1\":{\"22\":1}}],[\"这样可以更灵活地管理代码\",{\"1\":{\"22\":1}}],[\"这样\",{\"1\":{\"22\":1,\"34\":3}}],[\"这本书由亚历山大\",{\"1\":{\"9\":1}}],[\"本文探讨c++中\",{\"1\":{\"121\":1}}],[\"本文主要讲解developer\",{\"1\":{\"151\":1}}],[\"本文主要讲解autosar解决方案相关内容\",{\"1\":{\"69\":1}}],[\"本文主要讲解autosar\",{\"1\":{\"51\":1,\"83\":1,\"159\":1}}],[\"本文主要介绍c语言中sizeof的原理分析\",{\"1\":{\"132\":1}}],[\"本文主要介绍c语言中extern的作用分析\",{\"1\":{\"126\":1}}],[\"本文主要介绍github\",{\"1\":{\"87\":1}}],[\"本文主要汇总c\",{\"1\":{\"117\":1}}],[\"本文主要总结设计模式这本书\",{\"1\":{\"7\":1}}],[\"本例中由\",{\"1\":{\"42\":1}}],[\"本例中隐含在\",{\"1\":{\"40\":1}}],[\"本书背景及重要性\",{\"0\":{\"9\":1}}],[\"本地运行指令可参考下面这个链接\",{\"1\":{\"2\":1}}],[\"阅读笔记\",{\"0\":{\"7\":1}}],[\"欢迎评论\",{\"1\":{\"4\":1,\"66\":1,\"80\":1,\"84\":1,\"92\":1,\"118\":1,\"123\":1,\"129\":1,\"135\":1,\"142\":1,\"148\":1}}],[\"欢迎送个表情包或评论\",{\"1\":{\"4\":1,\"66\":1,\"80\":1,\"84\":1,\"92\":1,\"118\":1,\"123\":1,\"129\":1,\"135\":1,\"142\":1,\"148\":1}}],[\"若有不对之处或建议\",{\"1\":{\"4\":1,\"66\":1,\"80\":1,\"84\":1,\"92\":1,\"118\":1,\"123\":1,\"129\":1,\"135\":1,\"142\":1,\"148\":1}}],[\"若本文对您有用\",{\"1\":{\"4\":1,\"66\":1,\"80\":1,\"84\":1,\"92\":1,\"118\":1,\"123\":1,\"129\":1,\"135\":1,\"142\":1,\"148\":1}}],[\"若参考上面项目构建链接\",{\"1\":{\"4\":1}}],[\"提供给人们无穷的想像\",{\"1\":{\"111\":1}}],[\"提供\",{\"1\":{\"47\":1}}],[\"提供了一种灵活的方式来处理多种类型的元素及其操作\",{\"1\":{\"47\":1}}],[\"提供了一种保存和恢复对象状态的方法\",{\"1\":{\"42\":1}}],[\"提供了更大的灵活性\",{\"1\":{\"45\":1}}],[\"提供如何将对象和类组成较大的结构\",{\"1\":{\"20\":1}}],[\"提供创建对象的机制\",{\"1\":{\"20\":1}}],[\"提供达成目标的明确步骤\",{\"1\":{\"19\":1}}],[\"提高灵活性\",{\"1\":{\"38\":1}}],[\"提高系统的可维护性和灵活性的场景\",{\"1\":{\"34\":1}}],[\"提高系统可扩展性\",{\"1\":{\"31\":1}}],[\"提高代码的可维护性\",{\"1\":{\"33\":1}}],[\"提高代码的复用率\",{\"1\":{\"11\":2}}],[\"提高了系统的灵活性\",{\"1\":{\"34\":1}}],[\"提高了系统的可维护性和灵活性\",{\"1\":{\"34\":1}}],[\"提高了系统的可维护性\",{\"1\":{\"34\":1}}],[\"提高了系统的可扩展性和灵活性\",{\"1\":{\"31\":1}}],[\"提高了代码的逻辑清晰性和可维护性\",{\"1\":{\"46\":1}}],[\"提高了代码的可维护性\",{\"1\":{\"33\":2}}],[\"提高了代码的可扩展性\",{\"1\":{\"30\":1}}],[\"提高了代码的灵活性\",{\"1\":{\"30\":1}}],[\"提高了代码的复用性\",{\"1\":{\"30\":1}}],[\"提高了程序的性能\",{\"1\":{\"28\":1,\"35\":1}}],[\"提高程序的性能\",{\"1\":{\"28\":1,\"35\":2}}],[\"提高性能\",{\"1\":{\"27\":1,\"28\":1,\"35\":1}}],[\"提高开发效率\",{\"1\":{\"22\":1}}],[\"提高软件的开发效率\",{\"1\":{\"11\":1}}],[\"提高软件的可维护性\",{\"1\":{\"11\":1}}],[\"提高软件的可复用性\",{\"1\":{\"11\":1}}],[\"提示\",{\"1\":{\"4\":1,\"66\":1,\"80\":1,\"84\":1,\"90\":1,\"91\":1,\"92\":1,\"118\":1,\"123\":1,\"127\":1,\"129\":1,\"135\":1,\"142\":1,\"148\":1}}],[\"提交本地分支到远程分支\",{\"1\":{\"4\":1}}],[\"<venv>必须被包含虚拟环境的目录的路径所替换\",{\"1\":{\"146\":1}}],[\"<no\",{\"1\":{\"140\":1}}],[\"<non\",{\"1\":{\"140\":1}}],[\"<gt>\",{\"1\":{\"140\":2}}],[\"<compat>\",{\"1\":{\"140\":2}}],[\"<charset>\",{\"1\":{\"140\":1}}],[\"<scheme>\",{\"1\":{\"140\":1}}],[\"<string\",{\"1\":{\"27\":1,\"32\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1}}],[\"<stdlib\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"31\":1,\"32\":1,\"34\":1,\"35\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1}}],[\"<stdio\",{\"1\":{\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"129\":1}}],[\"<file>\",{\"1\":{\"140\":3}}],[\"<dirs>\",{\"1\":{\"140\":1}}],[\"<url>\",{\"1\":{\"140\":2}}],[\"<path>\",{\"1\":{\"140\":2}}],[\"<\",{\"1\":{\"32\":4,\"35\":1,\"40\":2,\"43\":4}}],[\"<remote\",{\"1\":{\"4\":1}}],[\"<local\",{\"1\":{\"4\":1}}],[\"3128\",{\"1\":{\"140\":1}}],[\"3\",{\"0\":{\"15\":1,\"19\":1,\"162\":1,\"165\":1},\"1\":{\"4\":1,\"40\":2,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"147\":1,\"148\":1}}],[\"m\",{\"1\":{\"147\":2}}],[\"movq\",{\"1\":{\"135\":1}}],[\"modules\",{\"1\":{\"140\":2}}],[\"mod\",{\"1\":{\"84\":1}}],[\"modes\",{\"1\":{\"165\":1}}],[\"mode\",{\"0\":{\"174\":1},\"1\":{\"45\":12,\"140\":1,\"165\":1}}],[\"model\",{\"1\":{\"24\":4,\"25\":4,\"26\":4,\"27\":4,\"28\":2,\"30\":4,\"34\":1,\"39\":2,\"40\":3,\"47\":9}}],[\"multiple\",{\"1\":{\"76\":1}}],[\"music\",{\"1\":{\"31\":2}}],[\"mmu\",{\"1\":{\"76\":1}}],[\"mpu\",{\"1\":{\"76\":1}}],[\"mcal配置\",{\"0\":{\"63\":1}}],[\"mcal相关配置\",{\"0\":{\"60\":1}}],[\"mcu的can信号与can总线建立起数据交互\",{\"1\":{\"61\":1}}],[\"mcu的can外设控制模块\",{\"1\":{\"59\":1}}],[\"memory\",{\"1\":{\"76\":1}}],[\"memento\",{\"0\":{\"42\":1},\"1\":{\"42\":20}}],[\"metallic\",{\"1\":{\"46\":1}}],[\"method\",{\"0\":{\"46\":1}}],[\"mediator\",{\"0\":{\"41\":1},\"1\":{\"41\":33}}],[\"myenv\",{\"1\":{\"147\":4}}],[\"myobject\",{\"1\":{\"129\":7}}],[\"myclass\",{\"1\":{\"129\":16}}],[\"mytestclass是一个简单的测试类\",{\"1\":{\"22\":1}}],[\"mytestclass\",{\"1\":{\"22\":1}}],[\"myrepo\",{\"1\":{\"4\":1}}],[\"manual\",{\"0\":{\"184\":1}}],[\"manufacturing\",{\"1\":{\"46\":4}}],[\"manufacturecar\",{\"1\":{\"26\":2}}],[\"mapping\",{\"1\":{\"162\":1}}],[\"max\",{\"1\":{\"43\":3}}],[\"malloc\",{\"1\":{\"24\":3,\"25\":3,\"26\":3,\"27\":2,\"28\":1,\"31\":5,\"32\":3,\"33\":2,\"34\":3,\"35\":2,\"38\":3,\"39\":2,\"40\":6,\"41\":3,\"42\":2,\"43\":3,\"44\":4,\"45\":4}}],[\"main函数\",{\"1\":{\"38\":1}}],[\"main\",{\"1\":{\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":2,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"129\":2,\"134\":1}}],[\"master\",{\"1\":{\"4\":1}}],[\"certain\",{\"1\":{\"165\":1}}],[\"cd\",{\"1\":{\"147\":1}}],[\"cmd\",{\"1\":{\"147\":1}}],[\"custom\",{\"1\":{\"140\":1}}],[\"current\",{\"1\":{\"140\":1}}],[\"currentstate\",{\"1\":{\"44\":1}}],[\"currentindex\",{\"1\":{\"40\":2}}],[\"currentinspector\",{\"1\":{\"38\":2}}],[\"currentitem\",{\"1\":{\"40\":4}}],[\"c文件编译成汇编文件可发现\",{\"1\":{\"135\":1}}],[\"c文件\",{\"1\":{\"134\":1}}],[\"c中定义的myobject对象\",{\"1\":{\"129\":1}}],[\"c中引用了在myclass\",{\"1\":{\"129\":1}}],[\"c语言sizeof宏分析\",{\"0\":{\"132\":1}}],[\"c语言\",{\"2\":{\"131\":1,\"137\":1}}],[\"c语言extern关键字作用分析\",{\"0\":{\"126\":1}}],[\"c语言汽车举例\",{\"1\":{\"34\":1}}],[\"c++中两种字符串拼接的区别\",{\"0\":{\"121\":1}}],[\"c++\",{\"2\":{\"120\":1,\"125\":1}}],[\"c++语法报错问题\",{\"1\":{\"117\":1}}],[\"c++语法报错集合汇总\",{\"0\":{\"117\":1}}],[\"cplusplus\",{\"0\":{\"179\":1}}],[\"cp和ap标准\",{\"1\":{\"79\":1}}],[\"cp应用范围更广\",{\"1\":{\"77\":1}}],[\"cp所定义的系统服务\",{\"1\":{\"72\":1}}],[\"cp分层软件架构支持\",{\"1\":{\"72\":1}}],[\"cp\",{\"0\":{\"72\":1,\"75\":1,\"76\":1},\"1\":{\"76\":1}}],[\"cr\",{\"1\":{\"47\":1}}],[\"createnormalmode\",{\"1\":{\"45\":2}}],[\"createnavigation\",{\"1\":{\"43\":2}}],[\"createeconomicmode\",{\"1\":{\"45\":2}}],[\"createengine\",{\"1\":{\"41\":2}}],[\"createengineinspector\",{\"1\":{\"38\":2}}],[\"creatememento\",{\"1\":{\"42\":2}}],[\"createtransmission\",{\"1\":{\"41\":2}}],[\"createiterator\",{\"1\":{\"40\":2}}],[\"createbrakeinspector\",{\"1\":{\"38\":2}}],[\"createwheelinspector\",{\"1\":{\"38\":2}}],[\"createleaf\",{\"1\":{\"32\":4}}],[\"createapplecarplay\",{\"1\":{\"31\":2}}],[\"createandroidauto\",{\"1\":{\"31\":2}}],[\"createdrivingstate\",{\"1\":{\"44\":2}}],[\"createdashboard\",{\"1\":{\"43\":2}}],[\"createdecorator\",{\"1\":{\"33\":3}}],[\"createdirector\",{\"1\":{\"26\":2}}],[\"created\",{\"1\":{\"24\":3,\"25\":3}}],[\"createhatchback\",{\"1\":{\"24\":2,\"25\":2}}],[\"createsportmode\",{\"1\":{\"45\":2}}],[\"createstoppedstate\",{\"1\":{\"44\":2}}],[\"createstopenginecommand\",{\"1\":{\"39\":2}}],[\"createstartstate\",{\"1\":{\"44\":2}}],[\"createstartenginecommand\",{\"1\":{\"39\":2}}],[\"createsuv和createhatchback\",{\"1\":{\"24\":1,\"25\":1}}],[\"createsuv\",{\"1\":{\"24\":2,\"25\":2,\"31\":2}}],[\"createsedan\",{\"1\":{\"24\":2,\"25\":2,\"31\":2}}],[\"createcomposite\",{\"1\":{\"32\":2}}],[\"createconcreteengine\",{\"1\":{\"22\":2}}],[\"createcarmediator\",{\"1\":{\"41\":2}}],[\"createcarcollection\",{\"1\":{\"40\":2}}],[\"createcardealer\",{\"1\":{\"34\":2}}],[\"createcarfactory\",{\"1\":{\"34\":2,\"35\":2}}],[\"createcar\",{\"1\":{\"22\":2,\"24\":4,\"25\":4,\"27\":2,\"31\":1,\"33\":2,\"34\":3,\"43\":2,\"44\":2,\"45\":2}}],[\"calibration\",{\"1\":{\"165\":2}}],[\"can调试策略\",{\"0\":{\"65\":1}}],[\"cantrcv的模式转换主要通过控制dio或者spi来控制硬件trcv\",{\"1\":{\"62\":1}}],[\"cantrcv\",{\"0\":{\"61\":1,\"62\":1}}],[\"canharadwareobject\",{\"1\":{\"60\":1}}],[\"cancontroller\",{\"1\":{\"60\":1}}],[\"cangeneral\",{\"1\":{\"60\":1}}],[\"can模块的收发\",{\"1\":{\"59\":1}}],[\"can系统构成\",{\"0\":{\"57\":1}}],[\"can功能特性\",{\"0\":{\"56\":1}}],[\"can特性\",{\"0\":{\"55\":1}}],[\"can总线上\",{\"1\":{\"56\":1}}],[\"can总线协议是一种iso\",{\"1\":{\"54\":1}}],[\"can总线是一种用于在不同的ecu\",{\"1\":{\"54\":1}}],[\"can标准及原理图\",{\"0\":{\"54\":1}}],[\"can最初是由德国的bosch公司为汽车监测\",{\"1\":{\"53\":1}}],[\"can越来越受到人们的重视\",{\"1\":{\"53\":1}}],[\"can通信概述\",{\"0\":{\"53\":1}}],[\"can通信基本原理\",{\"0\":{\"52\":1}}],[\"can\",{\"0\":{\"59\":1},\"1\":{\"51\":1,\"53\":1,\"54\":2,\"61\":2,\"76\":1,\"83\":1,\"140\":1},\"2\":{\"68\":1}}],[\"can协议栈集成\",{\"0\":{\"64\":1}}],[\"can协议栈概述\",{\"0\":{\"58\":1}}],[\"can协议栈\",{\"0\":{\"51\":1}}],[\"capacity\",{\"1\":{\"32\":1,\"40\":4}}],[\"camry\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":1,\"39\":1,\"40\":1,\"47\":1}}],[\"case\",{\"1\":{\"24\":3,\"25\":3}}],[\"caraccept\",{\"1\":{\"47\":3}}],[\"carfeaturesvisitor\",{\"1\":{\"47\":6}}],[\"carfactory\",{\"1\":{\"34\":6,\"35\":7}}],[\"carmanufacturingprocess\",{\"1\":{\"46\":4}}],[\"carmediator\",{\"1\":{\"41\":19}}],[\"caretaker\",{\"1\":{\"42\":2}}],[\"carcollection\",{\"1\":{\"40\":15}}],[\"carcolor\",{\"1\":{\"35\":3}}],[\"carinspector\",{\"1\":{\"38\":21}}],[\"carproxy结构体是car接口的代理\",{\"1\":{\"36\":1}}],[\"carproxydrive\",{\"1\":{\"36\":3}}],[\"carproxy\",{\"1\":{\"36\":8}}],[\"carplaymusic\",{\"1\":{\"31\":4}}],[\"carplay\",{\"1\":{\"31\":4}}],[\"car5\",{\"1\":{\"35\":3}}],[\"car4\",{\"1\":{\"35\":3}}],[\"car3\",{\"1\":{\"35\":3,\"40\":5}}],[\"car2\",{\"1\":{\"35\":3,\"40\":5}}],[\"car1\",{\"1\":{\"35\":3,\"40\":5}}],[\"carstate\",{\"1\":{\"42\":2}}],[\"cars\",{\"1\":{\"35\":1,\"40\":1}}],[\"carsystem\",{\"1\":{\"31\":31}}],[\"carbrand\",{\"1\":{\"35\":3}}],[\"cardealer\",{\"1\":{\"34\":7}}],[\"carnavigate\",{\"1\":{\"31\":4}}],[\"cartype\",{\"1\":{\"24\":2,\"25\":2,\"26\":4,\"27\":3,\"28\":2,\"30\":2,\"34\":5}}],[\"car类依赖于engine接口\",{\"1\":{\"22\":1}}],[\"car\",{\"1\":{\"22\":17,\"24\":17,\"25\":17,\"26\":14,\"27\":28,\"28\":10,\"30\":8,\"31\":29,\"32\":13,\"33\":19,\"34\":16,\"35\":21,\"36\":9,\"39\":26,\"40\":24,\"42\":29,\"43\":32,\"44\":76,\"45\":33,\"46\":12,\"47\":19}}],[\"chain\",{\"0\":{\"38\":1}}],[\"charging\",{\"1\":{\"30\":1}}],[\"charge\",{\"1\":{\"30\":4}}],[\"char\",{\"1\":{\"24\":1,\"25\":1,\"26\":3,\"27\":2,\"28\":1,\"30\":1,\"32\":3,\"33\":2,\"34\":1,\"38\":4,\"39\":1,\"40\":1,\"41\":2,\"47\":3}}],[\"checking\",{\"1\":{\"36\":1}}],[\"checkout\",{\"1\":{\"4\":1}}],[\"childcount\",{\"1\":{\"32\":1}}],[\"children\",{\"1\":{\"32\":1}}],[\"child\",{\"1\":{\"32\":6}}],[\"c\",{\"0\":{\"117\":1,\"179\":1},\"1\":{\"24\":1,\"26\":1,\"28\":1,\"30\":1,\"35\":1,\"36\":1,\"129\":4,\"133\":2,\"147\":1},\"2\":{\"50\":1,\"120\":1}}],[\"clean\",{\"1\":{\"140\":2}}],[\"clonedcar\",{\"1\":{\"27\":6}}],[\"clonecar\",{\"1\":{\"27\":2}}],[\"clone\",{\"1\":{\"27\":1}}],[\"client\",{\"1\":{\"27\":1,\"30\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":2,\"165\":1}}],[\"click\",{\"1\":{\"22\":1}}],[\"classic基本使用\",{\"1\":{\"159\":1}}],[\"classic使用教程\",{\"0\":{\"159\":1}}],[\"classic\",{\"0\":{\"72\":1,\"151\":1,\"183\":1},\"1\":{\"72\":1}}],[\"classes\",{\"1\":{\"34\":1}}],[\"class\",{\"1\":{\"22\":13,\"46\":2,\"118\":1}}],[\"code\",{\"1\":{\"76\":2}}],[\"colleague\",{\"1\":{\"41\":8}}],[\"collection\",{\"1\":{\"40\":24}}],[\"color\",{\"1\":{\"35\":5}}],[\"connections\",{\"1\":{\"162\":1}}],[\"connect\",{\"0\":{\"151\":1,\"153\":1,\"182\":1},\"1\":{\"151\":1}}],[\"configurator\",{\"0\":{\"183\":1}}],[\"configuration\",{\"1\":{\"76\":1}}],[\"config\",{\"1\":{\"89\":2,\"90\":2,\"92\":2}}],[\"configset\",{\"1\":{\"63\":1}}],[\"containing\",{\"1\":{\"140\":1}}],[\"controller\",{\"1\":{\"53\":1}}],[\"context\",{\"1\":{\"44\":2,\"45\":2}}],[\"constructluxurycar\",{\"1\":{\"46\":2}}],[\"constructeconomycar\",{\"1\":{\"46\":2}}],[\"const\",{\"1\":{\"32\":2,\"38\":4,\"41\":2}}],[\"concreteelement\",{\"1\":{\"47\":1}}],[\"concreteengine是一个具体的实现\",{\"1\":{\"22\":1}}],[\"concreteengine\",{\"1\":{\"22\":2}}],[\"concretevisitor\",{\"1\":{\"47\":1}}],[\"concretestrategy\",{\"1\":{\"45\":2}}],[\"concretestate\",{\"1\":{\"44\":2}}],[\"concretesubject\",{\"1\":{\"43\":2}}],[\"concreteobserver\",{\"1\":{\"43\":2}}],[\"concretemediator\",{\"1\":{\"41\":2}}],[\"concreteaggregate\",{\"1\":{\"40\":2}}],[\"concreteiterator\",{\"1\":{\"40\":2}}],[\"concreteimplementor\",{\"1\":{\"31\":2}}],[\"concretecommand\",{\"1\":{\"39\":2}}],[\"concretehandler\",{\"1\":{\"38\":1}}],[\"concretebuilder\",{\"1\":{\"26\":31}}],[\"concrete\",{\"1\":{\"22\":3,\"26\":1,\"27\":1,\"33\":2,\"35\":1,\"46\":1}}],[\"compare\",{\"1\":{\"140\":1}}],[\"compositegetchild\",{\"1\":{\"32\":2}}],[\"compositeremove\",{\"1\":{\"32\":2}}],[\"compositeadd\",{\"1\":{\"32\":2}}],[\"compositeoperation\",{\"1\":{\"32\":2}}],[\"composite\",{\"1\":{\"32\":51}}],[\"components\",{\"0\":{\"163\":1},\"1\":{\"162\":1}}],[\"component\",{\"1\":{\"32\":55,\"33\":2,\"38\":16,\"163\":1,\"164\":3}}],[\"comma\",{\"1\":{\"140\":1}}],[\"command\",{\"0\":{\"39\":1},\"1\":{\"39\":40}}],[\"communication\",{\"1\":{\"76\":2}}],[\"com\",{\"1\":{\"4\":1}}],[\"html\",{\"1\":{\"148\":1}}],[\"http\",{\"1\":{\"89\":2,\"90\":1,\"92\":1,\"140\":2}}],[\"https\",{\"1\":{\"4\":1,\"89\":2,\"90\":1,\"92\":1,\"140\":2,\"148\":1}}],[\"h\",{\"1\":{\"129\":6}}],[\"h和can\",{\"1\":{\"56\":1}}],[\"head\",{\"1\":{\"48\":1}}],[\"hand\",{\"1\":{\"165\":1}}],[\"handler\",{\"1\":{\"38\":1}}],[\"haedwareabs\",{\"1\":{\"58\":1}}],[\"has\",{\"1\":{\"41\":2,\"76\":1}}],[\"hatchback\",{\"1\":{\"24\":13,\"25\":13,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":2}}],[\"home\",{\"1\":{\"141\":2}}],[\"honda\",{\"1\":{\"27\":1,\"35\":2,\"40\":1,\"47\":1}}],[\"hope主题\",{\"1\":{\"2\":1}}],[\"h>\",{\"1\":{\"22\":1,\"24\":1,\"25\":1,\"26\":2,\"27\":3,\"28\":2,\"30\":1,\"31\":2,\"32\":3,\"33\":1,\"34\":2,\"35\":2,\"36\":1,\"38\":3,\"39\":3,\"40\":3,\"41\":3,\"42\":3,\"43\":2,\"44\":2,\"45\":2,\"46\":1,\"47\":1,\"129\":1}}],[\"添加远程仓库的引用\",{\"1\":{\"4\":1}}],[\"20\",{\"1\":{\"42\":1,\"43\":1}}],[\"200\",{\"1\":{\"33\":1,\"43\":1}}],[\"2021\",{\"1\":{\"47\":1}}],[\"2022\",{\"1\":{\"40\":1,\"47\":1}}],[\"2024\",{\"1\":{\"27\":1,\"40\":1}}],[\"2023\",{\"1\":{\"24\":3,\"25\":3,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"34\":1,\"40\":1,\"47\":1,\"129\":2}}],[\"2\",{\"0\":{\"12\":1,\"14\":1,\"18\":1,\"161\":1,\"164\":1},\"1\":{\"4\":1,\"22\":2,\"32\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"103\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"140\":2}}],[\"bin\",{\"1\":{\"146\":1}}],[\"by\",{\"1\":{\"140\":2,\"164\":1}}],[\"b点分别是波峰和波谷\",{\"1\":{\"104\":1}}],[\"b表示a除以b的余数\",{\"1\":{\"84\":1}}],[\"body\",{\"1\":{\"46\":2,\"127\":1}}],[\"between\",{\"1\":{\"129\":1}}],[\"before\",{\"1\":{\"44\":1}}],[\"be\",{\"1\":{\"44\":1,\"140\":2}}],[\"been\",{\"1\":{\"41\":1}}],[\"benz\",{\"1\":{\"35\":2}}],[\"bmw\",{\"1\":{\"35\":2}}],[\"blog\",{\"0\":{\"173\":1}}],[\"black\",{\"1\":{\"35\":2}}],[\"blue\",{\"1\":{\"35\":2}}],[\"blueprint\",{\"0\":{\"15\":1}}],[\"browser\",{\"1\":{\"164\":1}}],[\"browser中\",{\"1\":{\"164\":1}}],[\"browser界面有三种视图\",{\"1\":{\"163\":1}}],[\"brake\",{\"1\":{\"38\":4}}],[\"brakeinspector\",{\"1\":{\"38\":15}}],[\"brand\",{\"1\":{\"35\":5}}],[\"branch>\",{\"1\":{\"4\":2}}],[\"branch\",{\"1\":{\"4\":1}}],[\"break\",{\"1\":{\"32\":1,\"43\":1}}],[\"balanced\",{\"1\":{\"45\":1}}],[\"batterycapacity\",{\"1\":{\"30\":1}}],[\"based\",{\"1\":{\"76\":3}}],[\"base\",{\"1\":{\"26\":2,\"38\":3,\"146\":3}}],[\"build\",{\"1\":{\"26\":4}}],[\"builder\",{\"1\":{\"26\":29}}],[\"button\",{\"1\":{\"22\":3}}],[\"b\",{\"1\":{\"4\":1,\"84\":6}}],[\"查看本地分支\",{\"1\":{\"4\":1}}],[\"15\",{\"1\":{\"109\":1}}],[\"150\",{\"1\":{\"42\":1,\"43\":1,\"47\":1}}],[\"14\",{\"1\":{\"109\":1}}],[\"13\",{\"1\":{\"109\":1}}],[\"12\",{\"1\":{\"109\":1}}],[\"127\",{\"1\":{\"89\":2}}],[\"125\",{\"1\":{\"54\":1}}],[\"11\",{\"1\":{\"109\":1}}],[\"11519两个系列\",{\"1\":{\"54\":1}}],[\"11898\",{\"1\":{\"54\":2}}],[\"10倒过来\",{\"1\":{\"102\":1}}],[\"1080\",{\"1\":{\"89\":1,\"140\":1}}],[\"10～125\",{\"1\":{\"54\":1}}],[\"10\",{\"1\":{\"43\":2,\"109\":2,\"140\":6}}],[\"100\",{\"1\":{\"35\":1,\"42\":1,\"43\":1}}],[\"1\",{\"0\":{\"9\":1,\"13\":1,\"17\":1,\"160\":1,\"163\":1},\"1\":{\"4\":1,\"32\":2,\"43\":2,\"89\":2,\"98\":1,\"99\":1,\"100\":1,\"103\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"134\":2,\"135\":6,\"140\":4}}],[\"项目构建\",{\"0\":{\"3\":1}}],[\"项目环境\",{\"1\":{\"2\":1}}],[\"构建汽车\",{\"1\":{\"26\":1}}],[\"构建\",{\"1\":{\"2\":1}}]],\"version\":2}}")).map(([e,t])=>[e,_t(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=xt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ie(t,r,o,"max")]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ie(t,r,o,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
