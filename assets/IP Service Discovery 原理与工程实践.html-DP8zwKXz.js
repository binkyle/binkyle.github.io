import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as r}from"./app-DLUtTMR9.js";const s="/assets/image-DVGnorzO.png",a="/assets/image-1-BjaPqJob.png",d={};function l(p,e){return r(),i("div",null,e[0]||(e[0]=[n(`<h2 id="一、什么是-some-ip-sd" tabindex="-1"><a class="header-anchor" href="#一、什么是-some-ip-sd"><span>一、什么是 SOME/IP SD？</span></a></h2><p><strong>SOME/IP SD (Service Discovery)</strong> 是 AUTOSAR 定义的一种基于 IP 网络的服务发现协议，是 <strong>SOME/IP</strong> 协议族的重要组成部分。</p><p>它的目标是：</p><blockquote><p>让软件组件 SWC 在不预知对方 IP/端口的情况下，能够在运行时动态发现服务并实现通信绑定。</p></blockquote><hr><h3 id="📦-sd-解决了什么" tabindex="-1"><a class="header-anchor" href="#📦-sd-解决了什么"><span>📦 SD 解决了什么？</span></a></h3><ul><li>动态获取服务的地址和端口</li><li>接收服务状态改变通知（提供中 / 未提供）</li><li>支持 Client 主动搜索服务 (FindService)</li><li>支持 Provider 先行广播服务 (OfferService)</li><li>支持事件组订阅与 TTL 保活机制</li></ul><h3 id="🔗-应用场景" tabindex="-1"><a class="header-anchor" href="#🔗-应用场景"><span>🔗 应用场景</span></a></h3><ul><li>ECU 动态上线 / 下线切换</li><li>多 Client 相互竞争服务实例</li><li>路由 / 软件控制器 / ADAS 实时组织</li><li>TTL 控制通信生命周期</li></ul><h3 id="🧠-核心特性" tabindex="-1"><a class="header-anchor" href="#🧠-核心特性"><span>🧠 核心特性</span></a></h3><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>服务发现</td><td>FindService / OfferService</td></tr><tr><td>订阅组织</td><td>SubscribeEventGroup / ACK</td></tr><tr><td>基于 UDP</td><td>使用组播和点播</td></tr><tr><td>ECU 通用</td><td>IP + 服务性架构</td></tr><tr><td>RTE 系接</td><td>RTE 调用自动调用 SD</td></tr></tbody></table><h3 id="🗺-工作流程简图" tabindex="-1"><a class="header-anchor" href="#🗺-工作流程简图"><span>🗺 工作流程简图</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Provider: OfferService  → 广播服务</span></span>
<span class="line"><span>Client  : FindService   → 搜索服务</span></span>
<span class="line"><span>Provider: OfferService  → 响应</span></span>
<span class="line"><span>Client  : Subscribe     → 订阅事件</span></span>
<span class="line"><span>Provider: ACK + Data    → 确认 + 常规推送</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="💬-一句话总结" tabindex="-1"><a class="header-anchor" href="#💬-一句话总结"><span>💬 一句话总结</span></a></h3><blockquote><p>“SOME/IP SD 是软件服务分布和动态绑定的基础，使 Client 无需预置 IP 也能自动联系服务。”</p></blockquote><hr><h2 id="二、协议格式-组成" tabindex="-1"><a class="header-anchor" href="#二、协议格式-组成"><span>二、协议格式 &amp; 组成</span></a></h2><p>SOME/IP SD 使用 UDP 30490 端口，消息结构：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+--------------------+</span></span>
<span class="line"><span>| SOME/IP Header     |</span></span>
<span class="line"><span>| Protocol ID = 0xFFFF</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>| SD Header          |</span></span>
<span class="line"><span>| Entries[]          |</span></span>
<span class="line"><span>| Options[]          |</span></span>
<span class="line"><span>+--------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Entry</strong>：表达动作意图 (Offer, Find, Subscribe)</li><li><strong>Option</strong>：配置结构 (IP, Port, TTL, Config)</li></ul><hr><h2 id="三、正常通信流程" tabindex="-1"><a class="header-anchor" href="#三、正常通信流程"><span>三、正常通信流程</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[Provider]</span></span>
<span class="line"><span>  → OfferService (multi-cast)</span></span>
<span class="line"><span>[Client]</span></span>
<span class="line"><span>  → FindService (multi-cast)</span></span>
<span class="line"><span>[Provider]</span></span>
<span class="line"><span>  → OfferService (response)</span></span>
<span class="line"><span>[Client]</span></span>
<span class="line"><span>  → SubscribeEventGroup (uni-cast)</span></span>
<span class="line"><span>[Provider]</span></span>
<span class="line"><span>  → ACK + push event periodically</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="⏱-provider-与-client-的交互时序图-文字示意" tabindex="-1"><a class="header-anchor" href="#⏱-provider-与-client-的交互时序图-文字示意"><span>⏱ Provider 与 Client 的交互时序图（文字示意）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Provider           Client</span></span>
<span class="line"><span>   |                 |</span></span>
<span class="line"><span>   |---OfferService-&gt;|   (多播)</span></span>
<span class="line"><span>   |                 |</span></span>
<span class="line"><span>   |&lt;--FindService---|   (多播)</span></span>
<span class="line"><span>   |---OfferService-&gt;|   (回应)</span></span>
<span class="line"><span>   |&lt;--Subscribe------|   (点播订阅)</span></span>
<span class="line"><span>   |---ACK-----------&gt;|   (确认)</span></span>
<span class="line"><span>   |=== 事件推送周期性发送 ===&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、provider-与-consumer-状态机模型" tabindex="-1"><a class="header-anchor" href="#四、provider-与-consumer-状态机模型"><span>四、Provider 与 Consumer 状态机模型</span></a></h2><h3 id="✅-provider-状态机结构图" tabindex="-1"><a class="header-anchor" href="#✅-provider-状态机结构图"><span>✅ Provider 状态机结构图</span></a></h3><figure><img src="`+s+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>该图展示了 Provider 所经历的 4 个典型状态：</p><ul><li>Not Ready</li><li>Initial Wait Phase</li><li>Repetition Phase</li><li>Main Phase（AVAILABLE）</li></ul><p>每个状态通过定时器或接收报文事件进行转换，OfferService 报文会在不同阶段以不同频率发送。</p><h3 id="✅-consumer-client-状态机结构图" tabindex="-1"><a class="header-anchor" href="#✅-consumer-client-状态机结构图"><span>✅ Consumer（Client）状态机结构图</span></a></h3><figure><img src="'+a+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>Client 状态机结构较复杂，包含服务未见、搜索中、已见、订阅中、已订阅、停止等状态，核心转换基于：</p><ul><li>是否收到 OfferService</li><li>TTL 是否过期</li><li>是否完成订阅/取消订阅行为</li></ul><p>这些状态图清晰呈现了 AUTOSAR SOME/IP SD 协议在实际运行中的时序机制与控制逻辑。</p><h3 id="✅-provider-状态机" tabindex="-1"><a class="header-anchor" href="#✅-provider-状态机"><span>✅ Provider 状态机</span></a></h3><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>DOWN</td><td>服务未初始化或未就绪</td></tr><tr><td>INITIAL_WAIT</td><td>等待广播窗口开始</td></tr><tr><td>REPETITION</td><td>重复广播 OfferService</td></tr><tr><td>AVAILABLE</td><td>开始接受订阅请求，定期推送事件</td></tr></tbody></table><h3 id="✅-consumer-client-状态机" tabindex="-1"><a class="header-anchor" href="#✅-consumer-client-状态机"><span>✅ Consumer（Client）状态机</span></a></h3><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>INIT</td><td>启动后准备寻找服务</td></tr><tr><td>WAIT_FOR_OFFER</td><td>已发送 FindService，等待回应</td></tr><tr><td>SUBSCRIBED</td><td>成功订阅事件组，处于活跃状态</td></tr><tr><td>REFRESH</td><td>正在续订以保持 TTL 不失效</td></tr></tbody></table><blockquote><p>工具如 Wireshark 抓包可见每次状态跳转时对应的 SD 报文（Entry 类型 + Option 地址）</p></blockquote><hr><h2 id="五、实际-subscribeeventgroup-抽象" tabindex="-1"><a class="header-anchor" href="#五、实际-subscribeeventgroup-抽象"><span>五、实际 SubscribeEventGroup 抽象</span></a></h2><table><thead><tr><th>字段</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>Service ID</td><td>0x1234</td><td>服务唯一标识</td></tr><tr><td>Instance ID</td><td>0x0001</td><td>服务实例 ID</td></tr><tr><td>EventGroup ID</td><td>0x8001</td><td>要订阅的事件组</td></tr><tr><td>TTL</td><td>5s</td><td>订阅有效期</td></tr><tr><td>Endpoint</td><td>192.168.0.10:30500</td><td>接收推送的地址</td></tr></tbody></table><hr><h2 id="六、协议细节-行为解析" tabindex="-1"><a class="header-anchor" href="#六、协议细节-行为解析"><span>六、协议细节 &amp; 行为解析</span></a></h2><h3 id="📑-sd-报文类型概览-autosar-官方定义" tabindex="-1"><a class="header-anchor" href="#📑-sd-报文类型概览-autosar-官方定义"><span>📑 SD 报文类型概览（AUTOSAR 官方定义）</span></a></h3><p>根据 AUTOSAR SD 规范文档中的 Table 5.2，Entry 的语义由 <code>EntryType</code> 字段和 <code>TTL</code> 字段共同决定。下表是官方支持的报文类型组合：</p><table><thead><tr><th>EntryType</th><th>十六进制</th><th>TTL &gt; 0 （正常行为）</th><th>TTL = 0 （终止行为）</th></tr></thead><tbody><tr><td>0</td><td>0x00</td><td>FindService</td><td>✖️（不支持 TTL=0）</td></tr><tr><td>1</td><td>0x01</td><td>OfferService</td><td>StopOfferService</td></tr><tr><td>2</td><td>0x02</td><td>SubscribeEventGroup</td><td>StopSubscribeEventGroup</td></tr><tr><td>3</td><td>0x03</td><td>SubscribeEventGroupAck</td><td>SubscribeEventGroupNack</td></tr></tbody></table><blockquote><p>📌 注：TTL = 0 仅在 EntryType ≠ 0x00 的情况下有效，用于表示“释放”或“拒绝”类行为。FindService 是 Client 主动查找服务的行为，其 TTL 字段始终无效。</p></blockquote><p>该表定义了 SD 报文在实际通信中支持的行为类型，是理解服务提供/发现/订阅/释放等动作的根本依据。</p><p>SOME/IP SD 报文中的行为由 EntryType 和 TTL 联合决定，标准定义如下：</p><table><thead><tr><th>TTL 条件</th><th>EntryType (十六进制)</th><th>报文类型</th><th>描述</th></tr></thead><tbody><tr><td>TTL &gt; 0</td><td>0x00</td><td>FindService</td><td>Client 查找服务</td></tr><tr><td>TTL &gt; 0</td><td>0x01</td><td>OfferService</td><td>Provider 提供服务</td></tr><tr><td>TTL &gt; 0</td><td>0x02</td><td>SubscribeEventGroup</td><td>Client 请求订阅事件组</td></tr><tr><td>TTL &gt; 0</td><td>0x03</td><td>SubscribeEventGroupAck</td><td>Provider 确认接受订阅</td></tr><tr><td>TTL = 0</td><td>0x01</td><td>StopOfferService</td><td>Provider 停止提供服务</td></tr><tr><td>TTL = 0</td><td>0x02</td><td>StopSubscribeEventGroup</td><td>Client 取消事件组订阅</td></tr><tr><td>TTL = 0</td><td>0x03</td><td>SubscribeEventGroupNack</td><td>Provider 拒绝订阅请求</td></tr></tbody></table><p>📌 注意：EntryType 为 0x00（FindService）报文在 TTL = 0 时无效，FindService 本身无 TTL 字段。</p><h3 id="🧹-服务释放机制-unsubscribe-stop-offer" tabindex="-1"><a class="header-anchor" href="#🧹-服务释放机制-unsubscribe-stop-offer"><span>🧹 服务释放机制（Unsubscribe / Stop Offer）</span></a></h3><p>SOME/IP SD 协议通过以下两种方式完成服务释放或断开订阅：</p><h4 id="✅-1-provider-停止提供服务" tabindex="-1"><a class="header-anchor" href="#✅-1-provider-停止提供服务"><span>✅ 1. Provider 停止提供服务</span></a></h4><ul><li>Provider 可以通过发送 <code>StopOfferService</code> Entry（即将 TTL 设置为 0 的 Offer）告知所有 Client 服务下线；</li><li>之后，Provider 进入 <code>DOWN</code> 状态，不再接受订阅，也不再发送事件。</li></ul><h4 id="✅-2-client-主动取消订阅" tabindex="-1"><a class="header-anchor" href="#✅-2-client-主动取消订阅"><span>✅ 2. Client 主动取消订阅</span></a></h4><ul><li>Client 可以发送一个带 TTL = 0 的 <code>SubscribeEventGroup</code> 报文，表示取消订阅；</li><li>Provider 接收后应停止向该 Client 推送事件。</li></ul><p>📌 这两个机制可用于系统下电、网络退出或软件模块重启时的服务注销，保持网络资源清洁。</p><h3 id="🔁-offerservice-报文的发送时机" tabindex="-1"><a class="header-anchor" href="#🔁-offerservice-报文的发送时机"><span>🔁 OfferService 报文的发送时机</span></a></h3><p>即使 Client 已完成订阅，<strong>Provider 仍会继续发送 OfferService 报文</strong>，但发送频率随状态机阶段变化：</p><ul><li>在 REPETITION 状态：Provider 会在启动阶段<strong>快速多次发送 Offer</strong>，用于确保所有潜在 Client 能收到服务信息；</li><li>在 AVAILABLE 状态：Provider 以<strong>较长周期（通常每 5 秒或更长）继续广播 OfferService</strong>，用于支持<strong>新加入网络的 Client</strong>完成绑定；</li><li>Provider 并不会因为某个 Client 已订阅而停止 Offer，它是“面向所有潜在 Client”的广播机制。</li></ul><h3 id="🔍-client-的-findservice-触发时机" tabindex="-1"><a class="header-anchor" href="#🔍-client-的-findservice-触发时机"><span>🔍 Client 的 FindService 触发时机</span></a></h3><ul><li>Client 启动后进入 <code>INIT</code> 状态，会<strong>立即发送 FindService 报文</strong>，主动寻找目标服务；</li><li>若在一定时间内未收到 Provider 的 Offer（即超时），Client 会<strong>周期性重发 FindService</strong>，直到收到有效 Offer；</li><li>一旦 Client 完成了订阅并进入 SUBSCRIBED 状态，按照标准规范，<strong>它将不再发送 FindService 报文</strong>，而是通过定期重新 Subscribe 来维持服务绑定。</li></ul><p>📌 所以：<strong>FindService 是 Client 在发现阶段使用的唯一探测方式，完成订阅后其功能由订阅续期机制替代。</strong></p><hr><ul><li>TTL 表示订阅有效时长 (sec)</li><li>Client 必须在 TTL 到期前重新 Subscribe</li><li>Provider 如未收到续订，则退出推送</li></ul><hr><h2 id="七、实战故障排查" tabindex="-1"><a class="header-anchor" href="#七、实战故障排查"><span>七、实战故障排查</span></a></h2><table><thead><tr><th>环节</th><th>问题</th></tr></thead><tbody><tr><td>Subscribe 失败</td><td>TTL = 0 ／ Option 配置错误</td></tr><tr><td>未收接事件</td><td>Provider 未处于 Main Phase（未启用周期推送）或未正确触发事件发送逻辑</td></tr><tr><td>ACK 遗失</td><td>端口错误 ／ IP 错误</td></tr><tr><td>Wireshark 抓包</td><td><code>udp.port == 30490</code> 筛选</td></tr></tbody></table><hr><h2 id="八、与-autosar-rte-组成" tabindex="-1"><a class="header-anchor" href="#八、与-autosar-rte-组成"><span>八、与 AUTOSAR RTE 组成</span></a></h2><p>通常配置于 .arxml 中，并由 RTE 生成 API：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Application SWC</span></span>
<span class="line"><span>  ↓ RTE</span></span>
<span class="line"><span>SOME/IP Adapter</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>SOME/IP + SD Stack (UDP/IP)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="九、结论" tabindex="-1"><a class="header-anchor" href="#九、结论"><span>九、结论</span></a></h2><table><thead><tr><th>组件</th><th>角色</th></tr></thead><tbody><tr><td>SD 协议</td><td>服务发现 / 绑定机制</td></tr><tr><td>Entry</td><td>操作意图（Offer / Find / Sub…）</td></tr><tr><td>Option</td><td>网络参数 (IP / TTL / Port)</td></tr><tr><td>TTL 机制</td><td>维持订阅有效性</td></tr><tr><td>Provider</td><td>提供服务，推送事件</td></tr><tr><td>Client</td><td>订阅服务，解析回复</td></tr></tbody></table><hr>`,81)]))}const h=t(d,[["render",l]]),v=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Autosar/SOMEIP/IP%20Service%20Discovery%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5.html","title":"SOME/IP Service Discovery 原理与工程实践","lang":"zh-CN","frontmatter":{"title":"SOME/IP Service Discovery 原理与工程实践","order":1,"date":"2025-06-11T00:00:00.000Z","categories":["AUTOSAR","网络通信"],"tags":["SOME/IP","Service Discovery","Ethernet"],"isOriginal":true,"article":true,"timeline":true,"description":"一、什么是 SOME/IP SD？ SOME/IP SD (Service Discovery) 是 AUTOSAR 定义的一种基于 IP 网络的服务发现协议，是 SOME/IP 协议族的重要组成部分。 它的目标是： 让软件组件 SWC 在不预知对方 IP/端口的情况下，能够在运行时动态发现服务并实现通信绑定。 📦 SD 解决了什么？ 动态获取服务的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SOME/IP Service Discovery 原理与工程实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-11T18:37:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"孤星旅记\\",\\"url\\":\\"https://binkyle.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://binkyle.github.io/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Autosar/SOMEIP/IP%20Service%20Discovery%20%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"孤星旅记"}],["meta",{"property":"og:title","content":"SOME/IP Service Discovery 原理与工程实践"}],["meta",{"property":"og:description","content":"一、什么是 SOME/IP SD？ SOME/IP SD (Service Discovery) 是 AUTOSAR 定义的一种基于 IP 网络的服务发现协议，是 SOME/IP 协议族的重要组成部分。 它的目标是： 让软件组件 SWC 在不预知对方 IP/端口的情况下，能够在运行时动态发现服务并实现通信绑定。 📦 SD 解决了什么？ 动态获取服务的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-11T18:37:32.000Z"}],["meta",{"property":"article:tag","content":"Ethernet"}],["meta",{"property":"article:tag","content":"Service Discovery"}],["meta",{"property":"article:tag","content":"SOME/IP"}],["meta",{"property":"article:published_time","content":"2025-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-11T18:37:32.000Z"}]]},"git":{"createdTime":1749667052000,"updatedTime":1749667052000,"contributors":[{"name":"cxqd","username":"cxqd","email":"xb142857@outlook.com","commits":1,"url":"https://github.com/cxqd"}]},"readingTime":{"minutes":6.07,"words":1822},"filePathRelative":"技术笔记/Autosar/SOMEIP/IP Service Discovery 原理与工程实践.md","excerpt":"<h2>一、什么是 SOME/IP SD？</h2>\\n<p><strong>SOME/IP SD (Service Discovery)</strong> 是 AUTOSAR 定义的一种基于 IP 网络的服务发现协议，是 <strong>SOME/IP</strong> 协议族的重要组成部分。</p>\\n<p>它的目标是：</p>\\n<blockquote>\\n<p>让软件组件 SWC 在不预知对方 IP/端口的情况下，能够在运行时动态发现服务并实现通信绑定。</p>\\n</blockquote>\\n<hr>\\n<h3>📦 SD 解决了什么？</h3>\\n<ul>\\n<li>动态获取服务的地址和端口</li>\\n<li>接收服务状态改变通知（提供中 / 未提供）</li>\\n<li>支持 Client 主动搜索服务 (FindService)</li>\\n<li>支持 Provider 先行广播服务 (OfferService)</li>\\n<li>支持事件组订阅与 TTL 保活机制</li>\\n</ul>","autoDesc":true}');export{h as comp,v as data};
